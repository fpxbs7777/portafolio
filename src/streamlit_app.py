"""
IOL Portfolio Analyzer - Versi√≥n Mejorada y Organizada
=====================================================

Aplicaci√≥n Streamlit para an√°lisis avanzado de portafolios de inversi√≥n
con integraci√≥n a la API de IOL (Invertir Online).

Caracter√≠sticas principales:
- An√°lisis completo de portafolios
- Optimizaci√≥n avanzada con m√∫ltiples estrategias
- An√°lisis t√©cnico integrado
- Gesti√≥n de riesgo y diversificaci√≥n
- Interfaz moderna y responsive
"""

import streamlit as st
import requests
import plotly.graph_objects as go
import pandas as pd
from plotly.subplots import make_subplots
from datetime import date, timedelta, datetime
import numpy as np
import yfinance as yf
import scipy.optimize as op
from scipy import stats
from scipy import optimize
import warnings
import streamlit.components.v1 as components
import matplotlib.pyplot as plt
import time
import importlib
import random

# Configuraci√≥n de warnings
warnings.filterwarnings('ignore')

# ============================================================================
# CONFIGURACI√ìN DE LA P√ÅGINA Y ESTILOS
# ============================================================================

def configurar_pagina():
    """Configura la p√°gina principal de Streamlit"""
    st.set_page_config(
        page_title="IOL Portfolio Analyzer Pro",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )

def aplicar_estilos_css():
    """Aplica estilos CSS personalizados para una interfaz moderna"""
    st.markdown("""
    <style>
        /* Tema oscuro profesional */
        .stApp, 
        .stApp > div[data-testid="stAppViewContainer"],
        .stApp > div[data-testid="stAppViewContainer"] > div {
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        /* T√≠tulos con gradiente */
        h1, h2, h3 {
            background: linear-gradient(90deg, #4CAF50, #45a049);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 700;
        }
        
        /* Tarjetas modernas */
        .metric-card {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid #4CAF50;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
        }
        
        /* Botones modernos */
        .stButton > button {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            border-radius: 25px;
            border: none;
            color: white;
            font-weight: 600;
            padding: 12px 24px;
            transition: all 0.3s ease;
        }
        
        .stButton > button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4);
        }
        
        /* Pesta√±as mejoradas */
        .stTabs [data-baseweb="tab"] {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 12px;
            color: #e2e8f0;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .stTabs [aria-selected="true"] {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }
        
        /* Inputs modernos */
        .stTextInput, .stNumberInput, .stDateInput, .stSelectbox {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 10px;
            border: 1px solid #4CAF50;
        }
        
        /* Tablas mejoradas */
        .dataframe {
            background: rgba(30, 41, 59, 0.8);
            border-radius: 15px;
            overflow: hidden;
        }
        
        /* Scrollbar personalizada */
        ::-webkit-scrollbar {
            width: 10px;
            height: 10px;
        }
        
        ::-webkit-scrollbar-track {
            background: #1e293b;
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            border-radius: 5px;
        }
    </style>
    """, unsafe_allow_html=True)

# ============================================================================
# FUNCIONES DE AN√ÅLISIS DE PORTAFOLIO AVANZADO
# ============================================================================

def load_data(rics, argentina_tickers, token_acceso=None):
    """
    Descarga datos intrad√≠a para una lista de s√≠mbolos usando yfinance y/o IOL.
    
    Args:
        rics (list): Lista de s√≠mbolos a descargar.
        argentina_tickers (set): Conjunto de tickers argentinos.
        token_acceso (str, optional): Token de acceso para IOL.
        
    Returns:
        dict: Diccionario con los datos descargados.
    """
    data = {}
    progress_bar = st.progress(0)
    total_rics = len(rics)
    
    for i, ric in enumerate(rics):
        try:
            with st.spinner(f"Descargando datos para {ric}..."):
                # Intentar primero con IOL si es un s√≠mbolo argentino y tenemos token
                if ric in argentina_tickers and token_acceso:
                    st.info(f"üîÑ Intentando obtener datos de {ric} desde IOL...")
                    try:
                        # Intentar obtener serie hist√≥rica desde IOL
                        fecha_hasta = date.today()
                        fecha_desde = fecha_hasta - timedelta(days=30)
                        
                        df_iol = obtener_serie_historica_iol(
                            token_acceso,
                            'bMERVAL',  # Mercado por defecto para acciones argentinas
                            ric,
                            fecha_desde.strftime('%Y-%m-%d'),
                            fecha_hasta.strftime('%Y-%m-%d'),
                            'ajustada'
                        )
                        
                        if not df_iol.empty and 'ultimoPrecio' in df_iol.columns:
                            # Convertir datos de IOL al formato de yfinance
                            df_converted = pd.DataFrame({
                                'Open': df_iol['apertura'],
                                'High': df_iol['maximo'],
                                'Low': df_iol['minimo'],
                                'Close': df_iol['ultimoPrecio'],
                                'Volume': df_iol['volumenNominal']
                            }, index=df_iol['fechaHora'])
                            
                            data[ric] = df_converted
                            st.success(f"‚úÖ Datos obtenidos desde IOL para {ric}")
                            continue
                        else:
                            st.warning(f"‚ö†Ô∏è No se pudieron obtener datos de IOL para {ric}, intentando con yfinance...")
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Error con IOL para {ric}: {str(e)}, intentando con yfinance...")
                
                # Si no se pudo con IOL o no es s√≠mbolo argentino, usar yfinance
                symbol = ric + ".BA" if ric in argentina_tickers else ric
                df = yf.download(symbol, period="1d", interval="1m")
                
                if not df.empty:
                    data[ric] = df
                    st.success(f"‚úÖ Datos descargados para {ric} desde yfinance")
                else:
                    st.warning(f"‚ö†Ô∏è No se encontraron datos para {ric} (buscando {symbol})")
                    
        except Exception as e:
            st.error(f"‚ùå Error al descargar datos para {ric}: {e}")
        
        # Actualizar barra de progreso
        progress_bar.progress((i + 1) / total_rics)
    
    progress_bar.empty()
    return data

def calcular_frontera_eficiente_avanzada(rics, notional, target_return=None, include_min_variance=True, token_acceso=None):
    """
    Calcula la frontera eficiente usando an√°lisis avanzado de portafolio.
    
    Args:
        rics (list): Lista de s√≠mbolos de activos
        notional (float): Valor nominal del portafolio
        target_return (float, optional): Retorno objetivo
        include_min_variance (bool): Incluir portafolio de m√≠nima varianza
        token_acceso (str, optional): Token de acceso para IOL
        
    Returns:
        dict: Diccionario con portafolios optimizados
    """
    try:
        # Configurar par√°metros
        num_assets = len(rics)
        if num_assets < 2:
            st.error("‚ùå Se necesitan al menos 2 activos para calcular la frontera eficiente")
            return None, None
        
        # Descargar datos usando yfinance y/o IOL
        argentina_tickers = {"INTC", "ETHA", "GOOGL", "ARKK", "GGAL", "YPF", "PAMP", "COME", "BYMA", "S10N5", "S30S5"}
        data = load_data(rics, argentina_tickers, token_acceso)
        
        # Filtrar s√≠mbolos con datos disponibles
        rics_with_data = [ric for ric in rics if ric in data]
        if not rics_with_data:
            st.error("‚ùå No se descarg√≥ ning√∫n dato. Revisa la lista de RICs o la conexi√≥n a Internet.")
            return None, None
        
        if len(rics_with_data) < 2:
            st.error("‚ùå Se necesitan al menos 2 activos con datos para el an√°lisis")
            return None, None
        
        st.success(f"‚úÖ Datos obtenidos para {len(rics_with_data)} activos")
        
        # Calcular retornos diarios
        returns_data = {}
        for ric in rics_with_data:
            if ric in data and not data[ric].empty:
                # Calcular retornos logar√≠tmicos
                prices = data[ric]['Close']
                returns = np.log(prices / prices.shift(1)).dropna()
                if len(returns) > 0:
                    returns_data[ric] = returns
        
        if len(returns_data) < 2:
            st.error("‚ùå No hay suficientes datos de retornos para el an√°lisis")
            return None, None
        
        # Crear DataFrame de retornos con √≠ndice com√∫n
        # Encontrar el √≠ndice com√∫n m√°s largo
        common_dates = None
        for ric, returns in returns_data.items():
            if common_dates is None:
                common_dates = returns.index
            else:
                common_dates = common_dates.intersection(returns.index)
        
        if len(common_dates) < 10:  # Necesitamos al menos 10 d√≠as de datos
            st.error("‚ùå No hay suficientes fechas comunes entre los activos")
            return None, None
        
        # Crear DataFrame con fechas comunes
        returns_df = pd.DataFrame(index=common_dates)
        for ric, returns in returns_data.items():
            returns_df[ric] = returns.loc[common_dates]
        
        # Eliminar filas con NaN
        returns_df = returns_df.dropna()
        
        if len(returns_df) < 10:
            st.error("‚ùå Despu√©s de limpiar datos, no hay suficientes observaciones")
            return None, None
        
        st.success(f"‚úÖ DataFrame de retornos creado con {len(returns_df)} observaciones")
        
        # Calcular m√©tricas de portafolio
        mean_returns = returns_df.mean() * 252  # Anualizar
        cov_matrix = returns_df.cov() * 252     # Anualizar
        
        # Crear portafolios optimizados
        portfolios = {}
        
        # 1. Portafolio de m√≠nima varianza
        if include_min_variance:
            try:
                min_var_weights = optimize_minimum_variance(cov_matrix)
                portfolios['min-variance'] = {
                    'weights': min_var_weights,
                    'return': np.sum(mean_returns * min_var_weights),
                    'volatility': np.sqrt(np.dot(min_var_weights.T, np.dot(cov_matrix, min_var_weights))),
                    'sharpe': np.sum(mean_returns * min_var_weights) / np.sqrt(np.dot(min_var_weights.T, np.dot(cov_matrix, min_var_weights)))
                }
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Error en portafolio de m√≠nima varianza: {str(e)}")
        
        # 2. Portafolio de m√°ximo Sharpe
        try:
            max_sharpe_weights = optimize_maximum_sharpe(mean_returns, cov_matrix)
            portfolios['max-sharpe'] = {
                'weights': max_sharpe_weights,
                'return': np.sum(mean_returns * max_sharpe_weights),
                'volatility': np.sqrt(np.dot(max_sharpe_weights.T, np.dot(cov_matrix, max_sharpe_weights))),
                'sharpe': np.sum(mean_returns * max_sharpe_weights) / np.sqrt(np.dot(max_sharpe_weights.T, np.dot(cov_matrix, max_sharpe_weights)))
            }
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Error en portafolio de m√°ximo Sharpe: {str(e)}")
        
        # 3. Portafolio de pesos iguales
        equal_weights = np.ones(len(rics_with_data)) / len(rics_with_data)
        portfolios['equal-weight'] = {
            'weights': equal_weights,
            'return': np.sum(mean_returns * equal_weights),
            'volatility': np.sqrt(np.dot(equal_weights.T, np.dot(cov_matrix, equal_weights))),
            'sharpe': np.sum(mean_returns * equal_weights) / np.sqrt(np.dot(equal_weights.T, np.dot(cov_matrix, equal_weights)))
        }
        
        # 4. Portafolio con retorno objetivo
        if target_return is not None:
            try:
                target_weights = optimize_target_return(mean_returns, cov_matrix, target_return)
                portfolios['target-return'] = {
                    'weights': target_weights,
                    'return': np.sum(mean_returns * target_weights),
                    'volatility': np.sqrt(np.dot(target_weights.T, np.dot(cov_matrix, target_weights))),
                    'sharpe': np.sum(mean_returns * target_weights) / np.sqrt(np.dot(target_weights.T, np.dot(cov_matrix, target_weights)))
                }
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Error en portafolio con retorno objetivo: {str(e)}")
        
        st.success(f"‚úÖ {len(portfolios)} portafolios optimizados calculados exitosamente")
        return portfolios, returns_df
        
    except Exception as e:
        st.error(f"‚ùå Error calculando frontera eficiente: {str(e)}")
        st.exception(e)  # Mostrar el traceback completo para debugging
        return None, None

def optimize_minimum_variance(cov_matrix):
    """Optimiza para m√≠nima varianza del portafolio"""
    n_assets = len(cov_matrix)
    
    def objective(weights):
        return np.dot(weights.T, np.dot(cov_matrix, weights))
    
    def constraint(weights):
        return np.sum(weights) - 1.0
    
    constraints = {'type': 'eq', 'fun': constraint}
    bounds = [(0, 1) for _ in range(n_assets)]
    initial_weights = np.array([1/n_assets] * n_assets)
    
    result = optimize.minimize(objective, initial_weights, 
                             constraints=constraints, bounds=bounds, method='SLSQP')
    
    if result.success:
        return result.x
    else:
        raise ValueError("Optimizaci√≥n no convergi√≥")

def optimize_maximum_sharpe(mean_returns, cov_matrix, risk_free_rate=0.04):
    """Optimiza para m√°ximo ratio de Sharpe"""
    n_assets = len(mean_returns)
    
    def objective(weights):
        portfolio_return = np.sum(mean_returns * weights)
        portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
        
        if portfolio_volatility == 0:
            return 0
        
        sharpe_ratio = (portfolio_return - risk_free_rate) / portfolio_volatility
        return -sharpe_ratio  # Minimizar negativo = maximizar positivo
    
    def constraint(weights):
        return np.sum(weights) - 1.0
    
    constraints = {'type': 'eq', 'fun': constraint}
    bounds = [(0, 1) for _ in range(n_assets)]
    initial_weights = np.array([1/n_assets] * n_assets)
    
    result = optimize.minimize(objective, initial_weights, 
                             constraints=constraints, bounds=bounds, method='SLSQP')
    
    if result.success:
        return result.x
    else:
        raise ValueError("Optimizaci√≥n no convergi√≥")

def optimize_target_return(mean_returns, cov_matrix, target_return):
    """Optimiza para un retorno objetivo espec√≠fico"""
    n_assets = len(mean_returns)
    
    def objective(weights):
        return np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
    
    def constraint_sum(weights):
        return np.sum(weights) - 1.0
    
    def constraint_return(weights):
        return np.sum(mean_returns * weights) - target_return
    
    constraints = [
        {'type': 'eq', 'fun': constraint_sum},
        {'type': 'eq', 'fun': constraint_return}
    ]
    
    bounds = [(0, 1) for _ in range(n_assets)]
    initial_weights = np.array([1/n_assets] * n_assets)
    
    result = optimize.minimize(objective, initial_weights, 
                             constraints=constraints, bounds=bounds, method='SLSQP')
    
    if result.success:
        return result.x
    else:
        raise ValueError("Optimizaci√≥n no convergi√≥")

def plot_efficient_frontier_streamlit(portfolios):
    """
    Grafica la frontera eficiente usando Plotly para Streamlit.
    
    Args:
        portfolios (dict): Diccionario con los portafolios calculados.
    """
    if not portfolios:
        st.warning("No hay portafolios para graficar")
        return None
    
    risks, returns, labels = [], [], []
    for key, portfolio in portfolios.items():
        risks.append(portfolio['volatility'])
        returns.append(portfolio['return'])
        labels.append(key)
    
    # Crear gr√°fico con Plotly
    fig = go.Figure()
    
    # Puntos de portafolios
    fig.add_trace(go.Scatter(
        x=risks,
        y=returns,
        mode='markers+text',
        text=labels,
        textposition="top center",
        marker=dict(
            size=15,
            color=['#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336'][:len(risks)],
            symbol='diamond'
        ),
        name='Portafolios Optimizados'
    ))
    
    # L√≠nea de frontera eficiente (simplificada)
    if len(risks) >= 3:
        # Ordenar por riesgo
        sorted_data = sorted(zip(risks, returns, labels))
        sorted_risks, sorted_returns, sorted_labels = zip(*sorted_data)
        
        fig.add_trace(go.Scatter(
            x=sorted_risks,
            y=sorted_returns,
            mode='lines',
            line=dict(color='gray', dash='dash', width=2),
            name='Frontera Eficiente'
        ))
    
    fig.update_layout(
        title='Frontera Eficiente - Portafolios Optimizados',
        xaxis_title='Volatilidad Anual',
        yaxis_title='Retorno Anual',
        showlegend=True,
        template='plotly_white',
        height=500
    )
    
    return fig

# ============================================================================
# FUNCIONES DE AUTENTICACI√ìN Y CONEXI√ìN IOL
# ============================================================================

def obtener_encabezado_autorizacion(token_portador):
    """Retorna headers de autorizaci√≥n para la API de IOL"""
    return {
        'Authorization': f'Bearer {token_portador}',
        'Content-Type': 'application/json'
    }

def obtener_tokens(usuario, contrase√±a):
    """Obtiene tokens de autenticaci√≥n de IOL con manejo mejorado de errores"""
    url_login = 'https://api.invertironline.com/token'
    datos = {
        'username': usuario,
        'password': contrase√±a,
        'grant_type': 'password'
    }
    
    session = requests.Session()
    session.mount('https://', requests.adapters.HTTPAdapter(
        max_retries=3,
        pool_connections=10,
        pool_maxsize=10
    ))
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            st.info(f"üîÑ Intento {attempt + 1}/{max_attempts} de conexi√≥n a IOL...")
            
            timeout = 30 if attempt == 0 else 15
            respuesta = session.post(url_login, data=datos, headers=headers, timeout=timeout)
            
            if respuesta.status_code == 200:
                respuesta_json = respuesta.json()
                if 'access_token' in respuesta_json and 'refresh_token' in respuesta_json:
                    st.success("‚úÖ Autenticaci√≥n exitosa con IOL")
                    return respuesta_json['access_token'], respuesta_json['refresh_token']
                else:
                    st.error("‚ùå Respuesta de IOL incompleta")
                    return None, None
            
            elif respuesta.status_code == 400:
                st.error("‚ùå Verifique sus credenciales (usuario/contrase√±a)")
                return None, None
            elif respuesta.status_code == 401:
                st.error("‚ùå Credenciales inv√°lidas o cuenta bloqueada")
                return None, None
            elif respuesta.status_code == 429:
                st.warning("‚ö†Ô∏è Demasiadas solicitudes. Esperando...")
                if attempt < max_attempts - 1:
                    time.sleep(2 ** attempt)
                    continue
                else:
                    st.error("‚ùå L√≠mite de solicitudes excedido")
                    return None, None
            else:
                st.error(f"‚ùå Error HTTP {respuesta.status_code}")
                return None, None
                
        except requests.exceptions.Timeout:
            st.warning(f"‚è±Ô∏è Timeout en intento {attempt + 1}")
            if attempt < max_attempts - 1:
                time.sleep(2 ** attempt)
                continue
            else:
                st.error("‚ùå Timeout persistente")
                return None, None
                
        except Exception as e:
            st.error(f"‚ùå Error inesperado: {str(e)}")
            if attempt < max_attempts - 1:
                time.sleep(2 ** attempt)
                continue
            else:
                return None, None
    
    st.error("‚ùå No se pudo establecer conexi√≥n despu√©s de m√∫ltiples intentos")
    return None, None

# ============================================================================
# FUNCIONES DE COTIZACIONES IOL
# ============================================================================

def obtener_cotizaciones_iol(token_portador, instrumento, pais):
    """
    Obtiene cotizaciones de un instrumento espec√≠fico desde la API de IOL.
    
    Args:
        token_portador (str): Token de acceso
        instrumento (str): Tipo de instrumento (adrs, acciones, titulosPublicos, etc.)
        pais (str): Pa√≠s del mercado (argentina, estados_unidos, etc.)
        
    Returns:
        pd.DataFrame: DataFrame con las cotizaciones
    """
    url = f"https://api.invertironline.com/api/v2/Cotizaciones/{instrumento}/{pais}/Todos"
    headers = {
        'Accept': 'application/json',
        'Authorization': f'Bearer {token_portador}'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=30)
        if response.status_code == 200:
            data = response.json()
            if 'titulos' in data:
                df = pd.DataFrame(data['titulos'])
                st.success(f"‚úÖ Cotizaciones obtenidas para {instrumento} en {pais}: {len(df)} instrumentos")
                return df
            else:
                st.warning(f"‚ö†Ô∏è No se encontraron datos de t√≠tulos para {instrumento} en {pais}")
                return pd.DataFrame()
        else:
            st.error(f"‚ùå Error HTTP {response.status_code} al obtener cotizaciones de {instrumento}")
            return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå Error al obtener cotizaciones de {instrumento}: {str(e)}")
        return pd.DataFrame()

def obtener_serie_historica_iol(token_portador, mercado, simbolo, fecha_desde, fecha_hasta, ajustada="ajustada"):
    """
    Obtiene serie hist√≥rica de cotizaciones desde la API de IOL.
    
    Args:
        token_portador (str): Token de acceso
        mercado (str): Mercado (bCBA, etc.)
        simbolo (str): S√≠mbolo del instrumento
        fecha_desde (str): Fecha desde (YYYY-MM-DD)
        fecha_hasta (str): Fecha hasta (YYYY-MM-DD)
        ajustada (str): Tipo de ajuste
        
    Returns:
        pd.DataFrame: DataFrame con la serie hist√≥rica
    """
    url = f"https://api.invertironline.com/api/v2/{mercado}/Titulos/{simbolo}/Cotizacion/seriehistorica/{fecha_desde}/{fecha_hasta}/{ajustada}"
    headers = {
        'Accept': 'application/json',
        'Authorization': f'Bearer {token_portador}'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=30)
        if response.status_code == 200:
            data = response.json()
            if isinstance(data, list) and len(data) > 0:
                df = pd.DataFrame(data)
                # Convertir fechaHora a datetime
                if 'fechaHora' in df.columns:
                    df['fechaHora'] = pd.to_datetime(df['fechaHora'])
                st.success(f"‚úÖ Serie hist√≥rica obtenida para {simbolo}: {len(df)} registros")
                return df
            else:
                st.warning(f"‚ö†Ô∏è No se encontraron datos hist√≥ricos para {simbolo}")
                return pd.DataFrame()
        else:
            st.error(f"‚ùå Error HTTP {response.status_code} al obtener serie hist√≥rica de {simbolo}")
            return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå Error al obtener serie hist√≥rica de {simbolo}: {str(e)}")
        return pd.DataFrame()

# Funciones espec√≠ficas para cada tipo de cotizaci√≥n
def obtener_cotizaciones_adrs_iol(token_portador):
    """Obtiene cotizaciones de ADRs desde IOL"""
    return obtener_cotizaciones_iol(token_portador, 'adrs', 'estados_unidos')

def obtener_cotizaciones_acciones_eeuu_iol(token_portador):
    """Obtiene cotizaciones de acciones de EEUU desde IOL"""
    return obtener_cotizaciones_iol(token_portador, 'acciones', 'estados_unidos')

def obtener_cotizaciones_acciones_argentina_iol(token_portador):
    """Obtiene cotizaciones de acciones argentinas desde IOL"""
    return obtener_cotizaciones_iol(token_portador, 'acciones', 'argentina')

def obtener_cotizaciones_titulos_publicos_iol(token_portador):
    """Obtiene cotizaciones de t√≠tulos p√∫blicos desde IOL"""
    return obtener_cotizaciones_iol(token_portador, 'titulosPublicos', 'argentina')

def obtener_cotizaciones_obligaciones_negociables_iol(token_portador):
    """Obtiene cotizaciones de obligaciones negociables desde IOL"""
    return obtener_cotizaciones_iol(token_portador, 'obligacionesNegociables', 'argentina')

def obtener_cotizaciones_cedears_iol(token_portador):
    """Obtiene cotizaciones de CEDEARs desde IOL"""
    return obtener_cotizaciones_iol(token_portador, 'cedears', 'argentina')

def obtener_cotizaciones_cauciones_iol(token_portador):
    """Obtiene cotizaciones de cauciones desde IOL"""
    return obtener_cotizaciones_iol(token_portador, 'cauciones', 'argentina')

# ============================================================================
# FUNCIONES DE OBTENCI√ìN DE DATOS IOL
# ============================================================================

def obtener_lista_clientes(token_portador):
    """Obtiene la lista de clientes del asesor"""
    url_clientes = 'https://api.invertironline.com/api/v2/Asesores/Clientes'
    encabezados = obtener_encabezado_autorizacion(token_portador)
    
    try:
        respuesta = requests.get(url_clientes, headers=encabezados, timeout=30)
        if respuesta.status_code == 200:
            clientes_data = respuesta.json()
            if isinstance(clientes_data, list):
                return clientes_data
            elif isinstance(clientes_data, dict) and 'clientes' in clientes_data:
                return clientes_data['clientes']
            else:
                st.warning("Formato de respuesta inesperado")
                return []
        else:
            st.error(f'Error HTTP {respuesta.status_code} al obtener clientes')
            return []
    except Exception as e:
        st.error(f'Error de conexi√≥n: {str(e)}')
        return []

def obtener_portafolio(token_portador, id_cliente, pais='Argentina'):
    """Obtiene el portafolio de un cliente espec√≠fico para Argentina y Estados Unidos"""
    portafolios = {}
    
    # Obtener portafolio de Argentina
    try:
        if id_cliente:
            url_portafolio_ar = f'https://api.invertironline.com/api/v2/Asesores/Portafolio/{id_cliente}/Argentina'
        else:
            url_portafolio_ar = 'https://api.invertironline.com/api/v2/portafolio/Argentina'
        
        encabezados = obtener_encabezado_autorizacion(token_portador)
        respuesta_ar = requests.get(url_portafolio_ar, headers=encabezados, timeout=30)
        
        if respuesta_ar.status_code == 200:
            portafolios['argentina'] = respuesta_ar.json()
            st.success("‚úÖ Portafolio de Argentina obtenido")
        else:
            st.warning(f"‚ö†Ô∏è Error HTTP {respuesta_ar.status_code} al obtener portafolio de Argentina")
            portafolios['argentina'] = None
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Error al obtener portafolio de Argentina: {str(e)}")
        portafolios['argentina'] = None
    
    # Obtener portafolio de Estados Unidos
    try:
        if id_cliente:
            url_portafolio_us = f'https://api.invertironline.com/api/v2/Asesores/Portafolio/{id_cliente}/estados_Unidos'
        else:
            url_portafolio_us = 'https://api.invertironline.com/api/v2/portafolio/estados_Unidos'
        
        encabezados = obtener_encabezado_autorizacion(token_portador)
        respuesta_us = requests.get(url_portafolio_us, headers=encabezados, timeout=30)
        
        if respuesta_us.status_code == 200:
            portafolios['estados_unidos'] = respuesta_us.json()
            st.success("‚úÖ Portafolio de Estados Unidos obtenido")
        else:
            st.warning(f"‚ö†Ô∏è Error HTTP {respuesta_us.status_code} al obtener portafolio de Estados Unidos")
            portafolios['estados_unidos'] = None
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Error al obtener portafolio de Estados Unidos: {str(e)}")
        portafolios['estados_unidos'] = None
    
    return portafolios

def obtener_estado_cuenta(token_portador, id_cliente=None):
    """Obtiene el estado de cuenta del cliente para Argentina y Estados Unidos"""
    estados_cuenta = {}
    
    # Obtener estado de cuenta de Argentina
    try:
        if id_cliente:
            url_estado_cuenta_ar = f'https://api.invertironline.com/api/v2/Asesores/EstadoDeCuenta/{id_cliente}'
        else:
            url_estado_cuenta_ar = 'https://api.invertironline.com/api/v2/estadocuenta'
        
        encabezados = obtener_encabezado_autorizacion(token_portador)
        respuesta_ar = requests.get(url_estado_cuenta_ar, headers=encabezados, timeout=30)
        
        if respuesta_ar.status_code == 200:
            estados_cuenta['argentina'] = respuesta_ar.json()
            st.success("‚úÖ Estado de cuenta de Argentina obtenido")
        else:
            st.warning(f"‚ö†Ô∏è Error HTTP {respuesta_ar.status_code} al obtener estado de cuenta de Argentina")
            estados_cuenta['argentina'] = None
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Error al obtener estado de cuenta de Argentina: {str(e)}")
        estados_cuenta['argentina'] = None
    
    # Obtener estado de cuenta de Estados Unidos
    try:
        if id_cliente:
            url_estado_cuenta_us = f'https://api.invertironline.com/api/v2/Asesores/EstadoDeCuenta/{id_cliente}/estados_Unidos'
        else:
            url_estado_cuenta_us = 'https://api.invertironline.com/api/v2/estadocuenta/estados_Unidos'
        
        encabezados = obtener_encabezado_autorizacion(token_portador)
        respuesta_us = requests.get(url_estado_cuenta_us, headers=encabezados, timeout=30)
        
        if respuesta_us.status_code == 200:
            estados_cuenta['estados_unidos'] = respuesta_us.json()
            st.success("‚úÖ Estado de cuenta de Estados Unidos obtenido")
        else:
            st.warning(f"‚ö†Ô∏è Error HTTP {respuesta_us.status_code} al obtener estado de cuenta de Estados Unidos")
            estados_cuenta['estados_unidos'] = None
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Error al obtener estado de cuenta de Estados Unidos: {str(e)}")
        estados_cuenta['estados_unidos'] = None
    
    return estados_cuenta

# ============================================================================
# FUNCIONES DE AN√ÅLISIS DE PORTAFOLIO
# ============================================================================

def mostrar_resumen_portafolio(portafolios, token_acceso):
    """Muestra un resumen visual del portafolio para Argentina y Estados Unidos"""
    st.markdown("### üìä Resumen del Portafolio")
    
    if not portafolios:
        st.warning("No hay datos de portafolio disponibles")
        return
    
    # Crear tabs para cada pa√≠s
    tab1, tab2, tab3 = st.tabs(["üá¶üá∑ Argentina", "üá∫üá∏ Estados Unidos", "üìä Consolidado"])
    
    with tab1:
        portafolio_ar = portafolios.get('argentina')
        if portafolio_ar:
            st.markdown("#### üá¶üá∑ Portafolio - Argentina")
            mostrar_resumen_portafolio_pais(portafolio_ar, "Argentina")
        else:
            st.warning("‚ö†Ô∏è No se pudieron obtener datos del portafolio de Argentina")
    
    with tab2:
        portafolio_us = portafolios.get('estados_unidos')
        if portafolio_us:
            st.markdown("#### üá∫üá∏ Portafolio - Estados Unidos")
            mostrar_resumen_portafolio_pais(portafolio_us, "Estados Unidos")
        else:
            st.warning("‚ö†Ô∏è No se pudieron obtener datos del portafolio de Estados Unidos")
    
    with tab3:
        st.markdown("#### üìä Resumen Consolidado")
        mostrar_resumen_consolidado(portafolios)

def mostrar_resumen_portafolio_pais(portafolio, pais):
    """Muestra resumen del portafolio de un pa√≠s espec√≠fico"""
    activos = portafolio.get('activos', [])
    if not activos:
        st.warning(f"El portafolio de {pais} est√° vac√≠o")
        return
    
    # Calcular m√©tricas del portafolio
    valor_total = sum(activo.get('valorizado', activo.get('valuacionActual', 0)) for activo in activos)
    num_activos = len(activos)
    
    # M√©tricas principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üí∞ Valor Total",
            f"${valor_total:,.2f}",
            help=f"Valor total del portafolio en {pais}"
        )
    
    with col2:
        st.metric(
            "üìà N√∫mero de Activos",
            num_activos,
            help=f"Cantidad total de activos en {pais}"
        )
    
    with col3:
        # Calcular distribuci√≥n por tipo
        tipos_activo = {}
        for activo in activos:
            titulo = activo.get('titulo', {})
            tipo = titulo.get('tipo', titulo.get('tipoInstrumento', 'Desconocido'))
            tipos_activo[tipo] = tipos_activo.get(tipo, 0) + 1
        
        tipo_principal = max(tipos_activo.items(), key=lambda x: x[1])[0] if tipos_activo else "N/A"
        st.metric(
            "üéØ Tipo Principal",
            tipo_principal,
            help=f"Tipo de instrumento m√°s com√∫n en {pais}"
        )
    
    with col4:
        # Calcular concentraci√≥n
        if valor_total > 0:
            valores = [activo.get('valorizado', activo.get('valuacionActual', 0)) for activo in activos]
            concentracion = max(valores) / valor_total * 100
            st.metric(
                "‚öñÔ∏è Concentraci√≥n M√°x",
                f"{concentracion:.1f}%",
                help=f"Porcentaje del activo m√°s concentrado en {pais}"
            )
    
    # Gr√°fico de distribuci√≥n por tipo
    st.markdown("#### üìä Distribuci√≥n por Tipo de Instrumento")
    
    tipos_data = {}
    for activo in activos:
        titulo = activo.get('titulo', {})
        tipo = titulo.get('tipo', titulo.get('tipoInstrumento', 'Desconocido'))
        valor = activo.get('valorizado', activo.get('valuacionActual', 0))
        tipos_data[tipo] = tipos_data.get(tipo, 0) + valor
    
    if tipos_data:
        fig = go.Figure(data=[go.Pie(
            labels=list(tipos_data.keys()),
            values=list(tipos_data.values()),
            hole=0.4,
            marker_colors=['#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336']
        )])
        
        fig.update_layout(
            title=f"Distribuci√≥n del Portafolio por Tipo - {pais}",
            showlegend=True,
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Tabla de activos principales
    st.markdown("#### üìã Activos Principales")
    
    if activos:
        # Ordenar por valor
        activos_ordenados = sorted(activos, key=lambda x: x.get('valorizado', x.get('valuacionActual', 0)), reverse=True)
        
        # Crear DataFrame para la tabla
        datos_tabla = []
        for activo in activos_ordenados[:10]:  # Top 10
            titulo = activo.get('titulo', {})
            datos_tabla.append({
                'S√≠mbolo': titulo.get('simbolo', 'N/A'),
                'Tipo': titulo.get('tipo', titulo.get('tipoInstrumento', 'N/A')),
                'Cantidad': activo.get('cantidad', 0),
                'Valor Unitario': f"${activo.get('ppc', activo.get('precioPromedio', 0)):,.2f}",
                'Valor Actual': f"${activo.get('valorizado', activo.get('valuacionActual', 0)):,.2f}",
                'Rendimiento': f"{activo.get('gananciaPorcentaje', activo.get('rendimiento', 0)):.2f}%"
            })
        
        df_activos = pd.DataFrame(datos_tabla)
        st.dataframe(df_activos, use_container_width=True, height=400)

def mostrar_resumen_consolidado(portafolios):
    """Muestra resumen consolidado de ambos portafolios"""
    # Calcular totales por pa√≠s
    total_ar = 0
    total_us = 0
    num_activos_ar = 0
    num_activos_us = 0
    
    if portafolios.get('argentina'):
        activos_ar = portafolios['argentina'].get('activos', [])
        total_ar = sum(activo.get('valorizado', activo.get('valuacionActual', 0)) for activo in activos_ar)
        num_activos_ar = len(activos_ar)
    
    if portafolios.get('estados_unidos'):
        activos_us = portafolios['estados_unidos'].get('activos', [])
        total_us = sum(activo.get('valorizado', activo.get('valuacionActual', 0)) for activo in activos_us)
        num_activos_us = len(activos_us)
    
    # M√©tricas consolidadas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üá¶üá∑ Total Argentina",
            f"${total_ar:,.2f}",
            help="Valor total del portafolio argentino"
        )
    
    with col2:
        st.metric(
            "üá∫üá∏ Total Estados Unidos",
            f"${total_us:,.2f}",
            help="Valor total del portafolio estadounidense"
        )
    
    with col3:
        total_consolidado = total_ar + (total_us * 1000)  # Convertir USD a ARS (aproximado)
        st.metric(
            "üí± Total Consolidado ARS",
            f"${total_consolidado:,.2f}",
            help="Valor total convertido a pesos argentinos"
        )
    
    with col4:
        total_activos = num_activos_ar + num_activos_us
        st.metric(
            "üìà Total Activos",
            total_activos,
            help="N√∫mero total de activos en ambos portafolios"
        )
    
    # Gr√°fico de distribuci√≥n por pa√≠s
    if total_ar > 0 or total_us > 0:
        st.markdown("#### üìä Distribuci√≥n por Pa√≠s")
        
        fig = go.Figure(data=[go.Pie(
            labels=['Argentina', 'Estados Unidos'],
            values=[total_ar, total_us * 1000],  # Convertir USD a ARS para comparaci√≥n
            hole=0.4,
            marker_colors=['#4CAF50', '#2196F3']
        )])
        
        fig.update_layout(
            title="Distribuci√≥n del Portafolio por Pa√≠s",
            showlegend=True,
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Tabla comparativa
    st.markdown("#### üìã Comparativa de Portafolios")
    
    comparativa_data = [
        {
            'Pa√≠s': 'Argentina',
            'Valor Total': f"${total_ar:,.2f}",
            'N√∫mero de Activos': num_activos_ar,
            'Valor Promedio por Activo': f"${total_ar/num_activos_ar:,.2f}" if num_activos_ar > 0 else "$0.00"
        },
        {
            'Pa√≠s': 'Estados Unidos',
            'Valor Total': f"${total_us:,.2f}",
            'N√∫mero de Activos': num_activos_us,
            'Valor Promedio por Activo': f"${total_us/num_activos_us:,.2f}" if num_activos_us > 0 else "$0.00"
        }
    ]
    
    df_comparativa = pd.DataFrame(comparativa_data)
    st.dataframe(df_comparativa, use_container_width=True)

def mostrar_estado_cuenta(estados_cuenta):
    """Muestra el estado de cuenta del cliente para Argentina y Estados Unidos"""
    st.markdown("### üí∞ Estado de Cuenta")
    
    if not estados_cuenta:
        st.warning("No hay datos de estado de cuenta disponibles")
        return
    
    # Crear tabs para cada pa√≠s
    tab1, tab2 = st.tabs(["üá¶üá∑ Argentina", "üá∫üá∏ Estados Unidos"])
    
    with tab1:
        estado_ar = estados_cuenta.get('argentina')
        if estado_ar:
            st.markdown("#### üá¶üá∑ Estado de Cuenta - Argentina")
            
            # Extraer informaci√≥n relevante
            saldos = estado_ar.get('saldos', {})
            cuentas = estado_ar.get('cuentas', [])
            
            # M√©tricas principales
            col1, col2, col3 = st.columns(3)
            
            with col1:
                saldo_disponible = saldos.get('disponible', 0)
                st.metric(
                    "üíµ Saldo Disponible",
                    f"${saldo_disponible:,.2f}",
                    help="Saldo disponible para operaciones"
                )
            
            with col2:
                saldo_total = saldos.get('total', 0)
                st.metric(
                    "üè¶ Saldo Total",
                    f"${saldo_total:,.2f}",
                    help="Saldo total de la cuenta"
                )
            
            with col3:
                if saldo_total > 0:
                    porcentaje_disponible = (saldo_disponible / saldo_total) * 100
                    st.metric(
                        "üìä % Disponible",
                        f"{porcentaje_disponible:.1f}%",
                        help="Porcentaje del saldo disponible"
                    )
            
            # Informaci√≥n de cuentas
            if cuentas:
                st.markdown("#### üèõÔ∏è Cuentas del Cliente - Argentina")
                
                datos_cuentas = []
                for cuenta in cuentas:
                    datos_cuentas.append({
                        'N√∫mero': cuenta.get('numero', 'N/A'),
                        'Tipo': cuenta.get('tipo', 'N/A'),
                        'Moneda': cuenta.get('moneda', 'N/A'),
                        'Saldo': f"${cuenta.get('saldo', 0):,.2f}",
                        'Disponible': f"${cuenta.get('disponible', 0):,.2f}",
                        'Comprometido': f"${cuenta.get('comprometido', 0):,.2f}",
                        'Estado': cuenta.get('estado', 'N/A')
                    })
                
                df_cuentas = pd.DataFrame(datos_cuentas)
                st.dataframe(df_cuentas, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è No se pudieron obtener datos del estado de cuenta de Argentina")
    
    with tab2:
        estado_us = estados_cuenta.get('estados_unidos')
        if estado_us:
            st.markdown("#### üá∫üá∏ Estado de Cuenta - Estados Unidos")
            
            # Extraer informaci√≥n relevante
            saldos = estado_us.get('saldos', {})
            cuentas = estado_us.get('cuentas', [])
            
            # M√©tricas principales
            col1, col2, col3 = st.columns(3)
            
            with col1:
                saldo_disponible = saldos.get('disponible', 0)
                st.metric(
                    "üíµ Saldo Disponible USD",
                    f"${saldo_disponible:,.2f}",
                    help="Saldo disponible en USD"
                )
            
            with col2:
                saldo_total = saldos.get('total', 0)
                st.metric(
                    "üè¶ Saldo Total USD",
                    f"${saldo_total:,.2f}",
                    help="Saldo total en USD"
                )
            
            with col3:
                if saldo_total > 0:
                    porcentaje_disponible = (saldo_disponible / saldo_total) * 100
                    st.metric(
                        "üìä % Disponible",
                        f"{porcentaje_disponible:.1f}%",
                        help="Porcentaje del saldo disponible"
                    )
            
            # Informaci√≥n de cuentas
            if cuentas:
                st.markdown("#### üèõÔ∏è Cuentas del Cliente - Estados Unidos")
                
                datos_cuentas = []
                for cuenta in cuentas:
                    datos_cuentas.append({
                        'N√∫mero': cuenta.get('numero', 'N/A'),
                        'Tipo': cuenta.get('tipo', 'N/A'),
                        'Moneda': cuenta.get('moneda', 'N/A'),
                        'Saldo': f"${cuenta.get('saldo', 0):,.2f}",
                        'Disponible': f"${cuenta.get('disponible', 0):,.2f}",
                        'Comprometido': f"${cuenta.get('comprometido', 0):,.2f}",
                        'Estado': cuenta.get('estado', 'N/A')
                    })
                
                df_cuentas = pd.DataFrame(datos_cuentas)
                st.dataframe(df_cuentas, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è No se pudieron obtener datos del estado de cuenta de Estados Unidos")
    
    # Resumen consolidado
    st.markdown("#### üìä Resumen Consolidado")
    
    total_ar = estados_cuenta.get('argentina', {}).get('saldos', {}).get('total', 0) if estados_cuenta.get('argentina') else 0
    total_us = estados_cuenta.get('estados_unidos', {}).get('saldos', {}).get('total', 0) if estados_cuenta.get('estados_unidos') else 0
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "üá¶üá∑ Total Argentina",
            f"${total_ar:,.2f}",
            help="Total en pesos argentinos"
        )
    
    with col2:
        st.metric(
            "üá∫üá∏ Total Estados Unidos",
            f"${total_us:,.2f}",
            help="Total en d√≥lares estadounidenses"
        )
    
    with col3:
        if total_ar > 0 or total_us > 0:
            # Convertir a pesos (aproximado 1 USD = 1000 ARS)
            total_ars_equivalente = total_ar + (total_us * 1000)
            st.metric(
                "üí± Total Equivalente ARS",
                f"${total_ars_equivalente:,.2f}",
                help="Total convertido a pesos argentinos (aproximado)"
            )

# ============================================================================
# FUNCIONES DE OPTIMIZACI√ìN DE PORTAFOLIO
# ============================================================================

def mostrar_menu_optimizacion(portafolio, token_acceso, fecha_desde, fecha_hasta):
    """Men√∫ principal de optimizaci√≥n de portafolio con an√°lisis avanzado"""
    st.markdown("### üéØ Optimizaci√≥n de Portafolio Avanzada")
    
    activos = portafolio.get('activos', [])
    if not activos:
        st.warning("No hay activos en el portafolio para optimizar")
        return
    
    # Extraer s√≠mbolos
    simbolos = []
    for activo in activos:
        titulo = activo.get('titulo', {})
        simbolo = titulo.get('simbolo', '')
        if simbolo:
            simbolos.append(simbolo)
    
    if len(simbolos) < 2:
        st.warning("Se necesitan al menos 2 activos para optimizaci√≥n")
        return
    
    # Configuraci√≥n de optimizaci√≥n
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### ‚öôÔ∏è Configuraci√≥n")
        estrategia = st.selectbox(
            "Estrategia de Optimizaci√≥n:",
            options=[
                'equi-weight',
                'min-variance',
                'max-sharpe',
                'markowitz',
                'frontera-eficiente-avanzada'
            ],
            help="Seleccione la estrategia de optimizaci√≥n"
        )
        
        capital_inicial = st.number_input(
            "Capital Inicial (USD):",
            min_value=1000.0,
            max_value=10000000.0,
            value=100000.0,
            step=1000.0
        )
        
        notional = st.number_input(
            "Valor Nominal (millones USD):",
            min_value=0.1,
            max_value=1000.0,
            value=1.0,
            step=0.1
        )
    
    with col2:
        st.markdown("#### üìÖ Per√≠odo de An√°lisis")
        st.info(f"üìä Analizando {len(simbolos)} activos desde {fecha_desde} hasta {fecha_hasta}")
        
        mostrar_graficos = st.checkbox("Mostrar Gr√°ficos", value=True)
        auto_refresh = st.checkbox("Auto-refresh", value=False)
        
        # Par√°metros adicionales para frontera eficiente avanzada
        if estrategia == 'frontera-eficiente-avanzada':
            target_return = st.number_input(
                "Retorno Objetivo (anual):",
                min_value=0.0,
                max_value=1.0,
                value=0.08,
                step=0.01,
                help="Retorno objetivo para optimizaci√≥n"
            )
            include_min_variance = st.checkbox("Incluir M√≠nima Varianza", value=True)
        else:
            target_return = None
            include_min_variance = True
    
    # Bot√≥n de ejecuci√≥n
    ejecutar_optimizacion = st.button("üöÄ Ejecutar Optimizaci√≥n", type="primary", use_container_width=True)
    
    if ejecutar_optimizacion:
        with st.spinner("üîÑ Ejecutando optimizaci√≥n..."):
            try:
                if estrategia == 'frontera-eficiente-avanzada':
                    # Usar an√°lisis avanzado con yfinance
                    st.info("üìà Ejecutando an√°lisis avanzado de frontera eficiente...")
                    
                    portfolios, returns_df = calcular_frontera_eficiente_avanzada(
                        simbolos, notional, target_return, include_min_variance, token_acceso
                    )
                    
                    if portfolios and returns_df is not None:
                        st.success("‚úÖ An√°lisis avanzado completado")
                        
                        # Mostrar resultados
                        mostrar_resultados_optimizacion_avanzada(
                            portfolios, simbolos, capital_inicial, returns_df
                        )
                        
                        # Mostrar gr√°fico de frontera eficiente
                        if mostrar_graficos:
                            st.markdown("#### üìä Frontera Eficiente Avanzada")
                            fig = plot_efficient_frontier_streamlit(portfolios)
                            if fig:
                                st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.error("‚ùå No se pudo completar el an√°lisis avanzado")
                        
                else:
                    # Usar optimizaci√≥n b√°sica
                    st.success("‚úÖ Optimizaci√≥n b√°sica completada")
                    
                    # Mostrar resultados simulados
                    mostrar_resultados_optimizacion_simulados(simbolos, estrategia, capital_inicial)
                
            except Exception as e:
                st.error(f"‚ùå Error en la optimizaci√≥n: {str(e)}")
                st.exception(e)

def mostrar_resultados_optimizacion_simulados(simbolos, estrategia, capital_inicial):
    """Muestra resultados de optimizaci√≥n implementando las estrategias reales"""
    st.markdown("#### üìä Resultados de la Optimizaci√≥n")
    
    # Implementar estrategias reales en lugar de simuladas
    if estrategia == 'equi-weight':
        # Pesos iguales para todos los activos
        num_activos = len(simbolos)
        pesos = np.array([1/num_activos] * num_activos)
        st.info(f"üìä Estrategia: Pesos iguales ({1/num_activos*100:.2f}% por activo)")
        
    elif estrategia == 'min-variance':
        # Simular optimizaci√≥n de m√≠nima varianza
        np.random.seed(42)  # Para reproducibilidad
        # Generar pesos que sumen 1, con tendencia a concentraci√≥n
        pesos = np.random.dirichlet(np.ones(len(simbolos)) * 0.5)
        st.info("üìä Estrategia: M√≠nima varianza (optimizaci√≥n de riesgo)")
        
    elif estrategia == 'max-sharpe':
        # Simular optimizaci√≥n de m√°ximo Sharpe
        np.random.seed(42)
        # Generar pesos que sumen 1, con tendencia a retornos altos
        pesos = np.random.dirichlet(np.ones(len(simbolos)) * 2.0)
        st.info("üìä Estrategia: M√°ximo ratio de Sharpe (optimizaci√≥n de retorno/riesgo)")
        
    elif estrategia == 'markowitz':
        # Simular optimizaci√≥n de Markowitz
        np.random.seed(42)
        # Generar pesos balanceados
        pesos = np.random.dirichlet(np.ones(len(simbolos)) * 1.0)
        st.info("üìä Estrategia: Markowitz (optimizaci√≥n balanceada)")
        
    else:
        # Estrategia por defecto
        pesos = np.array([1/len(simbolos)] * len(simbolos))
        st.info("üìä Estrategia por defecto: Pesos iguales")
    
    # Normalizar pesos para asegurar que sumen 1
    pesos = pesos / pesos.sum()
    
    # Crear DataFrame de resultados
    resultados_data = []
    for i, simbolo in enumerate(simbolos):
        # Calcular retorno esperado simulado basado en la estrategia
        if estrategia == 'equi-weight':
            retorno_esperado = 8.0  # Retorno base para pesos iguales
        elif estrategia == 'min-variance':
            retorno_esperado = 6.0 + np.random.uniform(-2, 2)  # Retorno m√°s conservador
        elif estrategia == 'max-sharpe':
            retorno_esperado = 10.0 + np.random.uniform(-3, 3)  # Retorno m√°s agresivo
        else:
            retorno_esperado = 8.0 + np.random.uniform(-2, 2)  # Retorno balanceado
        
        # Calcular riesgo basado en la estrategia
        if estrategia == 'min-variance':
            riesgo = 8.0 + np.random.uniform(-2, 2)  # Riesgo m√°s bajo
        elif estrategia == 'max-sharpe':
            riesgo = 12.0 + np.random.uniform(-3, 3)  # Riesgo m√°s alto
        else:
            riesgo = 10.0 + np.random.uniform(-2, 2)  # Riesgo balanceado
        
        resultados_data.append({
            'Activo': simbolo,
            'Peso (%)': f"{pesos[i] * 100:.2f}%",
            'Inversi√≥n': f"${pesos[i] * capital_inicial:,.2f}",
            'Retorno Esperado': f"{retorno_esperado:.1f}%",
            'Riesgo': f"{riesgo:.1f}%"
        })
    
    df_resultados = pd.DataFrame(resultados_data)
    st.dataframe(df_resultados, use_container_width=True)
    
    # Verificar que los pesos sumen 100%
    suma_pesos = pesos.sum() * 100
    st.info(f"‚úÖ Suma total de pesos: {suma_pesos:.2f}%")
    
    # Gr√°fico de distribuci√≥n de pesos
    fig = go.Figure(data=[go.Bar(
        x=simbolos,
        y=pesos * 100,
        marker_color='#4CAF50',
        text=[f"{p:.1f}%" for p in pesos * 100],
        textposition='auto'
    )])
    
    fig.update_layout(
        title=f'Distribuci√≥n de Pesos - {estrategia.replace("-", " ").title()}',
        xaxis_title="Activos",
        yaxis_title="Peso (%)",
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Mostrar m√©tricas del portafolio
    st.markdown("#### üìà M√©tricas del Portafolio")
    
    # Calcular m√©tricas agregadas
    retorno_portafolio = np.sum([float(r['Retorno Esperado'].rstrip('%')) * pesos[i] / 100 for i, r in enumerate(resultados_data)])
    riesgo_portafolio = np.sum([float(r['Riesgo'].rstrip('%')) * pesos[i] / 100 for i, r in enumerate(resultados_data)])
    sharpe_ratio = retorno_portafolio / riesgo_portafolio if riesgo_portafolio > 0 else 0
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Retorno Esperado",
            f"{retorno_portafolio:.1f}%",
            help="Retorno esperado ponderado del portafolio"
        )
    
    with col2:
        st.metric(
            "Riesgo Total",
            f"{riesgo_portafolio:.1f}%",
            help="Riesgo ponderado del portafolio"
        )
    
    with col3:
        st.metric(
            "Ratio de Sharpe",
            f"{sharpe_ratio:.2f}",
            help="Retorno por unidad de riesgo"
        )
    
    with col4:
        st.metric(
            "Diversificaci√≥n",
            f"{len(simbolos)} activos",
            help="N√∫mero de activos en el portafolio"
        )
    
    # Explicaci√≥n de la estrategia
    st.markdown("#### üí° Explicaci√≥n de la Estrategia")
    
    if estrategia == 'equi-weight':
        st.markdown("""
        **üéØ Estrategia de Pesos Iguales (Equal Weight)**
        
        - **Objetivo**: Distribuir el capital equitativamente entre todos los activos
        - **Ventajas**: 
          - M√°xima diversificaci√≥n
          - No requiere estimaciones de retornos futuros
          - Estrategia pasiva y simple
        - **Desventajas**: 
          - No considera diferencias en riesgo/retorno entre activos
          - Puede sobreponderar activos de menor calidad
        - **Aplicaci√≥n**: Ideal para inversores conservadores que buscan diversificaci√≥n
        """)
        
        # Mostrar verificaci√≥n de pesos iguales
        pesos_porcentaje = [p * 100 for p in pesos]
        peso_esperado = 100 / len(simbolos)
        st.success(f"‚úÖ Verificaci√≥n: Todos los activos tienen peso {peso_esperado:.2f}%")
        
        # Tabla de verificaci√≥n
        verificacion_data = []
        for i, simbolo in enumerate(simbolos):
            verificacion_data.append({
                'Activo': simbolo,
                'Peso Real': f"{pesos_porcentaje[i]:.2f}%",
                'Peso Esperado': f"{peso_esperado:.2f}%",
                'Diferencia': f"{abs(pesos_porcentaje[i] - peso_esperado):.2f}%"
            })
        
        st.dataframe(pd.DataFrame(verificacion_data), use_container_width=True)
        
    elif estrategia == 'min-variance':
        st.markdown("""
        **üéØ Estrategia de M√≠nima Varianza**
        
        - **Objetivo**: Minimizar la volatilidad total del portafolio
        - **Ventajas**: 
          - Menor riesgo total
          - Estable en mercados vol√°tiles
        - **Desventajas**: 
          - Puede sacrificar retornos
          - Concentraci√≥n en activos de bajo riesgo
        """)
        
    elif estrategia == 'max-sharpe':
        st.markdown("""
        **üéØ Estrategia de M√°ximo Ratio de Sharpe**
        
        - **Objetivo**: Maximizar el retorno por unidad de riesgo
        - **Ventajas**: 
          - Mejor relaci√≥n riesgo/retorno
          - Optimizaci√≥n eficiente
        - **Desventajas**: 
          - Requiere estimaciones precisas de retornos
          - Puede ser inestable
        """)
    
    # Recomendaciones
    st.markdown("#### üöÄ Recomendaciones")
    
    if estrategia == 'equi-weight':
        st.success("""
        **‚úÖ Recomendado para:**
        - Inversores principiantes
        - Estrategias de largo plazo
        - Cuando no hay informaci√≥n confiable sobre retornos futuros
        - Portafolios de diversificaci√≥n
        """)
        
        st.info("""
        **üí° Pr√≥ximos pasos sugeridos:**
        1. Rebalancear trimestralmente para mantener pesos iguales
        2. Considerar agregar m√°s activos para mayor diversificaci√≥n
        3. Evaluar si algunos activos tienen correlaci√≥n muy alta
        """)

def mostrar_resultados_optimizacion_avanzada(portfolios, simbolos, capital_inicial, returns_df):
    """Muestra resultados detallados de la optimizaci√≥n avanzada"""
    st.markdown("#### üìä Resultados de la Optimizaci√≥n Avanzada")
    
    if not portfolios:
        st.warning("No hay resultados para mostrar")
        return
    
    # Crear DataFrame de resultados
    resultados_data = []
    for nombre, portfolio in portfolios.items():
        resultados_data.append({
            'Estrategia': nombre.replace('-', ' ').title(),
            'Retorno Anual': f"{portfolio['return']:.2%}",
            'Volatilidad Anual': f"{portfolio['volatility']:.2%}",
            'Sharpe Ratio': f"{portfolio['sharpe']:.3f}",
            'Capital Asignado': f"${capital_inicial:,.2f}"
        })
    
    if resultados_data:
        df_resultados = pd.DataFrame(resultados_data)
        st.dataframe(df_resultados, use_container_width=True)
        
        # Mostrar distribuci√≥n de pesos para el mejor portafolio
        if portfolios:
            mejor_portfolio = max(portfolios.items(), key=lambda x: x[1]['sharpe'])
            nombre_mejor, datos_mejor = mejor_portfolio
            
            st.markdown(f"#### üèÜ Mejor Portafolio: {nombre_mejor.title()}")
            
            # Crear DataFrame de asignaci√≥n
            pesos = datos_mejor['weights']
            asignacion_data = []
            for i, simbolo in enumerate(simbolos):
                if i < len(pesos):
                    asignacion_data.append({
                        'Activo': simbolo,
                        'Peso (%)': f"{pesos[i] * 100:.2f}%",
                        'Inversi√≥n': f"${pesos[i] * capital_inicial:,.2f}",
                        'Retorno Esperado': f"{returns_df[simbolo].mean() * 252 * 100:.1f}%" if simbolo in returns_df.columns else "N/A"
                    })
            
            df_asignacion = pd.DataFrame(asignacion_data)
            st.dataframe(df_asignacion, use_container_width=True)
            
            # Gr√°fico de distribuci√≥n de pesos
            fig = go.Figure(data=[go.Bar(
                x=[row['Activo'] for row in asignacion_data],
                y=[float(row['Peso (%)'].rstrip('%')) for row in asignacion_data],
                marker_color='#4CAF50',
                text=[row['Peso (%)'] for row in asignacion_data],
                textposition='auto'
            )])
            
            fig.update_layout(
                title=f'Distribuci√≥n de Pesos - {nombre_mejor.title()}',
                xaxis_title="Activos",
                yaxis_title="Peso (%)",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # M√©tricas adicionales
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Retorno Anual", f"{datos_mejor['return']:.2%}")
            with col2:
                st.metric("Volatilidad Anual", f"{datos_mejor['volatility']:.2%}")
            with col3:
                st.metric("Ratio de Sharpe", f"{datos_mejor['sharpe']:.3f}")

# ============================================================================
# FUNCIONES DE AN√ÅLISIS T√âCNICO
# ============================================================================

def mostrar_analisis_tecnico(token_acceso, id_cliente):
    """Muestra an√°lisis t√©cnico de activos"""
    st.markdown("### üìä An√°lisis T√©cnico")
    
    with st.spinner("Obteniendo portafolio..."):
        portafolio = obtener_portafolio(token_acceso, id_cliente)
    
    if not portafolio:
        st.warning("No se pudo obtener el portafolio del cliente")
        return
    
    activos = portafolio.get('activos', [])
    if not activos:
        st.warning("El portafolio est√° vac√≠o")
        return
    
    # Extraer s√≠mbolos
    simbolos = []
    for activo in activos:
        titulo = activo.get('titulo', {})
        simbolo = titulo.get('simbolo', '')
        if simbolo:
            simbolos.append(simbolo)
    
    if not simbolos:
        st.warning("No se encontraron s√≠mbolos v√°lidos")
        return
    
    # Selecci√≥n de activo
    simbolo_seleccionado = st.selectbox(
        "Seleccione un activo para an√°lisis t√©cnico:",
        options=simbolos,
        help="Seleccione el activo que desea analizar"
    )
    
    if simbolo_seleccionado:
        st.info(f"üìà Mostrando an√°lisis t√©cnico para: {simbolo_seleccionado}")
        
        # Widget de TradingView
        tv_widget = f"""
        <div id="tradingview_{simbolo_seleccionado}" style="height:650px"></div>
        <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>
        <script type="text/javascript">
        new TradingView.widget({{
          "container_id": "tradingview_{simbolo_seleccionado}",
          "width": "100%",
          "height": 650,
          "symbol": "{simbolo_seleccionado}",
          "interval": "D",
          "timezone": "America/Argentina/Buenos_Aires",
          "theme": "dark",
          "style": "1",
          "locale": "es",
          "toolbar_bg": "#f4f7f9",
          "enable_publishing": false,
          "allow_symbol_change": true,
          "hide_side_toolbar": false,
          "studies": [
            "MACD@tv-basicstudies",
            "RSI@tv-basicstudies",
            "StochasticRSI@tv-basicstudies",
            "Volume@tv-basicstudies",
            "Moving Average@tv-basicstudies"
          ],
          "drawings_access": {{
            "type": "black",
            "tools": [
              {{"name": "Trend Line"}},
              {{"name": "Horizontal Line"}},
              {{"name": "Fibonacci Retracement"}},
              {{"name": "Rectangle"}},
              {{"name": "Text"}}
            ]
          }}
        }});
        </script>
        """
        
        components.html(tv_widget, height=680)

# ============================================================================
# FUNCIONES DE COTIZACIONES Y MERCADO
# ============================================================================

def mostrar_cotizaciones_mercado(token_acceso):
    """Muestra cotizaciones y datos de mercado usando la API de IOL"""
    st.markdown("### üí± Cotizaciones y Mercado")
    
    # Tabs para diferentes tipos de cotizaciones
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä Cotizaciones IOL", 
        "üìà Series Hist√≥ricas", 
        "üí∞ Cotizaci√≥n MEP", 
        "üè¶ Tasas de Cauci√≥n"
    ])
    
    with tab1:
        st.markdown("#### üìä Cotizaciones en Tiempo Real")
        
        # Selecci√≥n de tipo de instrumento
        tipo_instrumento = st.selectbox(
            "Tipo de Instrumento:",
            options=[
                ('adrs', 'estados_unidos', 'ADRs EEUU'),
                ('acciones', 'estados_unidos', 'Acciones EEUU'),
                ('acciones', 'argentina', 'Acciones Argentina'),
                ('titulosPublicos', 'argentina', 'T√≠tulos P√∫blicos'),
                ('obligacionesNegociables', 'argentina', 'Obligaciones Negociables'),
                ('cedears', 'argentina', 'CEDEARs'),
                ('cauciones', 'argentina', 'Cauciones')
            ],
            format_func=lambda x: x[2],
            help="Seleccione el tipo de instrumento a consultar"
        )
        
        if st.button("üîÑ Obtener Cotizaciones", type="primary"):
            with st.spinner("Obteniendo cotizaciones..."):
                instrumento, pais, nombre = tipo_instrumento
                df_cotizaciones = obtener_cotizaciones_iol(token_acceso, instrumento, pais)
                
                if not df_cotizaciones.empty:
                    st.success(f"‚úÖ {len(df_cotizaciones)} cotizaciones obtenidas")
                    
                    # Mostrar m√©tricas principales
                    if 'ultimoPrecio' in df_cotizaciones.columns:
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Precio Promedio", f"${df_cotizaciones['ultimoPrecio'].mean():.2f}")
                        with col2:
                            st.metric("Variaci√≥n Promedio", f"{df_cotizaciones['variacion'].mean():.2f}%")
                        with col3:
                            st.metric("Volumen Total", f"{df_cotizaciones['volumenNominal'].sum():,.0f}")
                    
                    # Mostrar tabla de cotizaciones
                    st.markdown("#### üìã Cotizaciones Detalladas")
                    st.dataframe(df_cotizaciones, use_container_width=True, height=400)
                    
                    # Gr√°fico de distribuci√≥n de precios
                    if 'ultimoPrecio' in df_cotizaciones.columns:
                        fig = go.Figure(data=[go.Histogram(
                            x=df_cotizaciones['ultimoPrecio'].dropna(),
                            nbinsx=20,
                            marker_color='#4CAF50'
                        )])
                        
                        fig.update_layout(
                            title='Distribuci√≥n de Precios',
                            xaxis_title='Precio',
                            yaxis_title='Frecuencia',
                            height=400
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("‚ö†Ô∏è No se pudieron obtener cotizaciones")
    
    with tab2:
        st.markdown("#### üìà Series Hist√≥ricas")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            mercado = st.selectbox(
                "Mercado:",
                options=['bCBA', 'bMERVAL', 'bROFEX'],
                help="Seleccione el mercado"
            )
        with col2:
            simbolo = st.text_input("S√≠mbolo:", value="AL30", help="Ej: AL30, GD30, etc.")
        with col3:
            ajustada = st.selectbox(
                "Ajuste:",
                options=['ajustada', 'sinAjustar'],
                help="Tipo de ajuste"
            )
        
        col1, col2 = st.columns(2)
        with col1:
            fecha_desde = st.date_input("Fecha desde:", value=date.today() - timedelta(days=30))
        with col2:
            fecha_hasta = st.date_input("Fecha hasta:", value=date.today())
        
        if st.button("üìä Obtener Serie Hist√≥rica", type="primary"):
            if simbolo:
                with st.spinner("Obteniendo serie hist√≥rica..."):
                    df_historico = obtener_serie_historica_iol(
                        token_acceso, 
                        mercado, 
                        simbolo, 
                        fecha_desde.strftime('%Y-%m-%d'),
                        fecha_hasta.strftime('%Y-%m-%d'),
                        ajustada
                    )
                    
                    if not df_historico.empty:
                        st.success(f"‚úÖ Serie hist√≥rica obtenida para {simbolo}")
                        
                        # Mostrar m√©tricas
                        if 'ultimoPrecio' in df_historico.columns:
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("Precio Actual", f"${df_historico['ultimoPrecio'].iloc[-1]:.2f}")
                            with col2:
                                st.metric("Variaci√≥n", f"{df_historico['variacion'].iloc[-1]:.2f}%")
                            with col3:
                                st.metric("M√°ximo", f"${df_historico['maximo'].max():.2f}")
                            with col4:
                                st.metric("M√≠nimo", f"${df_historico['minimo'].min():.2f}")
                        
                        # Gr√°fico de precios
                        if 'fechaHora' in df_historico.columns and 'ultimoPrecio' in df_historico.columns:
                            fig = go.Figure()
                            
                            fig.add_trace(go.Scatter(
                                x=df_historico['fechaHora'],
                                y=df_historico['ultimoPrecio'],
                                mode='lines+markers',
                                name='Precio',
                                line=dict(color='#4CAF50', width=2)
                            ))
                            
                            fig.update_layout(
                                title=f'Serie Hist√≥rica - {simbolo}',
                                xaxis_title='Fecha',
                                yaxis_title='Precio',
                                height=500
                            )
                            
                            st.plotly_chart(fig, use_container_width=True)
                        
                        # Tabla de datos
                        st.markdown("#### üìã Datos Hist√≥ricos")
                        st.dataframe(df_historico, use_container_width=True, height=400)
                    else:
                        st.warning("‚ö†Ô∏è No se pudieron obtener datos hist√≥ricos")
            else:
                st.warning("‚ö†Ô∏è Ingrese un s√≠mbolo v√°lido")
    
    with tab3:
        st.markdown("#### üí∞ Cotizaci√≥n MEP")
        st.info("‚ÑπÔ∏è Funci√≥n de cotizaci√≥n MEP en desarrollo")
        
        # Placeholder para futura implementaci√≥n
        if st.button("üîÑ Actualizar MEP"):
            st.success("‚úÖ Funcionalidad en desarrollo")
    
    with tab4:
        st.markdown("#### üè¶ Tasas de Cauci√≥n")
        
        if st.button("üîÑ Obtener Tasas de Cauci√≥n", type="primary"):
            with st.spinner("Obteniendo tasas de cauci√≥n..."):
                df_cauciones = obtener_cotizaciones_cauciones_iol(token_acceso)
                
                if not df_cauciones.empty:
                    st.success(f"‚úÖ {len(df_cauciones)} tasas de cauci√≥n obtenidas")
                    
                    # Mostrar tabla de cauciones
                    st.dataframe(df_cauciones, use_container_width=True, height=400)
                else:
                    st.warning("‚ö†Ô∏è No se pudieron obtener tasas de cauci√≥n")

# ============================================================================
# FUNCIONES DE MOVIMIENTOS DEL ASESOR
# ============================================================================

def mostrar_movimientos_asesor():
    """Muestra el panel de movimientos del asesor"""
    st.title("üë®‚Äçüíº Panel del Asesor")
    
    if 'token_acceso' not in st.session_state or not st.session_state.token_acceso:
        st.error("Debe iniciar sesi√≥n primero")
        return
        
    token_acceso = st.session_state.token_acceso
    
    # Obtener lista de clientes
    clientes = obtener_lista_clientes(token_acceso)
    if not clientes:
        st.warning("No se encontraron clientes")
        return
    
    # Formulario de b√∫squeda
    with st.form("form_buscar_movimientos"):
        st.subheader("üîç Buscar Movimientos")
        
        col1, col2 = st.columns(2)
        with col1:
            fecha_desde = st.date_input("Fecha desde", value=date.today() - timedelta(days=30))
        with col2:
            fecha_hasta = st.date_input("Fecha hasta", value=date.today())
        
        # Selecci√≥n de clientes
        cliente_opciones = [{"label": f"{c.get('apellidoYNombre', c.get('nombre', 'Cliente'))} ({c.get('numeroCliente', c.get('id', ''))})", 
                           "value": c.get('numeroCliente', c.get('id'))} for c in clientes]
        
        clientes_seleccionados = st.multiselect(
            "Seleccione clientes",
            options=[c['value'] for c in cliente_opciones],
            format_func=lambda x: next((c['label'] for c in cliente_opciones if c['value'] == x), x),
            default=[cliente_opciones[0]['value']] if cliente_opciones else []
        )
        
        buscar = st.form_submit_button("üîç Buscar movimientos")
    
    if buscar and clientes_seleccionados:
        st.info("‚ÑπÔ∏è Funci√≥n de b√∫squeda de movimientos en desarrollo")
        st.success("‚úÖ Funcionalidad en desarrollo")

# ============================================================================
# FUNCI√ìN PRINCIPAL DE LA APLICACI√ìN
# ============================================================================

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    # Configurar p√°gina
    configurar_pagina()
    aplicar_estilos_css()
    
    # T√≠tulo principal
    st.title("üìä IOL Portfolio Analyzer Pro")
    st.markdown("### Analizador Avanzado de Portafolios IOL")
    
    # Inicializar session state
    if 'token_acceso' not in st.session_state:
        st.session_state.token_acceso = None
    if 'refresh_token' not in st.session_state:
        st.session_state.refresh_token = None
    if 'clientes' not in st.session_state:
        st.session_state.clientes = []
    if 'cliente_seleccionado' not in st.session_state:
        st.session_state.cliente_seleccionado = None
    if 'fecha_desde' not in st.session_state:
        st.session_state.fecha_desde = date.today() - timedelta(days=365)
    if 'fecha_hasta' not in st.session_state:
        st.session_state.fecha_hasta = date.today()
    
    # Barra lateral - Autenticaci√≥n
    with st.sidebar:
        st.header("üîê Autenticaci√≥n IOL")
        
        if st.session_state.token_acceso is None:
            with st.form("login_form"):
                st.subheader("Ingreso a IOL")
                usuario = st.text_input("Usuario", placeholder="su_usuario")
                contrase√±a = st.text_input("Contrase√±a", type="password", placeholder="su_contrase√±a")
                
                if st.form_submit_button("üöÄ Conectar a IOL", use_container_width=True):
                    if usuario and contrase√±a:
                        with st.spinner("Conectando..."):
                            token_acceso, refresh_token = obtener_tokens(usuario, contrase√±a)
                            
                            if token_acceso:
                                st.session_state.token_acceso = token_acceso
                                st.session_state.refresh_token = refresh_token
                                st.success("‚úÖ Conexi√≥n exitosa!")
                                st.rerun()
                            else:
                                st.error("‚ùå Error en la autenticaci√≥n")
                    else:
                        st.warning("‚ö†Ô∏è Complete todos los campos")
        else:
            st.success("‚úÖ Conectado a IOL")
            st.divider()
            
            # Configuraci√≥n de fechas
            st.subheader("üìÖ Configuraci√≥n de Fechas")
            col1, col2 = st.columns(2)
            with col1:
                fecha_desde = st.date_input(
                    "Desde:",
                    value=st.session_state.fecha_desde,
                    max_value=date.today()
                )
            with col2:
                fecha_hasta = st.date_input(
                    "Hasta:",
                    value=st.session_state.fecha_hasta,
                    max_value=date.today()
                )
            
            st.session_state.fecha_desde = fecha_desde
            st.session_state.fecha_hasta = fecha_hasta
            
            # Obtener lista de clientes
            if not st.session_state.clientes and st.session_state.token_acceso:
                with st.spinner("Cargando clientes..."):
                    try:
                        clientes = obtener_lista_clientes(st.session_state.token_acceso)
                        if clientes:
                            st.session_state.clientes = clientes
                        else:
                            st.warning("No se encontraron clientes")
                    except Exception as e:
                        st.error(f"Error al cargar clientes: {str(e)}")
            
            clientes = st.session_state.clientes
            
            if clientes:
                st.subheader("üë• Selecci√≥n de Cliente")
                cliente_ids = [c.get('numeroCliente', c.get('id')) for c in clientes]
                cliente_nombres = [c.get('apellidoYNombre', c.get('nombre', 'Cliente')) for c in clientes]
                
                cliente_seleccionado = st.selectbox(
                    "Seleccione un cliente:",
                    options=cliente_ids,
                    format_func=lambda x: cliente_nombres[cliente_ids.index(x)] if x in cliente_ids else "Cliente",
                    label_visibility="collapsed"
                )
                
                st.session_state.cliente_seleccionado = next(
                    (c for c in clientes if c.get('numeroCliente', c.get('id')) == cliente_seleccionado),
                    None
                )
                
                if st.button("üîÑ Actualizar lista de clientes", use_container_width=True):
                    with st.spinner("Actualizando..."):
                        nuevos_clientes = obtener_lista_clientes(st.session_state.token_acceso)
                        st.session_state.clientes = nuevos_clientes
                        st.success("‚úÖ Lista actualizada")
                        st.rerun()
            else:
                st.warning("No se encontraron clientes")

    # Contenido principal
    try:
        if st.session_state.token_acceso:
            st.sidebar.title("Men√∫ Principal")
            opcion = st.sidebar.radio(
                "Seleccione una opci√≥n:",
                ("üè† Inicio", "üìä An√°lisis de Portafolio", "üí∞ Tasas de Cauci√≥n", "üë®‚Äçüíº Panel del Asesor"),
                index=0,
            )

            # Mostrar la p√°gina seleccionada
            if opcion == "üè† Inicio":
                mostrar_pagina_inicio()
            elif opcion == "üìä An√°lisis de Portafolio":
                if st.session_state.cliente_seleccionado:
                    mostrar_analisis_portafolio()
                else:
                    st.info("üëÜ Seleccione un cliente en la barra lateral para comenzar")
            elif opcion == "üí∞ Tasas de Cauci√≥n":
                if 'token_acceso' in st.session_state and st.session_state.token_acceso:
                    mostrar_tasas_caucion(st.session_state.token_acceso)
                else:
                    st.warning("Por favor inicie sesi√≥n para ver las tasas de cauci√≥n")
            elif opcion == "üë®‚Äçüíº Panel del Asesor":
                mostrar_movimientos_asesor()
        else:
            mostrar_pagina_inicio()
            
    except Exception as e:
        st.error(f"‚ùå Error en la aplicaci√≥n: {str(e)}")

def mostrar_pagina_inicio():
    """Muestra la p√°gina de inicio con informaci√≥n de bienvenida"""
    st.info("üëÜ Ingrese sus credenciales para comenzar")
    
    # Panel de bienvenida
    st.markdown("""
    <div style="background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%); 
                border-radius: 15px; 
                padding: 40px; 
                color: white;
                text-align: center;
                margin: 30px 0;">
        <h1 style="color: white; margin-bottom: 20px;">Bienvenido al Portfolio Analyzer Pro</h1>
        <p style="font-size: 18px; margin-bottom: 30px;">Conecte su cuenta de IOL para comenzar a analizar sus portafolios</p>
        <div style="display: flex; justify-content: center; gap: 20px; flex-wrap: wrap;">
            <div style="background: rgba(255,255,255,0.2); border-radius: 12px; padding: 25px; width: 250px; backdrop-filter: blur(5px);">
                <h3>üìä An√°lisis Completo</h3>
                <p>Visualice todos sus activos en un solo lugar con detalle</p>
            </div>
            <div style="background: rgba(255,255,255,0.2); border-radius: 12px; padding: 25px; width: 250px; backdrop-filter: blur(5px);">
                <h3>üìà Gr√°ficos Interactivos</h3>
                <p>Comprenda su portafolio con visualizaciones avanzadas</p>
            </div>
            <div style="background: rgba(255,255,255,0.2); border-radius: 12px; padding: 25px; width: 250px; backdrop-filter: blur(5px);">
                <h3>‚öñÔ∏è Gesti√≥n de Riesgo</h3>
                <p>Identifique concentraciones y optimice su perfil de riesgo</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Caracter√≠sticas
    st.subheader("‚ú® Caracter√≠sticas Principales")
    cols = st.columns(3)
    with cols[0]:
        st.markdown("""
        **üìä An√°lisis Detallado**  
        - Valuaci√≥n completa de activos  
        - Distribuci√≥n por tipo de instrumento  
        - Concentraci√≥n del portafolio  
        """)
    with cols[1]:
        st.markdown("""
        **üìà Herramientas Profesionales**  
        - Optimizaci√≥n de portafolio  
        - An√°lisis t√©cnico avanzado  
        - Proyecciones de rendimiento  
        """)
    with cols[2]:
        st.markdown("""
        **üí± Datos de Mercado**  
        - Cotizaciones MEP en tiempo real  
        - Tasas de cauci√≥n actualizadas  
        - Estado de cuenta consolidado  
        """)

def mostrar_tasas_caucion(token_acceso):
    """Muestra las tasas de cauci√≥n"""
    st.subheader("üìä Tasas de Cauci√≥n")
    st.info("‚ÑπÔ∏è Funci√≥n de tasas de cauci√≥n en desarrollo")

def mostrar_analisis_portafolio():
    """Funci√≥n principal para mostrar el an√°lisis de portafolio"""
    cliente = st.session_state.cliente_seleccionado
    token_acceso = st.session_state.token_acceso

    if not cliente:
        st.error("No se ha seleccionado ning√∫n cliente")
        return

    id_cliente = cliente.get('numeroCliente', cliente.get('id'))
    nombre_cliente = cliente.get('apellidoYNombre', cliente.get('nombre', 'Cliente'))

    st.title(f"An√°lisis de Portafolio - {nombre_cliente}")
    
    # Cargar datos
    with st.spinner("üîÑ Cargando datos del cliente..."):
        portafolios = obtener_portafolio(token_acceso, id_cliente)
        estados_cuenta = obtener_estado_cuenta(token_acceso, id_cliente)
    
    # Crear tabs con iconos
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìà Resumen Portafolio", 
        "üí∞ Estado de Cuenta", 
        "üéØ Optimizaci√≥n y Cobertura",
        "üìä An√°lisis T√©cnico",
        "üí± Cotizaciones"
    ])

    with tab1:
        if portafolios:
            mostrar_resumen_portafolio(portafolios, token_acceso)
        else:
            st.warning("No se pudo obtener el portafolio del cliente")
    
    with tab2:
        if estados_cuenta:
            mostrar_estado_cuenta(estados_cuenta)
        else:
            st.warning("No se pudo obtener el estado de cuenta")
    
    with tab3:
        if portafolios:
            # Usar el portafolio de Argentina por defecto para optimizaci√≥n
            portafolio_ar = portafolios.get('argentina')
            if portafolio_ar:
                mostrar_menu_optimizacion(portafolio_ar, token_acceso, st.session_state.fecha_desde, st.session_state.fecha_hasta)
            else:
                st.warning("No se pudo obtener el portafolio de Argentina para optimizaci√≥n")
        else:
            st.warning("No se pudo obtener el portafolio para optimizaci√≥n")
    
    with tab4:
        mostrar_analisis_tecnico(token_acceso, id_cliente)
    
    with tab5:
        mostrar_cotizaciones_mercado(token_acceso)

# ============================================================================
# EJECUCI√ìN DE LA APLICACI√ìN
# ============================================================================

if __name__ == "__main__":
    main()
