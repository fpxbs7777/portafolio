import streamlit as st
from streamlit.components.v1 import html
import requests
import plotly.graph_objects as go

def load_custom_css():
    """Carga estilos CSS personalizados para mejorar la interfaz de usuario."""
    custom_css = """
    <style>
        /* Estilos generales */
        .main {
            padding: 2rem 1rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        /* Mejoras en la barra lateral */
        .css-1d391kg, .css-1d391kg > div:first-child {
            background: linear-gradient(195deg, #1a237e 0%, #283593 100%);
            color: white;
        }
        
        .css-1d391kg .stRadio > div {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 0.5rem;
        }
        
        .css-1d391kg .stRadio label {
            color: white !important;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            margin: 0.25rem 0;
            transition: all 0.3s ease;
        }
        
        .css-1d391kg .stRadio label:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .css-1d391kg .stRadio [data-baseweb="radio"]:checked + div {
            background-color: #4CAF50;
            color: white !important;
        }
        
        /* Mejoras en las tarjetas */
        .stDataFrame {
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .stAlert {
            border-radius: 10px;
            padding: 1rem;
        }
        
        /* Mejoras en los botones */
        .stButton > button {
            border-radius: 8px;
            padding: 0.5rem 1.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
            border: none;
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
            color: white;
        }
        
        .stButton > button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        /* Mejoras en los selectores */
        .stSelectbox > div > div {
            border-radius: 8px;
            border: 1px solid #e0e0e0;
        }
        
        /* Mejoras en los tabs */
        .stTabs [data-baseweb="tab-list"] {
            gap: 8px;
            padding: 0 1rem;
        }
        
        .stTabs [data-baseweb="tab"] {
            padding: 0.75rem 1.5rem;
            border-radius: 8px 8px 0 0;
            background-color: #f5f5f5;
            transition: all 0.3s ease;
        }
        
        .stTabs [data-baseweb="tab"]:hover {
            background-color: #e0e0e0;
        }
        
        .stTabs [aria-selected="true"] {
            background-color: white;
            color: #4CAF50;
            font-weight: 600;
        }
        
        /* Mejoras en los tooltips */
        .stTooltip {
            border-radius: 8px;
            padding: 0.75rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        
        /* Estilos para m√≥viles */
        @media (max-width: 768px) {
            .main {
                padding: 1rem 0.5rem;
            }
            
            .stTabs [data-baseweb="tab"] {
                padding: 0.5rem 0.75rem;
                font-size: 0.85rem;
            }
        }
    </style>
    """
    st.markdown(custom_css, unsafe_allow_html=True)
import pandas as pd
from plotly.subplots import make_subplots
from datetime import date, timedelta, datetime
import numpy as np
import pandas as pd
import yfinance as yf
import scipy.optimize as op
from scipy import stats
import random
import warnings
import streamlit.components.v1 as components
from scipy.stats import linregress
import httpx
import asyncio
import matplotlib.pyplot as plt
from scipy.stats import skew
import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import json
from typing import Dict, List, Optional, Any
import os
from dotenv import load_dotenv
from functools import lru_cache, wraps
import aiohttp
import time
from typing import Optional, Dict, Any, List, Callable, Awaitable
import asyncio
from datetime import datetime, timedelta

# Suppress warnings
warnings.filterwarnings('ignore')

# Token management
class TokenManager:
    """
    Manages API token with automatic refresh before expiration.
    """
    def __init__(self, token_func: Callable[[], Awaitable[str]], refresh_interval: int = 300):
        """
        Initialize TokenManager.
        
        Args:
            token_func: Async function that returns a new token
            refresh_interval: Seconds before token expiration to refresh (default: 5 minutes)
        """
        self._token: Optional[str] = None
        self._expiry: Optional[float] = None
        self._token_func = token_func
        self._refresh_interval = refresh_interval
        self._lock = asyncio.Lock()
        self._last_refresh: Optional[float] = None
        
    async def get_token(self, force_refresh: bool = False) -> str:
        """
        Get current token, refreshing if necessary.
        
        Args:
            force_refresh: If True, force token refresh
            
        Returns:
            str: Current valid token
        """
        async with self._lock:
            current_time = time.time()
            
            if (force_refresh or 
                not self._token or 
                not self._expiry or 
                current_time > self._expiry - self._refresh_interval):
                
                self._token = await self._token_func()
                self._last_refresh = current_time
                # Assuming token expires in 1 hour (3600 seconds)
                self._expiry = current_time + 3600
                
                if hasattr(st, 'session_state'):
                    st.session_state['last_token_refresh'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                
                print(f"Token refreshed at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
            return self._token

# Cache decorator with timeout
def cache_with_timeout(seconds: int = 300):
    """
    Cache decorator with time-based invalidation.
    
    Args:
        seconds: Cache timeout in seconds
    """
    def decorator(func):
        cache = {}
        
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # Create a key based on function arguments
            cache_key = (args, frozenset(kwargs.items()))
            current_time = time.time()
            
            # Check if we have a cached result that's still valid
            if cache_key in cache:
                result, timestamp = cache[cache_key]
                if current_time - timestamp < seconds:
                    return result
            
            # Call the function and cache the result
            result = await func(*args, **kwargs)
            cache[cache_key] = (result, current_time)
            return result
            
        return wrapper
    return decorator

# Global session for HTTP requests
class HTTPSessionManager:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.session = None
        return cls._instance
    
    async def get_session(self) -> aiohttp.ClientSession:
        """Get or create an aiohttp ClientSession."""
        if self._instance.session is None or self._instance.session.closed:
            timeout = aiohttp.ClientTimeout(total=30)  # 30 seconds timeout
            self._instance.session = aiohttp.ClientSession(timeout=timeout)
        return self._instance.session
    
    async def close(self):
        """Close the aiohttp session."""
        if self._instance.session and not self._instance.session.closed:
            await self._instance.session.close()
            self._instance.session = None

# Load environment variables
load_dotenv()

class ArgentinaDatos:
    """
    Main class for fetching and analyzing Argentine economic and financial data.
    Supports both synchronous and asynchronous operations.
    """
    
    def __init__(self, base_url: str = 'https://api.argentinadatos.com'):
        self.base_url = base_url
        self._session = None
        self._async_session = None
    
    @property
    def session(self):
        """Lazy initialization of requests session."""
        if self._session is None:
            self._session = requests.Session()
        return self._session
    
    async def get_async_session(self) -> aiohttp.ClientSession:
        """Get or create an async session."""
        if self._async_session is None or self._async_session.closed:
            self._async_session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=30)
            )
        return self._async_session
    
    async def close(self):
        """Close all sessions."""
        if self._session:
            self._session.close()
        if self._async_session and not self._async_session.closed:
            await self._async_session.close()
    
    def fetch_data(self, endpoint: str) -> List[Dict]:
        """
        Synchronously fetch data from Argentina Datos API.
        
        Args:
            endpoint: API endpoint path
            
        Returns:
            List of data dictionaries
        """
        try:
            response = self.session.get(f"{self.base_url}{endpoint}")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"Error fetching data from {endpoint}: {e}")
            return []
    
    @cache_with_timeout(seconds=300)  # Cache for 5 minutes
    async def fetch_data_async(self, endpoint: str) -> List[Dict]:
        """
        Asynchronously fetch data from Argentina Datos API with caching.
        
        Args:
            endpoint: API endpoint path
            
        Returns:
            List of data dictionaries
        """
        session = await self.get_async_session()
        url = f"{self.base_url}{endpoint}"
        
        try:
            async with session.get(url) as response:
                response.raise_for_status()
                return await response.json()
        except Exception as e:
            print(f"Error in async fetch from {endpoint}: {e}")
            return []
    
    # Synchronous methods
    def get_dolares(self) -> List[Dict]:
        """Get d√≥lar exchange rates data (synchronous)."""
        return self.fetch_data('/v1/cotizaciones/dolares')
    
    def get_dolares_candlestick(self) -> Dict:
        """Get d√≥lar candlestick data (synchronous)."""
        return self.fetch_data('/v1/cotizaciones/dolares/candlestick')
    
    def get_inflacion(self) -> List[Dict]:
        """Get inflation data (synchronous)."""
        return self.fetch_data('/v1/indicadores/inflacion')
    
    def get_tasas(self) -> List[Dict]:
        """Get interest rates data (synchronous)."""
        return self.fetch_data('/v1/indicadores/tasas')
    
    def get_uva(self) -> List[Dict]:
        """Get UVA data (synchronous)."""
        return self.fetch_data('/v1/indicadores/uva')
    
    def get_riesgo_pais(self) -> List[Dict]:
        """Get country risk data (synchronous)."""
        return self.fetch_data('/v1/indicadores/riesgo-pais')
    
    # Asynchronous methods
    async def get_dolares_async(self) -> List[Dict]:
        """Asynchronously get d√≥lar exchange rates data."""
        return await self.fetch_data_async('/v1/cotizaciones/dolares')
    
    async def get_dolares_candlestick_async(self) -> Dict:
        """Asynchronously get d√≥lar candlestick data."""
        return await self.fetch_data_async('/v1/cotizaciones/dolares/candlestick')
    
    async def get_inflacion_async(self) -> List[Dict]:
        """Asynchronously get inflation data."""
        return await self.fetch_data_async('/v1/indicadores/inflacion')
    
    async def get_tasas_async(self) -> List[Dict]:
        """Asynchronously get interest rates data."""
        return await self.fetch_data_async('/v1/indicadores/tasas')
    
    async def get_uva_async(self) -> List[Dict]:
        """Asynchronously get UVA data."""
        return await self.fetch_data_async('/v1/indicadores/uva')
    
    async def get_riesgo_pais_async(self) -> List[Dict]:
        """Asynchronously get country risk data."""
        return await self.fetch_data_async('/v1/indicadores/riesgo-pais')
    
    def get_all_economic_data(self) -> Dict[str, Any]:
        """
        Get all economic and financial data in one call (synchronous).
        
        Returns:
            Dictionary with all economic data
        """
        return {
            'dolares': self.get_dolares(),
            'dolares_candlestick': self.get_dolares_candlestick(),
            'inflacion': self.get_inflacion(),
            'tasas': self.get_tasas(),
            'uva': self.get_uva(),
            'riesgo_pais': self.get_riesgo_pais()
        }
        
    @cache_with_timeout(seconds=300)  # Cache for 5 minutes
    async def get_all_economic_data_async(self) -> Dict[str, Any]:
        """
        Asynchronously get all economic and financial data in one call.
        
        Returns:
            Dictionary with all economic data
        """
        # Run all async fetches concurrently
        results = await asyncio.gather(
            self.get_dolares_async(),
            self.get_dolares_candlestick_async(),
            self.get_inflacion_async(),
            self.get_tasas_async(),
            self.get_uva_async(),
            self.get_riesgo_pais_async(),
            return_exceptions=True  # Don't fail if one request fails
        )
        
        # Map results to their respective keys
        return {
            'dolares': results[0] if not isinstance(results[0], Exception) else [],
            'dolares_candlestick': results[1] if not isinstance(results[1], Exception) else {},
            'inflacion': results[2] if not isinstance(results[2], Exception) else [],
            'tasas': results[3] if not isinstance(results[3], Exception) else [],
            'uva': results[4] if not isinstance(results[4], Exception) else [],
            'riesgo_pais': results[5] if not isinstance(results[5], Exception) else []
        }
    
    def create_dolares_chart(self, data: List[Dict], periodo: str = '1 mes', 
                            casas: Optional[List[str]] = None) -> Dict:
        """
        Create d√≥lares chart with Plotly (synchronous).
        
        Args:
            data: D√≥lares data
            periodo: Time period ('1 semana', '1 mes', '1 a√±o', '5 a√±os', 'Todo')
            casas: List of exchange houses to include
            
        Returns:
            Plotly figure as dictionary
        """
        if not data:
            return {}
        
        df = pd.DataFrame(data)
        df['fecha'] = pd.to_datetime(df['fecha'])
        
        # Filter by period
        periodos = {
            '1 semana': 7,
            '1 mes': 30,
            '1 a√±o': 365,
            '5 a√±os': 1825,
        }
        
        if periodo in periodos and periodo != 'Todo':
            cutoff_date = datetime.now() - timedelta(days=periodos[periodo])
            df = df[df['fecha'] >= cutoff_date]
        
        # Filter by selected houses
        if casas:
            df = df[df['casa'].isin(casas)]
        
        fig = go.Figure()
        
        for casa in df['casa'].unique():
            casa_data = df[df['casa'] == casa]
            fig.add_trace(go.Scatter(
                x=casa_data['fecha'],
                y=casa_data['venta'],
                mode='lines',
                name=casa,
                hovertemplate='<b>%{x}</b><br>Cotizaci√≥n: %{y}<extra></extra>'
            ))
        
        fig.update_layout(
            title='Cotizaciones del D√≥lar en Argentina',
            xaxis_title='Fecha',
            yaxis_title='Cotizaci√≥n',
            hovermode='x unified',
            template='plotly_white'
        )
        
        return json.loads(fig.to_json())
        
    @cache_with_timeout(seconds=300)  # Cache for 5 minutes
    async def create_dolares_chart_async(self, data: List[Dict], periodo: str = '1 mes', 
                                      casas: Optional[List[str]] = None) -> Dict:
        """
        Asynchronously create d√≥lares chart with Plotly.
        
        Args:
            data: D√≥lares data
            periodo: Time period ('1 semana', '1 mes', '1 a√±o', '5 a√±os', 'Todo')
            casas: List of exchange houses to include
            
        Returns:
            Plotly figure as dictionary
        """
        # Run the synchronous version in a thread pool
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            None,
            lambda: self.create_dolares_chart(data, periodo, casas)
        )
    
    def create_inflacion_chart(self, data: List[Dict]) -> Dict:
        """
        Create inflaci√≥n chart with Plotly (synchronous).
        
        Args:
            data: Inflation data
            
        Returns:
            Plotly figure as dictionary
        """
        if not data:
            return {}
        
        df = pd.DataFrame(data)
        df['fecha'] = pd.to_datetime(df['fecha'])
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=df['fecha'],
            y=df['valor'],
            mode='lines+markers',
            name='Inflaci√≥n',
            line=dict(color='#3b82f6', width=2),
            hovertemplate='<b>%{x}</b><br>Inflaci√≥n: %{y}%<extra></extra>'
        ))
        
        fig.update_layout(
            title='Evoluci√≥n de la Inflaci√≥n',
            xaxis_title='Fecha',
            yaxis_title='Inflaci√≥n (%)',
            hovermode='x unified',
            template='plotly_white'
        )
        
        return json.loads(fig.to_json())
        
    @cache_with_timeout(seconds=300)  # Cache for 5 minutes
    async def create_inflacion_chart_async(self, data: List[Dict]) -> Dict:
        """
        Asynchronously create inflaci√≥n chart with Plotly.
        
        Args:
            data: Inflation data
            
        Returns:
            Plotly figure as dictionary
        """
        # Run the synchronous version in a thread pool
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            None,
            lambda: self.create_inflacion_chart(data)
        )
    
    def create_tasas_chart(self, data: List[Dict]) -> Dict:
        """
        Create tasas de inter√©s chart with Plotly (synchronous).
        
        Args:
            data: Interest rates data
            
        Returns:
            Plotly figure as dictionary
        """
        if not data:
            return {}
        
        df = pd.DataFrame(data)
        df['fecha'] = pd.to_datetime(df['fecha'])
        
        # Pivot to have different rates as columns
        df_pivot = df.pivot(index='fecha', columns='tipo', values='valor').reset_index()
        
        fig = go.Figure()
        
        # Add a trace for each rate type
        for col in df_pivot.columns[1:]:  # Skip 'fecha' column
            fig.add_trace(go.Scatter(
                x=df_pivot['fecha'],
                y=df_pivot[col],
                mode='lines+markers',
                name=col,
                hovertemplate=f'<b>%{{x}}</b><br>{col}: %{{y}}%<extra></extra>'
            ))
        
        fig.update_layout(
            title='Evoluci√≥n de las Tasas de Inter√©s',
            xaxis_title='Fecha',
            yaxis_title='Tasa (%)',
            hovermode='x unified',
            template='plotly_white',
            legend_title='Tipo de Tasa'
        )
        
        return json.loads(fig.to_json())
        
    @cache_with_timeout(seconds=300)  # Cache for 5 minutes
    async def create_tasas_chart_async(self, data: List[Dict]) -> Dict:
        """
        Asynchronously create tasas de inter√©s chart with Plotly.
        
        Args:
            data: Interest rates data
            
        Returns:
            Plotly figure as dictionary
        """
        # Run the synchronous version in a thread pool
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            None,
            lambda: self.create_tasas_chart(data)
        )
    
    def create_uva_chart(self, data: List[Dict]) -> Dict:
        """
        Create UVA chart with Plotly (synchronous).
        
        Args:
            data: UVA data
            
        Returns:
            Plotly figure as dictionary
        """
        if not data:
            return {}
        
        df = pd.DataFrame(data)
        df['fecha'] = pd.to_datetime(df['fecha'])
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=df['fecha'],
            y=df['valor'],
            mode='lines+markers',
            name='UVA',
            line=dict(color='#10b981', width=2),
            hovertemplate='<b>%{x}</b><br>UVA: %{y}<extra></extra>'
        ))
        
        fig.update_layout(
            title='Evoluci√≥n del UVA',
            xaxis_title='Fecha',
            yaxis_title='UVA',
            hovermode='x unified',
            template='plotly_white'
        )
        
        return json.loads(fig.to_json())
        
    @cache_with_timeout(seconds=300)  # Cache for 5 minutes
    async def create_uva_chart_async(self, data: List[Dict]) -> Dict:
        """
        Asynchronously create UVA chart with Plotly.
        
        Args:
            data: UVA data
            
        Returns:
            Plotly figure as dictionary
        """
        # Run the synchronous version in a thread pool
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            None,
            lambda: self.create_uva_chart(data)
        )
    
    def create_riesgo_pais_chart(self, data: List[Dict]) -> Dict:
        """
        Create riesgo pa√≠s chart with Plotly (synchronous).
        
        Args:
            data: Country risk data
            
        Returns:
            Plotly figure as dictionary
        """
        if not data:
            return {}
        
        df = pd.DataFrame(data)
        df['fecha'] = pd.to_datetime(df['fecha'])
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=df['fecha'],
            y=df['valor'],
            mode='lines+markers',
            name='Riesgo Pa√≠s',
            line=dict(color='#f59e0b', width=2),
            hovertemplate='<b>%{x}</b><br>Riesgo Pa√≠s: %{y} puntos<extra></extra>'
        ))
        
        fig.update_layout(
            title='Evoluci√≥n del Riesgo Pa√≠s',
            xaxis_title='Fecha',
            yaxis_title='Riesgo Pa√≠s (puntos)',
            hovermode='x unified',
            template='plotly_white'
        )
        
        return json.loads(fig.to_json())
        
    @cache_with_timeout(seconds=300)  # Cache for 5 minutes
    async def create_riesgo_pais_chart_async(self, data: List[Dict]) -> Dict:
        """
        Asynchronously create riesgo pa√≠s chart with Plotly.
        
        Args:
            data: Country risk data
            
        Returns:
            Plotly figure as dictionary
        """
        # Run the synchronous version in a thread pool
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            None,
            lambda: self.create_riesgo_pais_chart(data)
        )
    
    def get_economic_analysis(self) -> Dict[str, Any]:
        """
        Get comprehensive economic analysis including cycle phase detection (synchronous).
        
        Returns:
            Dictionary with economic analysis and cycle phase
        """
        data = self.get_all_economic_data()
        
        analysis = {
            'data': data,
            'cycle_phase': 'Unknown',
            'recommendations': [],
            'risk_level': 'Medium',
            'sectors': {
                'favorable': [],
                'unfavorable': [],
                'neutral': []
            }
        }
        
        # Analyze inflation trend
        if data['inflacion']:
            inflacion_df = pd.DataFrame(data['inflacion'])
            inflacion_df['fecha'] = pd.to_datetime(inflacion_df['fecha'])
            inflacion_df = inflacion_df.sort_values('fecha')
            
            if len(inflacion_df) >= 2:
                latest_inflacion = inflacion_df.iloc[-1]['valor']
                prev_inflacion = inflacion_df.iloc[-2]['valor']
                inflacion_trend = latest_inflacion - prev_inflacion
                
                if inflacion_trend > 0:
                    analysis['cycle_phase'] = 'Inflationary Pressure'
                    analysis['risk_level'] = 'High'
                    analysis['sectors']['favorable'].extend(['Commodities', 'Real Estate', 'TIPS'])
                    analysis['sectors']['unfavorable'].extend(['Bonds', 'Cash', 'Growth Stocks'])
                else:
                    analysis['cycle_phase'] = 'Disinflationary'
                    analysis['risk_level'] = 'Medium'
                    analysis['sectors']['favorable'].extend(['Bonds', 'Growth Stocks', 'Technology'])
        
        # Analyze interest rates
        if data['tasas']:
            tasas_df = pd.DataFrame(data['tasas'])
            tasas_df['fecha'] = pd.to_datetime(tasas_df['fecha'])
            tasas_df = tasas_df.sort_values('fecha')
            
            if len(tasas_df) >= 2:
                latest_tasa = tasas_df.iloc[-1]['valor']
                prev_tasa = tasas_df.iloc[-2]['valor']
                tasa_trend = latest_tasa - prev_tasa
                
                if tasa_trend > 0:
                    analysis['cycle_phase'] = 'Tightening Monetary Policy'
                    analysis['sectors']['favorable'].extend(['Financials', 'Value Stocks'])
                    analysis['sectors']['unfavorable'].extend(['Growth Stocks', 'Real Estate'])
                else:
                    analysis['cycle_phase'] = 'Accommodative Monetary Policy'
                    analysis['sectors']['favorable'].extend(['Growth Stocks', 'Real Estate', 'Technology'])
        
        # Analyze country risk
        if data['riesgo_pais']:
            riesgo_df = pd.DataFrame(data['riesgo_pais'])
            riesgo_df['fecha'] = pd.to_datetime(riesgo_df['fecha'])
            riesgo_df = riesgo_df.sort_values('fecha')
            
            if len(riesgo_df) >= 2:
                latest_riesgo = riesgo_df.iloc[-1]['valor']
                prev_riesgo = riesgo_df.iloc[-2]['valor']
                riesgo_trend = latest_riesgo - prev_riesgo
                
                if riesgo_trend > 0:
                    analysis['risk_level'] = 'High'
                    analysis['sectors']['favorable'].extend(['Defensive Stocks', 'Gold', 'USD'])
                    analysis['sectors']['unfavorable'].extend(['Emerging Markets', 'Local Currency Bonds'])
                else:
                    analysis['risk_level'] = 'Medium'
                    analysis['sectors']['favorable'].extend(['Emerging Markets', 'Local Stocks'])
        
        # Generate recommendations based on cycle phase
        if analysis['cycle_phase'] == 'Inflationary Pressure':
            analysis['recommendations'].extend([
                'Considerar activos refugio como oro y commodities',
                'Reducir exposici√≥n a bonos de largo plazo',
                'Mantener liquidez en d√≥lares',
                'Considerar acciones de empresas con poder de fijaci√≥n de precios'
            ])
        elif analysis['cycle_phase'] == 'Tightening Monetary Policy':
            analysis['recommendations'].extend([
                'Favorecer acciones de valor sobre crecimiento',
                'Considerar bonos de corto plazo',
                'Mantener exposici√≥n a sectores financieros',
                'Reducir exposici√≥n a bienes ra√≠ces'
            ])
        elif analysis['cycle_phase'] == 'Accommodative Monetary Policy':
            analysis['recommendations'].extend([
                'Favorecer acciones de crecimiento',
                'Considerar bienes ra√≠ces',
                'Mantener exposici√≥n a tecnolog√≠a',
                'Considerar bonos de largo plazo'
            ])
        
        # --- Traducci√≥n de valores a espa√±ol ---
        # Al final de get_economic_analysis, antes de return analysis
        traducciones_fase = {
            'Unknown': 'Desconocido',
            'Inflationary Pressure': 'Presi√≥n Inflacionaria',
            'Disinflationary': 'Desinflacionario',
            'Tightening Monetary Policy': 'Pol√≠tica Monetaria Contractiva',
            'Accommodative Monetary Policy': 'Pol√≠tica Monetaria Expansiva',
        }
        traducciones_riesgo = {
            'Medium': 'Medio',
            'High': 'Alto',
            'Low': 'Bajo',
        }
        if analysis['cycle_phase'] in traducciones_fase:
            analysis['cycle_phase'] = traducciones_fase[analysis['cycle_phase']]
        if analysis['risk_level'] in traducciones_riesgo:
            analysis['risk_level'] = traducciones_riesgo[analysis['risk_level']]
        # Si sigue siendo Unknown, poner Desconocido
        if not analysis['cycle_phase'] or analysis['cycle_phase'] == 'Unknown':
            analysis['cycle_phase'] = 'Desconocido'
        if not analysis['risk_level'] or analysis['risk_level'] == 'Medium':
            analysis['risk_level'] = 'Medio'
        return analysis

    @cache_with_timeout(seconds=300)  # Cache for 5 minutes
    async def get_economic_analysis_async(self) -> Dict[str, Any]:
        """
        Asynchronously get comprehensive economic analysis including cycle phase detection.
        
        Returns:
            Dictionary with economic analysis and cycle phase
        """
        # Fetch all economic data asynchronously
        data = await self.get_all_economic_data_async()
        
        # Create a new analysis dictionary
        analysis = {
            'data': data,
            'cycle_phase': 'Unknown',
            'recommendations': [],
            'risk_level': 'Medium',
            'sectors': {
                'favorable': [],
                'unfavorable': [],
                'neutral': []
            }
        }
        
        # Analyze inflation trend
        if data['inflacion']:
            inflacion_df = pd.DataFrame(data['inflacion'])
            inflacion_df['fecha'] = pd.to_datetime(inflacion_df['fecha'])
            inflacion_df = inflacion_df.sort_values('fecha')
            
            if len(inflacion_df) >= 2:
                latest_inflacion = inflacion_df.iloc[-1]['valor']
                prev_inflacion = inflacion_df.iloc[-2]['valor']
                inflacion_trend = latest_inflacion - prev_inflacion
                
                if inflacion_trend > 0:
                    analysis['cycle_phase'] = 'Inflationary Pressure'
                    analysis['risk_level'] = 'High'
                    analysis['sectors']['favorable'].extend(['Commodities', 'Real Estate', 'TIPS'])
                    analysis['sectors']['unfavorable'].extend(['Bonds', 'Cash', 'Growth Stocks'])
                else:
                    analysis['cycle_phase'] = 'Disinflationary'
                    analysis['risk_level'] = 'Medium'
                    analysis['sectors']['favorable'].extend(['Bonds', 'Growth Stocks', 'Technology'])
        
        # Analyze interest rates
        if data['tasas']:
            tasas_df = pd.DataFrame(data['tasas'])
            tasas_df['fecha'] = pd.to_datetime(tasas_df['fecha'])
            tasas_df = tasas_df.sort_values('fecha')
            
            if len(tasas_df) >= 2:
                latest_tasa = tasas_df.iloc[-1]['valor']
                prev_tasa = tasas_df.iloc[-2]['valor']
                tasa_trend = latest_tasa - prev_tasa
                
                if tasa_trend > 0:
                    analysis['cycle_phase'] = 'Tightening Monetary Policy'
                    analysis['sectors']['favorable'].extend(['Financials', 'Value Stocks'])
                    analysis['sectors']['unfavorable'].extend(['Growth Stocks', 'Real Estate'])
                else:
                    analysis['cycle_phase'] = 'Accommodative Monetary Policy'
                    analysis['sectors']['favorable'].extend(['Growth Stocks', 'Real Estate', 'Technology'])
        
        # Analyze country risk
        if data['riesgo_pais']:
            riesgo_df = pd.DataFrame(data['riesgo_pais'])
            riesgo_df['fecha'] = pd.to_datetime(riesgo_df['fecha'])
            riesgo_df = riesgo_df.sort_values('fecha')
            
            if len(riesgo_df) >= 2:
                latest_riesgo = riesgo_df.iloc[-1]['valor']
                prev_riesgo = riesgo_df.iloc[-2]['valor']
                riesgo_trend = latest_riesgo - prev_riesgo
                
                if riesgo_trend > 0:
                    analysis['risk_level'] = 'High'
                    analysis['sectors']['favorable'].extend(['Defensive Stocks', 'Gold', 'USD'])
                    analysis['sectors']['unfavorable'].extend(['Emerging Markets', 'Local Currency Bonds'])
                else:
                    analysis['risk_level'] = 'Medium'
                    analysis['sectors']['favorable'].extend(['Emerging Markets', 'Local Stocks'])
        
        # Generate recommendations based on cycle phase
        if analysis['cycle_phase'] == 'Inflationary Pressure':
            analysis['recommendations'].extend([
                'Considerar activos refugio como oro y commodities',
                'Reducir exposici√≥n a bonos de largo plazo',
                'Mantener liquidez en d√≥lares',
                'Considerar acciones de empresas con poder de fijaci√≥n de precios'
            ])
        elif analysis['cycle_phase'] == 'Tightening Monetary Policy':
            analysis['recommendations'].extend([
                'Favorecer acciones de valor sobre crecimiento',
                'Considerar bonos de corto plazo',
                'Mantener exposici√≥n a sectores financieros',
                'Reducir exposici√≥n a bienes ra√≠ces'
            ])
        elif analysis['cycle_phase'] == 'Accommodative Monetary Policy':
            analysis['recommendations'].extend([
                'Favorecer acciones de crecimiento',
                'Considerar bienes ra√≠ces',
                'Mantener exposici√≥n a tecnolog√≠a',
                'Considerar bonos de largo plazo'
            ])
        
        # Translate values to Spanish
        traducciones_fase = {
            'Unknown': 'Desconocido',
            'Inflationary Pressure': 'Presi√≥n Inflacionaria',
            'Disinflationary': 'Desinflacionario',
            'Tightening Monetary Policy': 'Pol√≠tica Monetaria Contractiva',
            'Accommodative Monetary Policy': 'Pol√≠tica Monetaria Expansiva',
        }
        traducciones_riesgo = {
            'Medium': 'Medio',
            'High': 'Alto',
            'Low': 'Bajo',
        }
        
        if analysis['cycle_phase'] in traducciones_fase:
            analysis['cycle_phase'] = traducciones_fase[analysis['cycle_phase']]
        if analysis['risk_level'] in traducciones_riesgo:
            analysis['risk_level'] = traducciones_riesgo[analysis['risk_level']]
            
        # Set default values if still unknown
        if not analysis['cycle_phase'] or analysis['cycle_phase'] == 'Unknown':
            analysis['cycle_phase'] = 'Desconocido'
st.set_page_config(
    page_title="IOL Portfolio Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    /* Estilos generales */
    .stApp {
        background-color: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    /* Mejora de tarjetas y m√©tricas */
    .stMetric {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        border-left: 4px solid #0d6efd;
    }
    
    /* Mejora de pesta√±as */
    .stTabs [data-baseweb="tab-list"] {
        gap: 5px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 45px;
        padding: 0 20px;
        background-color: #e9ecef;
        border-radius: 8px !important;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #0d6efd !important;
        color: white !important;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .stTabs [data-baseweb="tab"]:hover {
        background-color: #dde5ed !important;
    }
    
    /* Mejora de inputs */
    .stTextInput, .stNumberInput, .stDateInput, .stSelectbox {
        background-color: white;
        border-radius: 8px;
    }
    
    /* Botones */
    .stButton>button {
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s;
    }
    
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    /* Barra lateral */
    [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #2c3e50, #1a1a2e);
        color: white;
    }
    
    [data-testid="stSidebar"] .stRadio label {
        color: white !important;
    }
    
    [data-testid="stSidebar"] .stSelectbox label {
        color: white !important;
    }
    
    [data-testid="stSidebar"] .stTextInput label {
        color: white !important;
    }
    
    /* T√≠tulos */
    h1, h2, h3, h4, h5, h6 {
        color: #2c3e50;
        font-weight: 600;
    }
    
    /* Tablas */
    .dataframe {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
    }
    
    /* Progress bar */
    .stProgress > div > div > div {
        background-color: #0d6efd;
    }
</style>
""", unsafe_allow_html=True)

def load_custom_css():
    # Cargar estilos CSS personalizados
    st.markdown("""
    <style>
        /* Estilos personalizados */
        .card {
            padding: 1.5rem;
            border-radius: 10px;
            background: linear-gradient(135deg, #4CAF50, #8BC34A);
            color: white;
        }
        
        .card h3 {
            margin-bottom: 0.5rem;
        }
        
        .card p {
            margin-bottom: 1rem;
        }
        
        .text-muted {
            color: rgba(0,0,0,0.5);
        }
    </style>
    """, unsafe_allow_html=True)

def main():
    try:
        # Configuraci√≥n de la p√°gina
        st.set_page_config(
            page_title="IOL Portfolio Analyzer",
            page_icon="üìä",
            layout="wide",
            initial_sidebar_state="expanded"
        )
        
        # Cargar estilos CSS personalizados
        load_custom_css()
        
        # Inicializar variables de sesi√≥n si no existen
        if 'token_acceso' not in st.session_state:
            st.session_state.token_acceso = None
        if 'refresh_token' not in st.session_state:
            st.session_state.refresh_token = None
        if 'cliente_seleccionado' not in st.session_state:
            st.session_state.cliente_seleccionado = None

        # Barra lateral mejorada
        with st.sidebar:
            st.markdown("""
            <div style="text-align: center; margin-bottom: 2rem;">
                <h1 style="color: white; margin-bottom: 0.5rem;">üìä IOL Analyzer</h1>
                <p style="color: rgba(255,255,255,0.8); margin: 0;">An√°lisis avanzado de portafolios</p>
            </div>
            """, unsafe_allow_html=True)
            
            opcion = st.radio(
                "Men√∫ Principal",
                ("üè† Inicio", "üìä An√°lisis de Portafolio", "üåç Mercados", "üéØ Recomendaciones", "üë®\u200düíº Asesor"),
                index=0,
                label_visibility="collapsed"
            )
            
            # Mostrar informaci√≥n del usuario si est√° autenticado
            if 'token_acceso' in st.session_state and st.session_state.token_acceso:
                st.markdown("---")
                st.markdown("### üîê Sesi√≥n")
                if st.button("üîí Cerrar sesi√≥n", use_container_width=True):
                    st.session_state.clear()
                    st.rerun()
    
        # Mostrar la p√°gina seleccionada con mejoras de dise√±o
        if opcion == "üè† Inicio":
            st.markdown("""
            <div style="text-align: center; margin: 2rem 0 3rem 0;">
                <h1>Bienvenido a IOL Portfolio Analyzer</h1>
                <p class="text-muted">Herramienta avanzada para el an√°lisis de portafolios de inversi√≥n</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Tarjetas de resumen
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown("""
                <div class="card" style="padding: 1.5rem; border-radius: 10px; background: linear-gradient(135deg, #4CAF50, #8BC34A); color: white;">
                    <h3>üìä An√°lisis</h3>
                    <p>Visualice y analice su portafolio de inversiones en tiempo real.</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown("""
                <div class="card" style="padding: 1.5rem; border-radius: 10px; background: linear-gradient(135deg, #2196F3, #03A9F4); color: white;">
                    <h3>üìà Mercados</h3>
                    <p>Monitoree los mercados globales y su impacto en su portafolio.</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown("""
                <div class="card" style="padding: 1.5rem; border-radius: 10px; background: linear-gradient(135deg, #FF9800, #FFC107); color: white;">
                    <h3>üéØ Recomendaciones</h3>
                    <p>Obtenga recomendaciones personalizadas basadas en su perfil de riesgo.</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                st.markdown("""
                <div class="card" style="padding: 1.5rem; border-radius: 10px; background: linear-gradient(135deg, #9C27B0, #E91E63); color: white;">
                    <h3>üìä Reportes</h3>
                    <p>Genere informes detallados de su desempe√±o de inversi√≥n.</p>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown("""
            <div style="margin-top: 3rem;">
                <h2>¬øC√≥mo comenzar?</h2>
                <ol>
                    <li>Inicie sesi√≥n con sus credenciales de IOL</li>
                    <li>Seleccione un cliente en la barra lateral</li>
                    <li>Explore las diferentes secciones del men√∫</li>
                    <li>Analice su portafolio y tome decisiones informadas</li>
                </ol>
            </div>
            """, unsafe_allow_html=True)
        elif opcion == "üåç Mercados":
            if 'token_acceso' in st.session_state and st.session_state.token_acceso:
                # Configuraci√≥n de API key para IA
                if 'GEMINI_API_KEY' not in st.session_state:
                    st.session_state.GEMINI_API_KEY = 'AIzaSyBFtK05ndkKgo4h0w9gl224Gn94NaWaI6E'
                
                gemini_key = st.session_state.GEMINI_API_KEY
                
                # Encabezado principal del an√°lisis integral
                st.markdown("""
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                            border-radius: 15px; 
                            padding: 30px; 
                            color: white;
                            text-align: center;
                            margin: 20px 0;">
                    <h1 style="color: white; margin-bottom: 15px;">üåç An√°lisis Integral de Mercados</h1>
                    <p style="font-size: 16px; margin-bottom: 0;">An√°lisis completo de mercados, ciclos econ√≥micos, correlaciones y estrategias de inversi√≥n</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Crear tabs para el an√°lisis integral
                tab1, tab2, tab3, tab4, tab5 = st.tabs([
                    "üåç An√°lisis Intermarket", 
                    "üìà Ciclo Econ√≥mico", 
                    "üîó Correlaciones Avanzadas",
                    "üìä CAPM y Estrategias",
                    "üéØ CAPM Interactivo"
                ])
                
                with tab1:
                    st.subheader("üåç An√°lisis Intermarket Completo")
                    st.markdown("""
                    **An√°lisis completo de mercados interconectados:**
                    - Correlaciones entre diferentes clases de activos
                    - An√°lisis de momentum y tendencias
                    - Identificaci√≥n de oportunidades de arbitraje
                    - Recomendaciones de estrategias de inversi√≥n
                    """)
                    analisis_intermarket_completo(st.session_state.token_acceso, gemini_key)
                
                with tab2:
                    st.subheader("üìà An√°lisis del Ciclo Econ√≥mico")
                    st.markdown("""
                    **An√°lisis profundo del ciclo econ√≥mico argentino:**
                    - Variables macroecon√≥micas en tiempo real
                    - Indicadores de empleo, inflaci√≥n y actividad
                    - Proyecciones y tendencias del ciclo
                    - Recomendaciones basadas en el contexto econ√≥mico
                    """)
                    graficar_ciclo_economico_real(st.session_state.token_acceso, gemini_key)
                
                with tab3:
                    st.subheader("üîó An√°lisis Avanzado de Correlaciones")
                    st.markdown("""
                    **An√°lisis detallado de correlaciones y divergencias:**
                    - Correlaciones hist√≥ricas entre variables econ√≥micas
                    - Detecci√≥n de divergencias y oportunidades
                    - An√°lisis de causalidad y relaciones
                    - Recomendaciones de arbitraje y cobertura
                    """)
                    st.warning("Funcionalidad en desarrollo. Pr√≥ximamente disponible.")
                
                with tab4:
                    st.subheader("üìä An√°lisis CAPM y Estrategias de Inversi√≥n")
                    st.markdown("""
                    **An√°lisis de riesgo y estrategias de inversi√≥n:**
                    - Modelo CAPM para activos individuales
                    - Identificaci√≥n de activos defensivos
                    - Estrategias de inversi√≥n seg√∫n condiciones de mercado
                    - An√°lisis de portafolio con m√©tricas de riesgo
                    """)
                    st.warning("Funcionalidad en desarrollo. Pr√≥ximamente disponible.")
                    
                    # Si hay un cliente seleccionado, mostrar tambi√©n an√°lisis del portafolio
                    if st.session_state.cliente_seleccionado:
                        st.divider()
                        st.subheader("üìä An√°lisis CAPM del Portafolio")
                        st.warning("An√°lisis CAPM del portafolio en desarrollo. Pr√≥ximamente disponible.")
                
                with tab5:
                    st.subheader("üéØ An√°lisis CAPM Interactivo")
                    st.markdown("""
                    **An√°lisis CAPM interactivo con men√∫s desplegables:**
                    - Selecci√≥n de paneles de activos (Acciones, Bonos, FCIs, etc.)
                    - Selecci√≥n de benchmarks (Merval, S&P 500, NASDAQ, etc.)
                    - C√°lculo autom√°tico de Alpha, Beta y m√©tricas CAPM
                    - Clasificaci√≥n autom√°tica por estrategias de inversi√≥n
                    - Gr√°ficos interactivos y recomendaciones detalladas
                    """)
                    st.warning("Funcionalidad en desarrollo. Pr√≥ximamente disponible.")
            else:
                st.warning("Por favor inicie sesi√≥n para acceder al an√°lisis de mercados")
            
        elif opcion == "üéØ Recomendaciones":
            if 'token_acceso' in st.session_state and st.session_state.token_acceso:
                st.markdown("""
                <div style="background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%); 
                            border-radius: 15px; 
                            padding: 30px; 
                            color: white;
                            text-align: center;
                            margin: 20px 0;">
                    <h1 style="color: white; margin-bottom: 15px;">üéØ Recomendaci√≥n de Activos</h1>
                    <p style="font-size: 16px; margin-bottom: 0;">Recomendaciones personalizadas basadas en su perfil de riesgo y objetivos</p>
                </div>
                """, unsafe_allow_html=True)
                st.warning("Funcionalidad en desarrollo. Pr√≥ximamente disponible.")
            else:
                st.warning("Por favor inicie sesi√≥n para acceder al sistema de recomendaci√≥n de activos")
        
        elif opcion == "üë®\u200düíº Asesor":
            if 'token_acceso' in st.session_state and st.session_state.token_acceso:
                mostrar_movimientos_asesor()
            else:
                st.warning("Por favor inicie sesi√≥n para acceder al panel del asesor")
        
        # Manejo de errores
        if 'error' in st.session_state and st.session_state.error:
            st.error(st.session_state.error)
            del st.session_state.error
            
    except Exception as e:
        st.error(f"‚ùå Error en la aplicaci√≥n: {str(e)}")
        st.exception(e)  # Mostrar el traceback completo para depuraci√≥n


def obtener_tickers_por_panel(token_portador, paneles, pais='Argentina'):
    """
    Devuelve un diccionario con listas de tickers reales por panel para el universo aleatorio.
    Si no hay API, usa listas fijas de tickers representativos.
    Retorna: (dict panel->tickers, dict panel->descripciones)
    """
    tickers = {}
    descripciones = {}
    # Paneles y ejemplos (puedes reemplazar por consulta a la API de IOL si tienes endpoint)
    paneles_dict = {
        'acciones': [
            ('GGAL', 'Grupo Financiero Galicia'),
            ('YPFD', 'YPF S.A.'),
            ('PAMP', 'Pampa Energ√≠a'),
            ('BMA', 'Banco Macro'),
            ('SUPV', 'Grupo Supervielle'),
            ('CEPU', 'Central Puerto'),
            ('TXAR', 'Ternium Argentina'),
            ('ALUA', 'Aluar'),
            ('TGSU2', 'Transportadora Gas del Sur'),
            ('EDN', 'Edenor'),
        ],
        'cedears': [
            ('AAPL', 'Apple'),
            ('TSLA', 'Tesla'),
            ('AMZN', 'Amazon'),
            ('GOOGL', 'Alphabet'),
            ('MSFT', 'Microsoft'),
            ('KO', 'Coca-Cola'),
            ('MELI', 'Mercado Libre'),
            ('BABA', 'Alibaba'),
            ('JNJ', 'Johnson & Johnson'),
            ('PG', 'Procter & Gamble'),
        ],
        'aDRs': [
            ('BBAR', 'BBVA Argentina'),
            ('BMA', 'Banco Macro'),
            ('GGAL', 'Grupo Galicia'),
            ('PAM', 'Pampa Energia'),
            ('SUPV', 'Supervielle'),
        ],
        'titulosPublicos': [
            ('AL30', 'Bonar 2030'),
            ('GD30', 'Global 2030'),
            ('AL35', 'Bonar 2035'),
            ('GD35', 'Global 2035'),
            ('AL29', 'Bonar 2029'),
            ('GD29', 'Global 2029'),
        ],
        'obligacionesNegociables': [
            ('PBY22', 'Pampa Energ√≠a ON'),
            ('CGC24', 'Compa√±√≠a General de Combustibles ON'),
            ('YPF23', 'YPF ON'),
            ('TGSU2', 'Transportadora Gas del Sur ON'),
        ]
    }
    for panel in paneles:
        panel_l = panel.lower()
        if panel_l in paneles_dict:
            tickers[panel] = [t[0] for t in paneles_dict[panel_l]]
            descripciones[panel] = [t[1] for t in paneles_dict[panel_l]]
        else:
            tickers[panel] = []
            descripciones[panel] = []
    return tickers, descripciones

# --- Funci√≥n: calcular retornos y covarianza con ventana m√≥vil ---
def calcular_estadisticas_ventana_movil(precios, ventana=252):
    """
    Calcula retornos esperados y matriz de covarianza usando una ventana m√≥vil.
    precios: DataFrame de precios (columnas=activos, filas=fechas)
    ventana: d√≠as para la ventana m√≥vil (por defecto 1 a√±o)
    Devuelve: retornos esperados anualizados, covarianza anualizada
    """
    retornos = precios.pct_change().dropna()
    retornos_ventana = retornos.iloc[-ventana:]
    mean_ret = retornos_ventana.mean() * 252
    cov = retornos_ventana.cov() * 252
    return mean_ret, cov

# --- Funci√≥n: optimizaci√≥n Markowitz (max Sharpe) ---
def optimizar_markowitz(mean_ret, cov, risk_free_rate=0.0):
    """
    Devuelve los pesos √≥ptimos de Markowitz (max Sharpe, long-only)
    """
    import numpy as np
    import scipy.optimize as op
    n = len(mean_ret)
    bounds = tuple((0, 1) for _ in range(n))
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1},)
    def neg_sharpe(x):
        port_ret = np.dot(mean_ret, x)
        port_vol = np.sqrt(np.dot(x, np.dot(cov, x)))
        if port_vol == 0:
            return 1e6
        return -(port_ret - risk_free_rate) / port_vol
    x0 = np.ones(n) / n
    res = op.minimize(neg_sharpe, x0, bounds=bounds, constraints=constraints)
    if res.success:
        return res.x
    else:
        return x0

# --- Funci√≥n: backtest con rebalanceo peri√≥dico ---
def backtest_markowitz(precios, ventana=252, rebalanceo=63, risk_free_rate=0.0):
    """
    Simula la evoluci√≥n de un portafolio Markowitz con rebalanceo peri√≥dico.
    precios: DataFrame de precios (columnas=activos, filas=fechas)
    ventana: d√≠as para estimar retornos/covarianza
    rebalanceo: cada cu√°ntos d√≠as rebalancear (63 = 3 meses aprox)
    Devuelve: fechas, valores del portafolio, lista de pesos, fechas de rebalanceo
    """
    import numpy as np
    fechas = precios.index
    n_activos = precios.shape[1]
    portafolio_valor = [1.0]
    pesos_hist = []
    fechas_reb = []
    pesos_actual = np.ones(n_activos) / n_activos
    for i in range(ventana, len(fechas)-1, rebalanceo):
        precios_window = precios.iloc[i-ventana:i]
        mean_ret, cov = calcular_estadisticas_ventana_movil(precios_window, ventana)
        pesos_actual = optimizar_markowitz(mean_ret, cov, risk_free_rate)
        pesos_hist.append(pesos_actual)
        fechas_reb.append(fechas[i])
        # Simular evoluci√≥n hasta el pr√≥ximo rebalanceo
        for j in range(i, min(i+rebalanceo, len(fechas)-1)):
            ret = (precios.iloc[j+1] / precios.iloc[j] - 1).values
            portafolio_valor.append(portafolio_valor[-1] * (1 + np.dot(pesos_actual, ret)))
    # Completar hasta el final con los √∫ltimos pesos
    while len(portafolio_valor) < len(fechas):
        portafolio_valor.append(portafolio_valor[-1])
    return fechas, portafolio_valor, pesos_hist, fechas_reb

# --- Funci√≥n: visualizaci√≥n de backtest y pesos ---
def mostrar_backtest_markowitz(precios, ventana=252, rebalanceo=63, risk_free_rate=0.0):
    """
    Visualiza la evoluci√≥n del portafolio Markowitz con rebalanceo peri√≥dico.
    """
    import plotly.graph_objects as go
    fechas, portafolio_valor, pesos_hist, fechas_reb = backtest_markowitz(precios, ventana, rebalanceo, risk_free_rate)
    import streamlit as st
    st.subheader("üìà Evoluci√≥n del Portafolio Markowitz (Backtest)")
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=fechas, y=portafolio_valor, mode='lines', name='Valor Portafolio'))
    fig.update_layout(title="Backtest Markowitz con rebalanceo", xaxis_title="Fecha", yaxis_title="Valor acumulado", template="plotly_white")
    st.plotly_chart(fig, use_container_width=True)
    # Mostrar evoluci√≥n de pesos
    st.subheader("üîÑ Evoluci√≥n de Pesos por Activo")
    if pesos_hist:
        import numpy as np
        activos = precios.columns
        pesos_array = np.array(pesos_hist)
        fig2 = go.Figure()
        for idx, activo in enumerate(activos):
            fig2.add_trace(go.Scatter(x=fechas_reb, y=pesos_array[:, idx], mode='lines+markers', name=activo))
        fig2.update_layout(title="Pesos √≥ptimos en cada rebalanceo", xaxis_title="Fecha de rebalanceo", yaxis_title="Peso", template="plotly_white")
        st.plotly_chart(fig2, use_container_width=True)
    else:
        st.info("No hay datos suficientes para mostrar la evoluci√≥n de pesos.")
# --- FIN FUNCIONES ROBUSTAS ---

def obtener_series_historicas_aleatorias_con_capital(tickers_por_panel, paneles_seleccionados, cantidad_activos, fecha_desde, fecha_hasta, ajustada, token_acceso, capital_ars):
    """
    Selecciona aleatoriamente tickers de los paneles seleccionados, descarga sus series hist√≥ricas y devuelve:
    - series_historicas: dict[ticker] -> DataFrame de precios
    - seleccion_final: dict[panel] -> lista de tickers seleccionados
    Respeta la cantidad de activos por panel y el capital disponible.
    """
    import random
    import yfinance as yf
    import pandas as pd
    series_historicas = {}
    seleccion_final = {}
    for panel in paneles_seleccionados:
        tickers = tickers_por_panel.get(panel, [])
        if not tickers:
            continue
        seleccionados = random.sample(tickers, min(cantidad_activos, len(tickers)))
        seleccion_final[panel] = seleccionados
        for ticker in seleccionados:
            try:
                # Preferir yfinance para tickers internacionales y Cedears
                if panel.lower() in ['cedears', 'adrs'] or ticker.isalpha():
                    df = yf.download(ticker, start=fecha_desde, end=fecha_hasta)[['Close']]
                    if not df.empty:
                        df = df.rename(columns={'Close': 'precio'})
                        df = df.reset_index().rename(columns={'Date': 'fecha'})
                        series_historicas[ticker] = df
                else:
                    # Para acciones locales, usar la API de IOL si es necesario
                    df = obtener_serie_historica_iol(token_acceso, 'BCBA', ticker, fecha_desde, fecha_hasta, ajustada)
                    if df is not None and not df.empty:
                        series_historicas[ticker] = df
            except Exception as e:
                continue
    # Validar que haya suficientes series
    total_activos = sum(len(v) for v in seleccion_final.values())
    if total_activos == 0 or not series_historicas:
        raise Exception("No se pudieron obtener series hist√≥ricas suficientes para el universo aleatorio.")
    return series_historicas, seleccion_final

# --- Funci√≥n: An√°lisis Global de Posicionamiento ---
def analisis_global_posicionamiento(token_acceso, activos_globales=None):
    """
    Realiza un an√°lisis global de posicionamiento basado en datos locales y globales.
    
    Args:
        token_acceso (str): Token de acceso para la API de IOL
        activos_globales (list, optional): Lista de activos globales a analizar
    
    Returns:
        dict: An√°lisis completo con correlaciones, volatilidades y sugerencias
    """
    try:
        # Configuraci√≥n de per√≠odos
        col1, col2, col3 = st.columns(3)
        with col1:
            periodo_opciones = {
                '√öltimo Mes': '1mo',
                '√öltimos 3 Meses': '3mo',
                '√öltimo A√±o': '1y',
                '√öltos 2 A√±os': '2y',
                '√öltos 5 A√±os': '5y'
            }
            periodo_seleccionado = st.selectbox(
                "Per√≠odo de an√°lisis",
                options=list(periodo_opciones.keys()),
                index=2,  # Por defecto "√öltimo A√±o"
                help="Per√≠odo para el an√°lisis de variables macro e intermarket"
            )
            periodo_analisis = periodo_opciones[periodo_seleccionado]
        with col2:
            ventana_momentum = st.slider(
                "Ventana momentum (d√≠as)",
                min_value=10,
                max_value=252,
                value=63,
                help="Ventana para c√°lculo de momentum y tendencias"
            )
        with col3:
            incluir_ia = st.checkbox(
                "Incluir an√°lisis IA",
                value=True,
                help="Usar IA para diagn√≥stico de ciclo y sugerencias"
            )
        
        # Configuraci√≥n inicial
        fecha_hasta = datetime.now()
        fecha_desde = fecha_hasta - timedelta(days=365)
        
        # Si no se especifican activos globales, usar una lista por defecto
        if activos_globales is None:
            activos_globales = [
                {'simbolo': 'AAPL', 'mercado': 'NASDAQ'},
                {'simbolo': 'GOOGL', 'mercado': 'NASDAQ'},
                {'simbolo': 'MSFT', 'mercado': 'NASDAQ'},
                {'simbolo': 'AMZN', 'mercado': 'NASDAQ'},
                {'simbolo': 'BTC/USD', 'mercado': 'cripto'}
            ]
        
        # Obtener datos locales
        argentina_datos = ArgentinaDatos()
        datos_economicos = argentina_datos.get_all_economic_data()
        
        # Obtener datos de mercado local
        datos_mercado = {
            'dolares': argentina_datos.get_dolares(),
            'inflacion': argentina_datos.get_inflacion(),
            'tasas': argentina_datos.get_tasas(),
            'uva': argentina_datos.get_uva(),
            'riesgo_pais': argentina_datos.get_riesgo_pais()
        }
        
        # Obtener datos de activos globales
        datos_globales = {}
        for activo in activos_globales:
            mercado = activo.get('mercado', 'BCBA')
            simbolo = activo['simbolo']
            
            try:
                serie_historica = obtener_serie_historica_iol(
                    token_acceso,
                    mercado,
                    simbolo,
                    fecha_desde,
                    fecha_hasta
                )
                if serie_historica is not None:
                    datos_globales[simbolo] = serie_historica
            except Exception as e:
                print(f"Error al obtener datos para {simbolo}: {str(e)}")
                continue
        
        # Verificar que se obtuvieron datos globales
        if not datos_globales:
            raise ValueError("No se pudieron obtener datos globales para ning√∫n activo")
        
        # Unificar datos en un DataFrame
        df_local = pd.DataFrame()
        for key, value in datos_economicos.items():
            df_temp = pd.DataFrame(value)
            df_temp['fecha'] = pd.to_datetime(df_temp['fecha'])
            df_temp = df_temp.set_index('fecha')
            df_local = pd.concat([df_local, df_temp], axis=1)
        
        for key, value in datos_mercado.items():
            df_temp = pd.DataFrame(value)
            df_temp['fecha'] = pd.to_datetime(df_temp['fecha'])
            df_temp = df_temp.set_index('fecha')
            df_local = pd.concat([df_local, df_temp], axis=1)
        
        df_global = pd.DataFrame()
        for simbolo, serie in datos_globales.items():
            df_temp = pd.DataFrame(serie)
            df_temp['fecha'] = pd.to_datetime(df_temp['fecha'])
            df_temp = df_temp.set_index('fecha')
            df_temp.columns = [f"{simbolo}_{col}" for col in df_temp.columns]
            df_global = pd.concat([df_global, df_temp], axis=1)
        
        # Unir datos locales y globales
        df_merged = pd.concat([df_local, df_global], axis=1)
        
        # Limpieza de datos
        df_merged = df_merged[~df_merged.index.duplicated(keep='first')]
        df_merged = df_merged.dropna(thresh=len(df_merged.columns)*0.7)
        df_merged = df_merged.ffill()
        
        # An√°lisis estad√≠stico
        correlaciones = df_merged.corr()
        volatilidades = df_merged.std()
        
        # An√°lisis de tendencias
        tendencias = {}
        for columna in df_merged.columns:
            if columna.endswith('_precio'):
                tendencias[columna] = {
                    'media': df_merged[columna].mean(),
                    'tendencia': np.polyfit(
                        range(len(df_merged)),
                        df_merged[columna].values,
                        1
                    )[0],
                    'volatilidad': df_merged[columna].std()
                }
        
        # An√°lisis de riesgo
        riesgos = {}
        for columna in df_merged.columns:
            if columna.endswith('_precio'):
                riesgos[columna] = {
                    'volatilidad': df_merged[columna].std(),
                    'sharpe': df_merged[columna].mean() / df_merged[columna].std()
                }
        
        # Generar sugerencias de posicionamiento
        sugerencias = []
        for columna in correlaciones.columns:
            if columna.startswith('dolar') or columna.startswith('riesgo'):
                correlaciones_col = correlaciones[columna]
                for activo in datos_globales.keys():
                    if f"{activo}_precio" in correlaciones_col.index:
                        if correlaciones_col[f"{activo}_precio"] > 0.5:
                            sugerencias.append({
                                'activo': activo,
                                'razon': f"Alta correlaci√≥n con {columna}"
                            })
        
        for activo, riesgo in riesgos.items():
            if riesgo['sharpe'] > 0.5 and riesgo['volatilidad'] < 0.2:
                sugerencias.append({
                    'activo': activo.replace('_precio', ''),
                    'razon': "Bajo riesgo y alta rentabilidad ajustada"
                })

        # Crear gr√°ficos de evoluci√≥n para las correlaciones m√°s fuertes
        def graficar_correlacion(df, var1, var2, correlacion):
            """Crea un gr√°fico de evoluci√≥n para dos variables correlacionadas"""
            try:
                fig = go.Figure()
                
                # Normalizar las series para comparaci√≥n
                serie1 = df[var1]
                serie2 = df[var2]
                
                if not serie1.empty and not serie2.empty:
                    serie1_norm = (serie1 / serie1.iloc[0]) * 100
                    serie2_norm = (serie2 / serie2.iloc[0]) * 100
                    
                    fig.add_trace(go.Scatter(
                        x=serie1_norm.index,
                        y=serie1_norm.values,
                        mode='lines',
                        name=var1,
                        line=dict(color='blue', width=2)
                    ))
                    
                    fig.add_trace(go.Scatter(
                        x=serie2_norm.index,
                        y=serie2_norm.values,
                        mode='lines',
                        name=var2,
                        line=dict(color='red', width=2)
                    ))
                    
                    fig.update_layout(
                        title=f'Evoluci√≥n de {var1} vs {var2} (Correlaci√≥n: {correlacion:.2f})',
                        xaxis_title='Fecha',
                        yaxis_title='Valor Normalizado (%)',
                        height=500,
                        hovermode='x unified'
                    )
                    
                    return fig
                return None
            except Exception as e:
                print(f"Error al crear gr√°fico de correlaci√≥n: {str(e)}")
                return None

        # Encontrar las correlaciones m√°s fuertes y significativas
        correlaciones_significativas = []
        for i, col1 in enumerate(correlaciones.columns):
            for j, col2 in enumerate(correlaciones.columns):
                if i < j:  # Evitar duplicados y auto-correlaciones
                    corr = correlaciones.loc[col1, col2]
                    if abs(corr) > 0.5:  # Umbral para correlaciones significativas
                        fig = graficar_correlacion(df_merged, col1, col2, corr)
                        if fig:
                            correlaciones_significativas.append({
                                'variables': (col1, col2),
                                'correlacion': corr,
                                'grafico': fig
                            })

        # Preparar el diccionario de resultados
        resultados = {
            'correlaciones': correlaciones,
            'volatilidades': volatilidades,
            'tendencias': tendencias,
            'riesgos': riesgos,
            'sugerencias': sugerencias,
            'df_merged': df_merged,
            'correlaciones_significativas': correlaciones_significativas,
            'economic_analysis': None
        }

        # ========== 1. AN√ÅLISIS DE VARIABLES ECON√ìMICAS LOCAL ==========
        st.markdown("### üìà Variables Econ√≥micas de Argentina")
        economic_data = None
        
        try:
            # Inicializar ArgentinaDatos
            ad = ArgentinaDatos()
            
            # Obtener an√°lisis econ√≥mico completo
            economic_analysis = ad.get_economic_analysis()
            
            if economic_analysis and 'data' in economic_analysis and economic_analysis['data']:
                # Actualizar resultados con el an√°lisis econ√≥mico
                resultados['economic_analysis'] = economic_analysis
                
                # Mostrar resumen del an√°lisis econ√≥mico
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(
                        "Fase del Ciclo",
                        economic_analysis.get('cycle_phase', 'N/A'),
                        help="Fase actual del ciclo econ√≥mico detectada"
                    )
                
                with col2:
                    st.metric(
                        "Nivel de Riesgo",
                        economic_analysis.get('risk_level', 'N/A'),
                        help="Nivel de riesgo econ√≥mico actual"
                    )
                
                with col3:
                    # Contar datos disponibles
                    datos_disponibles = sum(1 for data in economic_analysis.get('data', {}).values() if data)
                    st.metric(
                        "Indicadores Disponibles",
                        f"{datos_disponibles}/6",
                        help="Cantidad de indicadores econ√≥micos disponibles"
                    )
                
                # Mostrar gr√°ficos de variables econ√≥micas
                st.markdown("#### üìä Gr√°ficos de Variables Econ√≥micas")
                
                # Gr√°fico de inflaci√≥n
                if 'inflacion' in economic_analysis.get('data', {}) and economic_analysis['data']['inflacion']:
                    try:
                        inflacion_chart = ad.create_inflacion_chart(economic_analysis['data']['inflacion'])
                        if inflacion_chart:
                            fig_inflacion = go.Figure(inflacion_chart)
                            st.plotly_chart(fig_inflacion, use_container_width=True)
                    except Exception as e:
                        st.error(f"Error generando gr√°fico de inflaci√≥n: {e}")
                
                # Gr√°fico de tasas
                if 'tasas' in economic_analysis.get('data', {}) and economic_analysis['data']['tasas']:
                    try:
                        tasas_chart = ad.create_tasas_chart(economic_analysis['data']['tasas'])
                        if tasas_chart:
                            fig_tasas = go.Figure(tasas_chart)
                            st.plotly_chart(fig_tasas, use_container_width=True)
                    except Exception as e:
                        st.error(f"Error generando gr√°fico de tasas: {e}")
                
                # Gr√°fico de riesgo pa√≠s
                if 'riesgo_pais' in economic_analysis.get('data', {}) and economic_analysis['data']['riesgo_pais']:
                    try:
                        riesgo_chart = ad.create_riesgo_pais_chart(economic_analysis['data']['riesgo_pais'])
                        if riesgo_chart:
                            fig_riesgo = go.Figure(riesgo_chart)
                            st.plotly_chart(fig_riesgo, use_container_width=True)
                    except Exception as e:
                        st.error(f"Error generando gr√°fico de riesgo pa√≠s: {e}")
                
                # Mostrar recomendaciones basadas en el an√°lisis econ√≥mico
                if 'sectors' in economic_analysis:
                    st.markdown("#### üí° Recomendaciones Basadas en Variables Econ√≥micas")
                    
                    # Sectores favorables
                    if economic_analysis['sectors'].get('favorable'):
                        st.success("**Sectores Favorables:**")
                        for sector in economic_analysis['sectors']['favorable']:
                            st.write(f"‚Ä¢ {sector}")
                    
                    # Sectores desfavorables
                    if economic_analysis['sectors'].get('unfavorable'):
                        st.warning("**Sectores Desfavorables:**")
                        for sector in economic_analysis['sectors']['unfavorable']:
                            st.write(f"‚Ä¢ {sector}")
                
                # Recomendaciones espec√≠ficas
                if 'recommendations' in economic_analysis and economic_analysis['recommendations']:
                    st.info("**Recomendaciones Espec√≠ficas:**")
                    for rec in economic_analysis['recommendations']:
                        st.write(f"‚Ä¢ {rec}")
                
                # Agregar datos econ√≥micos al an√°lisis intermarket
                economic_data = economic_analysis
                
            else:
                st.warning("No se encontraron datos econ√≥micos disponibles")
                economic_data = None
                
        except Exception as e:
            st.error(f"Error en el an√°lisis econ√≥mico: {str(e)}")
            economic_data = None
            
            # Skip BCRA data analysis as requested
            
            variables_macro = {}
            
            # Variables locales reales
            tickers_macro_local = {
                'MERVAL': '^MERV',
                'D√≥lar Oficial': 'USDOLLAR=X',
                'D√≥lar MEP': 'USDARS=X',
                'Bonos CER': 'GD30',
                'Bonos Dollar-Linked': 'GD30D',
                'Riesgo Pa√≠s': '^VIX',
            }
            
            # Variables internacionales
            tickers_macro_global = {
                'S&P 500': '^GSPC',
                'VIX': '^VIX',
                'D√≥lar Index': 'DX-Y.NYB',
                'Oro': 'GC=F',
                'Petr√≥leo': 'CL=F',
                'Cobre': 'HG=F',
                'Treasury 10Y': '^TNX',
                'Treasury 2Y': '^UST2YR',
            }
            
            # Obtener datos
            try:
                # Datos locales
                datos_local = yf.download(list(tickers_macro_local.values()), period=periodo_analisis)['Close']
                for nombre, ticker in tickers_macro_local.items():
                    if ticker in datos_local.columns and not datos_local[ticker].empty:
                        serie = datos_local[ticker].dropna()
                        if len(serie) > 0:
                            retornos = serie.pct_change().dropna()
                            momentum = (serie.iloc[-1] / serie.iloc[-ventana_momentum] - 1) * 100 if len(serie) >= ventana_momentum else 0
                            volatilidad = retornos.std() * np.sqrt(252) * 100
                            tendencia = 'Alcista' if momentum > 0 else 'Bajista'
                            
                            variables_macro[nombre] = {
                                'valor_actual': serie.iloc[-1],
                                'momentum': momentum,
                                'volatilidad': volatilidad,
                                'tendencia': tendencia,
                                'serie': serie
                            }
                
                # Datos globales
                datos_global = yf.download(list(tickers_macro_global.values()), period=periodo_analisis)['Close']
                for nombre, ticker in tickers_macro_global.items():
                    if ticker in datos_global.columns and not datos_global[ticker].empty:
                        serie = datos_global[ticker].dropna()
                        if len(serie) > 0:
                            retornos = serie.pct_change().dropna()
                            momentum = (serie.iloc[-1] / serie.iloc[-ventana_momentum] - 1) * 100 if len(serie) >= ventana_momentum else 0
                            volatilidad = retornos.std() * np.sqrt(252) * 100
                            tendencia = 'Alcista' if momentum > 0 else 'Bajista'
                            
                            variables_macro[nombre] = {
                                'valor_actual': serie.iloc[-1],
                                'momentum': momentum,
                                'volatilidad': volatilidad,
                                'tendencia': tendencia,
                                'serie': serie
                            }
                
                # Mostrar m√©tricas macro
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**Variables Locales**")
                    for nombre, datos in variables_macro.items():
                        if nombre in tickers_macro_local.values():
                            st.metric(
                                nombre,
                                f"{datos['valor_actual']:.2f}",
                                f"{datos['momentum']:+.1f}% ({datos['tendencia']})",
                                delta_color="normal" if datos['momentum'] > 0 else "inverse"
                            )
                
                with col2:
                    st.markdown("**Variables Globales**")
                    for nombre, datos in variables_macro.items():
                        if nombre in tickers_macro_global.values():
                            st.metric(
                                nombre,
                                f"{datos['valor_actual']:.2f}",
                                f"{datos['momentum']:+.1f}% ({datos['tendencia']})",
                                delta_color="normal" if datos['momentum'] > 0 else "inverse"
                            )
                
            except Exception as e:
                st.error(f"Error obteniendo datos macro: {e}")
                return
            
            # ========== 3. AN√ÅLISIS INTERMARKET LOCAL (DATOS REALES) ==========
            st.markdown("### üåê An√°lisis Intermarket Local (Datos Reales)")
            
            # Obtener datos reales de mercados locales
            try:
                # Variables locales reales
                tickers_macro_local = {
                    'MERVAL': '^MERV',
                    'D√≥lar Oficial': 'USDOLLAR=X',
                    'D√≥lar MEP': 'USDARS=X',
                    'Bonos CER': 'GD30',
                    'Bonos Dollar-Linked': 'GD30D',
                    'Riesgo Pa√≠s': '^VIX',
                }
                
                # Variables internacionales
                tickers_macro_global = {
                    'S&P 500': '^GSPC',
                    'VIX': '^VIX',
                    'D√≥lar Index': 'DX-Y.NYB',
                    'Oro': 'GC=F',
                    'Petr√≥leo': 'CL=F',
                    'Cobre': 'HG=F',
                    'Treasury 10Y': '^TNX',
                    'Treasury 2Y': '^UST2YR',
                }
                
                # Obtener datos hist√≥ricos
                datos_local = yf.download(list(tickers_macro_local.values()), period=periodo_analisis)['Close']
                datos_global = yf.download(list(tickers_macro_global.values()), period=periodo_analisis)['Close']
                
                # Procesar datos locales
                variables_macro = {}
                
                for nombre, ticker in tickers_macro_local.items():
                    if ticker in datos_local.columns and not datos_local[ticker].empty:
                        serie = datos_local[ticker].dropna()
                        if len(serie) > 0:
                            retornos = serie.pct_change().dropna()
                            momentum = (serie.iloc[-1] / serie.iloc[-ventana_momentum] - 1) * 100 if len(serie) >= ventana_momentum else 0
                            volatilidad = retornos.std() * np.sqrt(252) * 100
                            tendencia = 'Alcista' if momentum > 0 else 'Bajista'
                            
                            variables_macro[nombre] = {
                                'valor_actual': serie.iloc[-1],
                                'momentum': momentum,
                                'volatilidad': volatilidad,
                                'tendencia': tendencia,
                                'serie': serie
                            }
                
                # Procesar datos globales
                for nombre, ticker in tickers_macro_global.items():
                    if ticker in datos_global.columns and not datos_global[ticker].empty:
                        serie = datos_global[ticker].dropna()
                        if len(serie) > 0:
                            retornos = serie.pct_change().dropna()
                            momentum = (serie.iloc[-1] / serie.iloc[-ventana_momentum] - 1) * 100 if len(serie) >= ventana_momentum else 0
                            volatilidad = retornos.std() * np.sqrt(252) * 100
                            tendencia = 'Alcista' if momentum > 0 else 'Bajista'
                            
                            variables_macro[nombre] = {
                                'valor_actual': serie.iloc[-1],
                                'momentum': momentum,
                                'volatilidad': volatilidad,
                                'tendencia': tendencia,
                                'serie': serie
                            }
                
                # Mostrar m√©tricas macro
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**Variables Locales**")
                    for nombre, datos in variables_macro.items():
                        if nombre in tickers_macro_local:
                            st.metric(
                                nombre,
                                f"{datos['valor_actual']:.2f}",
                                f"{datos['momentum']:+.1f}% ({datos['tendencia']})",
                                delta_color="normal" if datos['momentum'] > 0 else "inverse"
                            )
                
                with col2:
                    st.markdown("**Variables Globales**")
                    for nombre, datos in variables_macro.items():
                        if nombre in tickers_macro_global:
                            st.metric(
                                nombre,
                                f"{datos['valor_actual']:.2f}",
                                f"{datos['momentum']:+.1f}% ({datos['tendencia']})",
                                delta_color="normal" if datos['momentum'] > 0 else "inverse"
                            )
                
                # ========== 4. MATRIZ DE CORRELACIONES ROBUSTA ==========
                st.markdown("### üìä Matriz de Correlaciones Intermarket")
                
                if len(variables_macro) >= 3:
                    # Crear DataFrame de retornos
                    retornos_df = pd.DataFrame()
                    for nombre, datos in variables_macro.items():
                        if 'serie' in datos:
                            retornos_df[nombre] = datos['serie'].pct_change().dropna()
                    
                    if not retornos_df.empty:
                        # Matriz de correlaciones
                        correlaciones = retornos_df.corr()
                        
                        # Gr√°fico de correlaciones mejorado
                        fig_corr = go.Figure(data=go.Heatmap(
                            z=correlaciones.values,
                            x=correlaciones.columns,
                            y=correlaciones.columns,
                            colorscale='RdBu',
                            zmid=0,
                            text=np.round(correlaciones.values, 2),
                            texttemplate="%{text}",
                            textfont={"size": 10},
                            hoverongaps=False
                        ))
                        
                        fig_corr.update_layout(
                            title="Matriz de Correlaciones Intermarket",
                            xaxis_title="Activos",
                            yaxis_title="Activos",
                            height=600,
                            width=800
                        )
                        
                        st.plotly_chart(fig_corr, use_container_width=True)
                        
                        # An√°lisis de divergencias mejorado
                        st.markdown("#### üîç An√°lisis de Divergencias")
                        
                        # Buscar divergencias entre activos
                        divergencias = []
                        for i, activo1 in enumerate(correlaciones.columns):
                            for j, activo2 in enumerate(correlaciones.columns):
                                if i < j:  # Evitar duplicados
                                    correlacion = correlaciones.iloc[i, j]
                                    if abs(correlacion) < 0.3:  # Baja correlaci√≥n
                                        divergencias.append({
                                            'Activo 1': activo1,
                                            'Activo 2': activo2,
                                            'Correlaci√≥n': correlacion,
                                            'Tipo': 'Divergencia' if correlacion < 0 else 'Baja correlaci√≥n'
                                        })
                        
                        if divergencias:
                            df_divergencias = pd.DataFrame(divergencias)
                            st.dataframe(df_divergencias.sort_values('Correlaci√≥n'))
                            
                            # Mostrar oportunidades de arbitraje
                            st.markdown("#### üí∞ Oportunidades de Arbitraje")
                            for div in divergencias[:5]:  # Mostrar top 5
                                if div['Correlaci√≥n'] < -0.5:
                                    st.warning(f"**Divergencia fuerte:** {div['Activo 1']} vs {div['Activo 2']} (r={div['Correlaci√≥n']:.2f})")
                                elif div['Correlaci√≥n'] < 0:
                                    st.info(f"**Divergencia moderada:** {div['Activo 1']} vs {div['Activo 2']} (r={div['Correlaci√≥n']:.2f})")
                        else:
                            st.info("No se detectaron divergencias significativas")
                
            except Exception as e:
                st.error(f"Error obteniendo datos macro: {e}")
                return
            
            # ========== 5. AN√ÅLISIS CAPM CON ACTIVOS DE PANELES ==========
            st.markdown("### üìà An√°lisis CAPM con Activos de Paneles")
            
            # Obtener activos de los paneles de la API
            try:
                paneles_disponibles = ['acciones', 'cedears', 'aDRs', 'titulosPublicos', 'obligacionesNegociables']
                tickers_por_panel, _ = obtener_tickers_por_panel(token_acceso, paneles_disponibles, 'Argentina')
                
                if tickers_por_panel:
                    st.success(f"‚úÖ Obtenidos {sum(len(tickers) for tickers in tickers_por_panel.values())} activos de los paneles")
                    
                    # Seleccionar activos para an√°lisis CAPM
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        panel_seleccionado = st.selectbox(
                            "Panel para an√°lisis CAPM",
                            list(tickers_por_panel.keys()),
                            help="Seleccione el panel de activos para an√°lisis CAPM"
                        )
                    
                    with col2:
                        cantidad_activos = st.slider(
                            "Cantidad de activos a analizar",
                            min_value=5,
                            max_value=50,
                            value=20,
                            help="Cantidad de activos para an√°lisis CAPM"
                        )
                    
                    # Obtener activos del panel seleccionado
                    activos_panel = tickers_por_panel.get(panel_seleccionado, [])
                    
                    if activos_panel:
                        # Tomar muestra aleatoria de activos
                        import random
                        activos_muestra = random.sample(activos_panel, min(cantidad_activos, len(activos_panel)))
                        
                        st.info(f"Analizando {len(activos_muestra)} activos del panel {panel_seleccionado}")
                        
                        # Obtener datos hist√≥ricos para an√°lisis CAPM
                        with st.spinner("Obteniendo datos hist√≥ricos para an√°lisis CAPM..."):
                            datos_capm = {}
                            for activo in activos_muestra:
                                try:
                                    # Obtener datos hist√≥ricos del activo
                                    df_activo = obtener_serie_historica_iol(
                                        token_acceso, 'BCBA', activo, 
                                        (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d'),
                                        datetime.now().strftime('%Y-%m-%d'),
                                        'SinAjustar'
                                    )
                                    
                                    if df_activo is not None and not df_activo.empty:
                                        datos_capm[activo] = df_activo
                                except Exception as e:
                                    continue
                            
                            if datos_capm:
                                st.success(f"‚úÖ Datos obtenidos para {len(datos_capm)} activos")
                                
                                # Realizar an√°lisis CAPM
                                resultados_capm = []
                                
                                for activo, df in datos_capm.items():
                                    try:
                                        # Calcular retornos del activo
                                        if 'close' in df.columns:
                                            precios_activo = df['close']
                                            retornos_activo = precios_activo.pct_change().dropna()
                                            
                                            # Usar MERVAL como benchmark
                                            if 'MERVAL' in variables_macro and 'serie' in variables_macro['MERVAL']:
                                                precios_mercado = variables_macro['MERVAL']['serie']
                                                retornos_mercado = precios_mercado.pct_change().dropna()
                                                
                                                # Alinear fechas
                                                fechas_comunes = retornos_activo.index.intersection(retornos_mercado.index)
                                                if len(fechas_comunes) > 30:  # M√≠nimo 30 d√≠as
                                                    retornos_activo_alineados = retornos_activo.loc[fechas_comunes]
                                                    retornos_mercado_alineados = retornos_mercado.loc[fechas_comunes]
                                                    
                                                    # Calcular CAPM
                                                    capm_metrics = calcular_alpha_beta(
                                                        retornos_activo_alineados, 
                                                        retornos_mercado_alineados
                                                    )
                                                    
                                                    resultados_capm.append({
                                                        'Activo': activo,
                                                        'Beta': capm_metrics['beta'],
                                                        'Alpha': capm_metrics['alpha'],
                                                        'R¬≤': capm_metrics['r_squared'],
                                                        'Sharpe': capm_metrics['sharpe_ratio'],
                                                        'Volatilidad': capm_metrics['volatilidad']
                                                    })
                                    except Exception as e:
                                        continue
                                
                                if resultados_capm:
                                    # Mostrar resultados CAPM
                                    st.markdown("#### üìä Resultados del An√°lisis CAPM")
                                    
                                    df_capm = pd.DataFrame(resultados_capm)
                                    st.dataframe(df_capm, use_container_width=True)
                                    
                                    # Clasificar estrategias
                                    estrategias_clasificadas = {
                                        'Index Tracker': [],
                                        'Traditional Long-Only': [],
                                        'Smart Beta': [],
                                        'Hedge Fund': []
                                    }
                                    
                                    for resultado in resultados_capm:
                                        beta = resultado['Beta']
                                        alpha = resultado['Alpha']
                                        
                                        if abs(beta - 1.0) < 0.1 and abs(alpha) < 0.01:
                                            estrategias_clasificadas['Index Tracker'].append(resultado)
                                        elif abs(beta - 1.0) < 0.1 and alpha > 0.01:
                                            estrategias_clasificadas['Traditional Long-Only'].append(resultado)
                                        elif beta > 1.2 or beta < 0.8:
                                            estrategias_clasificadas['Smart Beta'].append(resultado)
                                        elif abs(beta) < 0.3 and alpha > 0.01:
                                            estrategias_clasificadas['Hedge Fund'].append(resultado)
                                    
                                    # Mostrar clasificaci√≥n
                                    st.markdown("#### üéØ Clasificaci√≥n por Estrategia")
                                    
                                    col1, col2 = st.columns(2)
                                    
                                    with col1:
                                        for estrategia, activos in estrategias_clasificadas.items():
                                            if activos:
                                                st.write(f"**{estrategia}** ({len(activos)} activos):")
                                                for activo in activos[:5]:  # Mostrar primeros 5
                                                    st.write(f"‚Ä¢ {activo['Activo']} (Œ≤={activo['Beta']:.2f}, Œ±={activo['Alpha']:.3f})")
                                                if len(activos) > 5:
                                                    st.write(f"... y {len(activos)-5} m√°s")
                                                st.write("")
                                    
                                    with col2:
                                        # Gr√°fico de dispersi√≥n Beta vs Alpha
                                        fig_scatter = go.Figure()
                                        
                                        for estrategia, activos in estrategias_clasificadas.items():
                                            if activos:
                                                betas = [a['Beta'] for a in activos]
                                                alphas = [a['Alpha'] for a in activos]
                                                nombres = [a['Activo'] for a in activos]
                                                
                                                fig_scatter.add_trace(go.Scatter(
                                                    x=betas,
                                                    y=alphas,
                                                    mode='markers+text',
                                                    name=estrategia,
                                                    text=nombres,
                                                    textposition="top center",
                                                    hovertemplate="<b>%{text}</b><br>Beta: %{x:.2f}<br>Alpha: %{y:.3f}<extra></extra>"
                                                ))
                                        
                                        fig_scatter.update_layout(
                                            title="Dispersi√≥n Beta vs Alpha por Estrategia",
                                            xaxis_title="Beta",
                                            yaxis_title="Alpha",
                                            height=500
                                        )
                                        
                                        st.plotly_chart(fig_scatter, use_container_width=True)
                                
                            else:
                                st.warning("No se pudieron obtener datos suficientes para an√°lisis CAPM")
                    else:
                        st.warning(f"No hay activos disponibles en el panel {panel_seleccionado}")
                else:
                    st.error("No se pudieron obtener activos de los paneles")
                    
            except Exception as e:
                st.error(f"Error en an√°lisis CAPM: {e}")
            
            # ========== 6. AN√ÅLISIS INTERMARKET INTERNACIONAL ==========
            st.markdown("### üåç An√°lisis Intermarket Internacional")
            
            # Curva de tasas (simulada)
            if 'Treasury 10Y' in variables_macro and 'Treasury 2Y' in variables_macro:
                tasa_10y = variables_macro['Treasury 10Y']['valor_actual']
                tasa_2y = variables_macro['Treasury 2Y']['valor_actual']
                spread_curva = tasa_10y - tasa_2y
                
                st.metric(
                    "Spread Curva de Tasas (10Y - 2Y)",
                    f"{spread_curva:.2f}%",
                    "Recesi√≥n" if spread_curva < 0 else "Expansi√≥n",
                    delta_color="inverse" if spread_curva < 0 else "normal"
                )
                
                # Interpretaci√≥n de la curva
                if spread_curva < 0:
                    st.warning("‚ö†Ô∏è Curva invertida - Se√±al de recesi√≥n potencial")
                elif spread_curva < 0.5:
                    st.info("üìä Curva plana - Transici√≥n de ciclo")
                else:
                    st.success("‚úÖ Curva normal - Ciclo expansivo")
            
            # An√°lisis D√≥lar vs Commodities
            if 'D√≥lar Index' in variables_macro and 'Oro' in variables_macro:
                dolar_momentum = variables_macro['D√≥lar Index']['momentum']
                oro_momentum = variables_macro['Oro']['momentum']
                
                st.markdown("**üí± D√≥lar vs Commodities**")
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("D√≥lar Index", f"{dolar_momentum:+.1f}%")
                with col2:
                    st.metric("Oro", f"{oro_momentum:+.1f}%")
                
                # Interpretaci√≥n
                if dolar_momentum > 0 and oro_momentum < 0:
                    st.info("üìà D√≥lar fuerte, commodities d√©biles - Ciclo deflacionario")
                elif dolar_momentum < 0 and oro_momentum > 0:
                    st.info("üìâ D√≥lar d√©bil, commodities fuertes - Ciclo inflacionario")
                else:
                    st.info("üîÑ Movimiento mixto - Ciclo de transici√≥n")
            
            # Skip economic cycle detection as requested
            
            # ========== 5. SUGERENCIAS DE ACTIVOS SEG√öN CICLO ==========
            st.markdown("### üí° Sugerencias de Activos por Ciclo")
            
            # Matriz de sugerencias
            matriz_sugerencias = {
                "Expansi√≥n": {
                    "Argentina": ["Acciones locales", "CEDEARs", "Bonos CER"],
                    "EEUU": ["S&P 500", "Tecnolog√≠a", "Consumo Discrecional"],
                    "Comentario": "Flujo de capitales, suba de consumo"
                },
                "Auge": {
                    "Argentina": ["Acciones value", "Activos hard", "Oro"],
                    "EEUU": ["Value stocks", "Real estate", "Commodities"],
                    "Comentario": "Protecci√≥n ante sobrevaloraci√≥n"
                },
                "Contracci√≥n": {
                    "Argentina": ["Bonos tasa fija", "D√≥lar MEP", "D√≥lar-linked"],
                    "EEUU": ["Treasury bonds", "Defensive stocks", "Cash"],
                    "Comentario": "Fuga al refugio, evitar acciones c√≠clicas"
                },
                "Recesi√≥n": {
                    "Argentina": ["CEDEARs defensivos", "Oro", "Bonos soberanos"],
                    "EEUU": ["Consumer staples", "Healthcare", "Utilities"],
                    "Comentario": "Baja actividad, refugio y liquidez"
                }
            }
            
            sugerencias = matriz_sugerencias.get(fase_ciclo, {})
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üá¶üá∑ Argentina**")
                for activo in sugerencias.get("Argentina", []):
                    st.write(f"‚Ä¢ {activo}")
            
            with col2:
                st.markdown("**üá∫üá∏ EEUU**")
                for activo in sugerencias.get("EEUU", []):
                    st.write(f"‚Ä¢ {activo}")
            
            st.info(f"**üí¨ Comentario:** {sugerencias.get('Comentario', '')}")
            
            # ========== 6. AN√ÅLISIS IA (OPCIONAL) ==========
            if incluir_ia and gemini_api_key:
                st.markdown("### ü§ñ An√°lisis IA del Ciclo")
                
                # Preparar datos para IA
                resumen_variables = []
                for nombre, datos in variables_macro.items():
                    resumen = (
                        f"{nombre}: Valor={datos['valor_actual']:.2f}, "
                        f"Momentum={datos['momentum']:+.1f}%, "
                        f"Tendencia={datos['tendencia']}"
                    )
                    resumen_variables.append(resumen)
                
                # Prompt para IA
                prompt_ia = f"""
                Analiza el siguiente resumen de variables macroecon√≥micas y de mercado:

                {chr(10).join(resumen_variables)}

                Diagn√≥stico de ciclo actual: {fase_ciclo} (puntuaci√≥n: {puntuacion_ciclo})

                Proporciona:
                1. An√°lisis detallado del ciclo econ√≥mico actual
                2. Factores intermarket m√°s relevantes
                3. Sugerencias espec√≠ficas de activos para Argentina y EEUU
                4. Riesgos y oportunidades principales

                Responde en espa√±ol, formato ejecutivo.
                """
                
                try:
                    import google.generativeai as genai
                    genai.configure(api_key=gemini_api_key)
                    model = genai.GenerativeModel('gemini-1.5-flash')
                    response = model.generate_content(prompt_ia)
                    
                    if response and response.text:
                        st.markdown(response.text)
                    else:
                        st.warning("No se pudo obtener an√°lisis de IA")
                except Exception as e:
                    st.error(f"Error en an√°lisis IA: {e}")
            
            # ========== 7. GR√ÅFICOS INTERMARKET ==========
            st.markdown("### üìà Gr√°ficos Intermarket")
            
            # Gr√°fico de evoluci√≥n de variables clave
            if len(variables_macro) >= 3:
                fig_evolucion = go.Figure()
                
                # Normalizar series para comparaci√≥n
                for nombre, datos in variables_macro.items():
                    if 'serie' in datos and len(datos['serie']) > 0:
                        serie_norm = (datos['serie'] / datos['serie'].iloc[0]) * 100
                        fig_evolucion.add_trace(go.Scatter(
                            x=serie_norm.index,
                            y=serie_norm.values,
                            mode='lines',
                            name=nombre,
                            line=dict(width=2)
                        ))
                
                fig_evolucion.update_layout(
                    title="Evoluci√≥n Normalizada de Variables Intermarket",
                    xaxis_title="Fecha",
                    yaxis_title="Valor Normalizado (%)",
                    height=500,
                    hovermode='x unified'
                )
                
                st.plotly_chart(fig_evolucion, use_container_width=True)
            
            # ========== 8. RESUMEN EJECUTIVO ==========
            st.markdown("### üìã Resumen Ejecutivo")
            
            resumen_ejecutivo = f"""
            **üéØ Ciclo Econ√≥mico Detectado:** {fase_ciclo}
            
            **üìä Indicadores Clave:**
            - Puntuaci√≥n de ciclo: {puntuacion_ciclo}
            - Principales divergencias: {len(divergencias) if 'divergencias' in locals() else 0} detectadas
            - Volatilidad promedio: {np.mean([d['volatilidad'] for d in variables_macro.values()]):.1f}%
            
            **üí° Recomendaciones:**
            - **Argentina:** {', '.join(sugerencias.get('Argentina', []))}
            - **EEUU:** {', '.join(sugerencias.get('EEUU', []))}
            
            **‚ö†Ô∏è Riesgos Principales:**
            - {'Curva de tasas invertida' if 'spread_curva' in locals() and spread_curva < 0 else 'Ninguno cr√≠tico detectado'}
            - {'VIX elevado' if 'VIX' in variables_macro and variables_macro['VIX']['valor_actual'] > 30 else 'Volatilidad normal'}
            
            **üìà Oportunidades:**
            - Ciclo actual favorece activos {fase_ciclo.lower()}
            - {'Divergencias aprovechables' if 'divergencias' in locals() and len(divergencias) > 0 else 'Correlaciones normales'}
            """
            
            st.markdown(resumen_ejecutivo)
            
            # Guardar resultados en session state
            st.session_state['analisis_intermarket'] = {
                'fase_ciclo': fase_ciclo,
                'puntuacion': puntuacion_ciclo,
                'variables_macro': variables_macro,
                'sugerencias': sugerencias,
                'fecha_analisis': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }

            # Preparar el diccionario de resultados
            resultados = {
                'correlaciones': correlaciones,
                'volatilidades': volatilidades,
                'tendencias': tendencias,
                'riesgos': riesgos,
                'sugerencias': sugerencias,
                'df_merged': df_merged,
                'correlaciones_significativas': correlaciones_significativas,
                'fase_ciclo': fase_ciclo,
                'puntuacion_ciclo': puntuacion_ciclo,
                'variables_macro': variables_macro
            }

            return resultados

    except Exception as e:
        st.error(f"Error en el an√°lisis global: {str(e)}")
        return None

class CAPMAnalyzer:
    """
    Clase para an√°lisis CAPM (Capital Asset Pricing Model) de activos individuales
    """
    
    def __init__(self, risk_free_rate=0.0):
        self.risk_free_rate = risk_free_rate
        self.analyses = {}
    
    def calculate_asset_capm(self, asset_returns, market_returns, asset_name="Asset"):
        """
        Calcula m√©tricas CAPM para un activo individual
        
        Args:
            asset_returns (pd.Series): Retornos del activo
            market_returns (pd.Series): Retornos del mercado (benchmark)
            asset_name (str): Nombre del activo
            
        Returns:
            dict: M√©tricas CAPM del activo
        """
        # Alinear series
        aligned_data = pd.concat([asset_returns, market_returns], axis=1).dropna()
        if len(aligned_data) < 10:
            return None
            
        asset_aligned = aligned_data.iloc[:, 0]
        market_aligned = aligned_data.iloc[:, 1]
        
        # Regresi√≥n CAPM: R_asset - Rf = Œ± + Œ≤(R_market - Rf)
        market_excess = market_aligned - self.risk_free_rate/252  # Diario
        asset_excess = asset_aligned - self.risk_free_rate/252
        
        slope, intercept, r_value, p_value, std_err = linregress(market_excess, asset_excess)
        
        # Calcular m√©tricas adicionales
        tracking_error = np.std(asset_excess - slope * market_excess) * np.sqrt(252)
        information_ratio = intercept * 252 / tracking_error if tracking_error != 0 else 0
        treynor_ratio = (asset_aligned.mean() * 252 - self.risk_free_rate) / slope if slope != 0 else 0
        
        result = {
            'asset_name': asset_name,
            'alpha': intercept * 252,  # Anualizado
            'beta': slope,
            'r_squared': r_value ** 2,
            'p_value': p_value,
            'tracking_error': tracking_error,
            'information_ratio': information_ratio,
            'treynor_ratio': treynor_ratio,
            'volatility': asset_aligned.std() * np.sqrt(252),
            'sharpe_ratio': (asset_aligned.mean() * 252 - self.risk_free_rate) / (asset_aligned.std() * np.sqrt(252)),
            'observations': len(aligned_data)
        }
        
        self.analyses[asset_name] = result
        return result
    
    def classify_asset_strategy(self, capm_metrics):
        """
        Clasifica el activo seg√∫n su estrategia de inversi√≥n basada en CAPM
        
        Args:
            capm_metrics (dict): M√©tricas CAPM del activo
            
        Returns:
            dict: Clasificaci√≥n de estrategia
        """
        beta = capm_metrics.get('beta', 1.0)
        alpha = capm_metrics.get('alpha', 0)
        r_squared = capm_metrics.get('r_squared', 0)
        
        # Clasificaci√≥n seg√∫n las estrategias especificadas
        if abs(beta - 1.0) < 0.1 and abs(alpha) < 0.02:
            strategy_type = "Index Tracker"
            description = "Replica el rendimiento del benchmark (Œ≤ ‚âà 1, Œ± ‚âà 0)"
            characteristics = ["Baja volatilidad", "Rendimiento en l√≠nea con mercado", "Bajo tracking error"]
        elif beta >= 0.9 and beta <= 1.1 and alpha > 0.02:
            strategy_type = "Traditional Long-Only"
            description = "Supera al mercado con retorno adicional no correlacionado (Œ≤ ‚âà 1, Œ± > 0)"
            characteristics = ["Alfa positivo", "Riesgo similar al mercado", "Generaci√≥n de valor agregado"]
        elif beta > 1.1 or beta < 0.9:
            strategy_type = "Smart Beta"
            description = "Ajusta din√°micamente la exposici√≥n al mercado (Œ≤ ‚â† 1, Œ± ‚âà 0)"
            characteristics = ["Beta din√°mico", "Ajuste t√°ctico", "Gesti√≥n de riesgo activa"]
        elif abs(beta) < 0.3 and alpha > 0.02:
            strategy_type = "Hedge Fund"
            description = "Retornos absolutos no correlacionados con el mercado (Œ≤ ‚âà 0, Œ± > 0)"
            characteristics = ["Baja correlaci√≥n", "Retornos absolutos", "Gesti√≥n alternativa"]
        else:
            strategy_type = "Mixed Strategy"
            description = "Estrategia mixta con caracter√≠sticas combinadas"
            characteristics = ["Perfil √∫nico", "Caracter√≠sticas mixtas", "An√°lisis individual requerido"]
        
        return {
            'strategy_type': strategy_type,
            'description': description,
            'characteristics': characteristics,
            'beta': beta,
            'alpha': alpha,
            'r_squared': r_squared
        }

class DefensiveAssetFinder:
    """
    Clase para encontrar activos defensivos basados en an√°lisis CAPM
    """
    
    def __init__(self, token_portador):
        self.token_portador = token_portador
        self.capm_analyzer = CAPMAnalyzer()
    
    def find_defensive_assets(self, market_returns, min_beta=0.3, max_beta=0.8, min_alpha=-0.05):
        """
        Encuentra activos defensivos basados en criterios CAPM
        
        Args:
            market_returns (pd.Series): Retornos del mercado
            min_beta (float): Beta m√≠nimo para activos defensivos
            max_beta (float): Beta m√°ximo para activos defensivos
            min_alpha (float): Alpha m√≠nimo aceptable
            
        Returns:
            list: Lista de activos defensivos con sus m√©tricas
        """
        defensive_assets = []
        
        # Obtener lista de activos disponibles
        try:
            # Usar paneles conocidos de acciones defensivas
            paneles_defensivos = ['Panel General', 'Panel L√≠deres']
            tickers_por_panel = obtener_tickers_por_panel(
                self.token_portador, 
                paneles_defensivos, 
                pais='Argentina'
            )
            
            for panel, tickers in tickers_por_panel.items():
                for ticker in tickers[:20]:  # Limitar a 20 por panel para eficiencia
                    try:
                        # Obtener datos hist√≥ricos del ticker
                        df_historico = obtener_serie_historica_iol(
                            self.token_portador,
                            'BCBA',  # Asumir mercado BCBA
                            ticker,
                            (datetime.now() - timedelta(days=252)).strftime('%Y-%m-%d'),
                            datetime.now().strftime('%Y-%m-%d'),
                            "SinAjustar"
                        )
                        
                        if df_historico is not None and len(df_historico) > 50:
                            # Calcular retornos
                            asset_returns = df_historico['close'].pct_change().dropna()
                            
                            # An√°lisis CAPM
                            capm_metrics = self.capm_analyzer.calculate_asset_capm(
                                asset_returns, market_returns, ticker
                            )
                            
                            if capm_metrics:
                                beta = capm_metrics['beta']
                                alpha = capm_metrics['alpha']
                                
                                # Verificar criterios defensivos
                                if (min_beta <= beta <= max_beta and 
                                    alpha >= min_alpha and 
                                    capm_metrics['r_squared'] > 0.3):
                                    
                                    defensive_assets.append({
                                        'ticker': ticker,
                                        'capm_metrics': capm_metrics,
                                        'strategy': self.capm_analyzer.classify_asset_strategy(capm_metrics),
                                        'defensive_score': self._calculate_defensive_score(capm_metrics)
                                    })
                    
                    except Exception as e:
                        print(f"Error procesando {ticker}: {str(e)}")
                        continue
            
            # Ordenar por score defensivo
            defensive_assets.sort(key=lambda x: x['defensive_score'], reverse=True)
            
        except Exception as e:
            print(f"Error en b√∫squeda de activos defensivos: {str(e)}")
        
        return defensive_assets
    
    def _calculate_defensive_score(self, capm_metrics):
        """
        Calcula un score defensivo basado en m√©tricas CAPM
        
        Args:
            capm_metrics (dict): M√©tricas CAPM del activo
            
        Returns:
            float: Score defensivo (0-100)
        """
        beta = capm_metrics['beta']
        alpha = capm_metrics['alpha']
        volatility = capm_metrics['volatility']
        sharpe = capm_metrics['sharpe_ratio']
        
        # Score basado en beta (menor = m√°s defensivo)
        beta_score = max(0, 100 - abs(beta - 0.5) * 100)
        
        # Score basado en alpha (mayor = mejor)
        alpha_score = min(100, max(0, (alpha + 0.1) * 500))
        
        # Score basado en volatilidad (menor = m√°s defensivo)
        vol_score = max(0, 100 - volatility * 100)
        
        # Score basado en Sharpe (mayor = mejor)
        sharpe_score = min(100, max(0, sharpe * 50 + 50))
        
        # Ponderaci√≥n: Beta 40%, Alpha 30%, Volatilidad 20%, Sharpe 10%
        total_score = (beta_score * 0.4 + alpha_score * 0.3 + 
                      vol_score * 0.2 + sharpe_score * 0.1)
        
        return total_score

class InvestmentStrategyRecommender:
    """
    Clase para generar recomendaciones de estrategias de inversi√≥n basadas en an√°lisis CAPM
    """
    
    def __init__(self, token_portador, gemini_api_key=None):
        self.token_portador = token_portador
        self.gemini_api_key = gemini_api_key
        self.capm_analyzer = CAPMAnalyzer()
        self.defensive_finder = DefensiveAssetFinder(token_portador)
    
    def generate_market_recommendations(self, market_conditions, portfolio_analysis=None):
        """
        Genera recomendaciones basadas en condiciones de mercado
        
        Args:
            market_conditions (dict): Condiciones actuales del mercado
            portfolio_analysis (dict): An√°lisis del portafolio actual (opcional)
            
        Returns:
            dict: Recomendaciones de estrategia
        """
        recommendations = {
            'market_phase': self._determine_market_phase(market_conditions),
            'recommended_strategies': [],
            'defensive_assets': [],
            'risk_adjustments': {},
            'implementation_notes': []
        }
        
        # Determinar estrategias recomendadas seg√∫n fase del mercado
        market_phase = recommendations['market_phase']
        
        if market_phase == 'Bear Market' or market_phase == 'High Volatility':
            recommendations['recommended_strategies'] = [
                {
                    'strategy': 'Defensive Positioning',
                    'description': 'Reducir exposici√≥n a acciones c√≠clicas, aumentar activos defensivos',
                    'target_beta': 0.3,
                    'max_beta': 0.8,
                    'priority': 'High'
                },
                {
                    'strategy': 'Hedge Fund Approach',
                    'description': 'Buscar activos con baja correlaci√≥n y alpha positivo',
                    'target_beta': 0.0,
                    'max_beta': 0.3,
                    'priority': 'Medium'
                }
            ]
            
            # Buscar activos defensivos
            try:
                market_returns = self._get_market_returns()
                defensive_assets = self.defensive_finder.find_defensive_assets(
                    market_returns, min_beta=0.2, max_beta=0.7, min_alpha=-0.03
                )
                recommendations['defensive_assets'] = defensive_assets[:10]  # Top 10
            except Exception as e:
                print(f"Error buscando activos defensivos: {str(e)}")
        
        elif market_phase == 'Bull Market':
            recommendations['recommended_strategies'] = [
                {
                    'strategy': 'Smart Beta',
                    'description': 'Aumentar exposici√≥n t√°ctica con beta din√°mico',
                    'target_beta': 1.2,
                    'max_beta': 1.5,
                    'priority': 'High'
                },
                {
                    'strategy': 'Traditional Long-Only',
                    'description': 'Mantener exposici√≥n al mercado con alpha positivo',
                    'target_beta': 1.0,
                    'max_beta': 1.1,
                    'priority': 'Medium'
                }
            ]
        
        elif market_phase == 'Sideways Market':
            recommendations['recommended_strategies'] = [
                {
                    'strategy': 'Index Tracker',
                    'description': 'Mantener exposici√≥n neutral al mercado',
                    'target_beta': 1.0,
                    'max_beta': 1.0,
                    'priority': 'High'
                },
                {
                    'strategy': 'Hedge Fund',
                    'description': 'Buscar oportunidades no correlacionadas',
                    'target_beta': 0.0,
                    'max_beta': 0.3,
                    'priority': 'Medium'
                }
            ]
        
        # Ajustes de riesgo
        recommendations['risk_adjustments'] = self._calculate_risk_adjustments(
            market_phase, portfolio_analysis
        )
        
        # Notas de implementaci√≥n
        recommendations['implementation_notes'] = self._generate_implementation_notes(
            recommendations
        )
        
        return recommendations
    
    def _determine_market_phase(self, market_conditions):
        """
        Determina la fase actual del mercado
        """
        vix = market_conditions.get('VIX', {}).get('valor_actual', 20)
        trend = market_conditions.get('tendencia_mercado', 'neutral')
        volatility = market_conditions.get('volatilidad', 'normal')
        
        if vix > 30 or volatility == 'alta':
            return 'High Volatility'
        elif trend == 'bajista' or vix > 25:
            return 'Bear Market'
        elif trend == 'alcista' and vix < 20:
            return 'Bull Market'
        else:
            return 'Sideways Market'
    
    def _get_market_returns(self):
        """
        Obtiene retornos del mercado (MERVAL)
        """
        try:
            merval_data = yf.download('^MERV', 
                                    start=(datetime.now() - timedelta(days=252)).strftime('%Y-%m-%d'),
                                    end=datetime.now().strftime('%Y-%m-%d'))['Close']
            return merval_data.pct_change().dropna()
        except Exception as e:
            print(f"Error obteniendo datos del MERVAL: {str(e)}")
            return None
    
    def _calculate_risk_adjustments(self, market_phase, portfolio_analysis):
        """
        Calcula ajustes de riesgo seg√∫n la fase del mercado
        """
        adjustments = {
            'position_sizing': {},
            'stop_loss': {},
            'diversification': {}
        }
        
        if market_phase in ['Bear Market', 'High Volatility']:
            adjustments['position_sizing'] = {
                'max_position': 0.05,  # 5% m√°ximo por posici√≥n
                'total_equity': 0.6,   # 60% m√°ximo en acciones
                'cash_reserve': 0.4    # 40% en efectivo
            }
            adjustments['stop_loss'] = {
                'tight_stops': True,
                'stop_percentage': 0.05  # 5% stop loss
            }
            adjustments['diversification'] = {
                'min_positions': 15,
                'max_sector_weight': 0.15  # 15% m√°ximo por sector
            }
        
        elif market_phase == 'Bull Market':
            adjustments['position_sizing'] = {
                'max_position': 0.10,  # 10% m√°ximo por posici√≥n
                'total_equity': 0.9,   # 90% m√°ximo en acciones
                'cash_reserve': 0.1    # 10% en efectivo
            }
            adjustments['stop_loss'] = {
                'tight_stops': False,
                'stop_percentage': 0.10  # 10% stop loss
            }
            adjustments['diversification'] = {
                'min_positions': 10,
                'max_sector_weight': 0.25  # 25% m√°ximo por sector
            }
        
        else:  # Sideways Market
            adjustments['position_sizing'] = {
                'max_position': 0.07,  # 7% m√°ximo por posici√≥n
                'total_equity': 0.75,  # 75% m√°ximo en acciones
                'cash_reserve': 0.25   # 25% en efectivo
            }
            adjustments['stop_loss'] = {
                'tight_stops': True,
                'stop_percentage': 0.07  # 7% stop loss
            }
            adjustments['diversification'] = {
                'min_positions': 12,
                'max_sector_weight': 0.20  # 20% m√°ximo por sector
            }
        
        return adjustments
    
    def _generate_implementation_notes(self, recommendations):
        """
        Genera notas de implementaci√≥n para las recomendaciones
        """
        notes = []
        
        for strategy in recommendations['recommended_strategies']:
            if strategy['strategy'] == 'Defensive Positioning':
                notes.append({
                    'type': 'warning',
                    'message': 'Reducir exposici√≥n a sectores c√≠clicos (financiero, industrial)',
                    'action': 'Aumentar peso en utilities, consumer staples, healthcare'
                })
                notes.append({
                    'type': 'info',
                    'message': 'Considerar bonos corporativos de alta calidad',
                    'action': 'Evaluar bonos con rating A o superior'
                })
            
            elif strategy['strategy'] == 'Smart Beta':
                notes.append({
                    'type': 'info',
                    'message': 'Implementar rebalanceo t√°ctico',
                    'action': 'Ajustar pesos cada 2-4 semanas seg√∫n condiciones'
                })
            
            elif strategy['strategy'] == 'Hedge Fund Approach':
                notes.append({
                    'type': 'warning',
                    'message': 'Buscar activos con correlaci√≥n negativa',
                    'action': 'Evaluar ETFs inversos o estrategias de cobertura'
                })
        
        return notes

def mostrar_analisis_capm_y_estrategias(token_acceso, gemini_api_key=None):
    """
    Muestra an√°lisis CAPM y recomendaciones de estrategias de inversi√≥n
    """
    st.header("üìä An√°lisis CAPM y Estrategias de Inversi√≥n")
    
    # Inicializar el recomendador de estrategias
    recommender = InvestmentStrategyRecommender(token_acceso, gemini_api_key)
    
    # Obtener condiciones de mercado del an√°lisis intermarket
    if 'analisis_intermarket' in st.session_state:
        market_conditions = st.session_state['analisis_intermarket'].get('variables_macro', {})
        fase_ciclo = st.session_state['analisis_intermarket'].get('fase_ciclo', 'Desconocida')
        resultados_capm = st.session_state['analisis_intermarket'].get('resultados_capm', [])
        bcra_data = st.session_state['analisis_intermarket'].get('bcra_data', {})
        economic_data = st.session_state['analisis_intermarket'].get('economic_data', {})
    else:
        st.warning("‚ö†Ô∏è Ejecute primero el an√°lisis intermarket para obtener condiciones de mercado")
        return
    
    # Mostrar fase del mercado
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Fase del Ciclo", fase_ciclo)
    
    with col2:
        vix_actual = market_conditions.get('VIX', {}).get('valor_actual', 0)
        st.metric("VIX Actual", f"{vix_actual:.1f}")
    
    # Mostrar resultados CAPM si est√°n disponibles
    if resultados_capm:
        st.subheader("üìä Resultados del An√°lisis CAPM")
        
        # Crear DataFrame con resultados
        df_capm = pd.DataFrame(resultados_capm)
        
        # Mostrar m√©tricas resumidas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            beta_promedio = df_capm['Beta'].mean()
            st.metric("Beta Promedio", f"{beta_promedio:.2f}")
        
        with col2:
            alpha_promedio = df_capm['Alpha'].mean()
            st.metric("Alpha Promedio", f"{alpha_promedio:.3f}")
        
        with col3:
            r2_promedio = df_capm['R¬≤'].mean()
            st.metric("R¬≤ Promedio", f"{r2_promedio:.2f}")
        
        with col4:
            sharpe_promedio = df_capm['Sharpe'].mean()
            st.metric("Sharpe Promedio", f"{sharpe_promedio:.2f}")
        
        # Clasificar estrategias
        estrategias_clasificadas = {
            'Index Tracker': [],
            'Traditional Long-Only': [],
            'Smart Beta': [],
            'Hedge Fund': []
        }
        
        for _, row in df_capm.iterrows():
            beta = row['Beta']
            alpha = row['Alpha']
            
            if abs(beta - 1.0) < 0.1 and abs(alpha) < 0.01:
                estrategias_clasificadas['Index Tracker'].append(row.to_dict())
            elif abs(beta - 1.0) < 0.1 and alpha > 0.01:
                estrategias_clasificadas['Traditional Long-Only'].append(row.to_dict())
            elif beta > 1.2 or beta < 0.8:
                estrategias_clasificadas['Smart Beta'].append(row.to_dict())
            elif abs(beta) < 0.3 and alpha > 0.01:
                estrategias_clasificadas['Hedge Fund'].append(row.to_dict())
        
        # Mostrar clasificaci√≥n de estrategias
        st.subheader("üéØ Clasificaci√≥n por Estrategia")
        
        col1, col2 = st.columns(2)
        
        with col1:
            for estrategia, activos in estrategias_clasificadas.items():
                if activos:
                    st.write(f"**{estrategia}** ({len(activos)} activos):")
                    for activo in activos[:5]:  # Mostrar primeros 5
                        st.write(f"‚Ä¢ {activo['Activo']} (Œ≤={activo['Beta']:.2f}, Œ±={activo['Alpha']:.3f})")
                    if len(activos) > 5:
                        st.write(f"... y {len(activos)-5} m√°s")
                    st.write("")
        
        with col2:
            # Gr√°fico de dispersi√≥n Beta vs Alpha
            fig_scatter = go.Figure()
            
            for estrategia, activos in estrategias_clasificadas.items():
                if activos:
                    betas = [a['Beta'] for a in activos]
                    alphas = [a['Alpha'] for a in activos]
                    nombres = [a['Activo'] for a in activos]
                    
                    fig_scatter.add_trace(go.Scatter(
                        x=betas,
                        y=alphas,
                        mode='markers+text',
                        name=estrategia,
                        text=nombres,
                        textposition="top center",
                        hovertemplate="<b>%{text}</b><br>Beta: %{x:.2f}<br>Alpha: %{y:.3f}<extra></extra>"
                    ))
            
            fig_scatter.update_layout(
                title="Dispersi√≥n Beta vs Alpha por Estrategia",
                xaxis_title="Beta",
                yaxis_title="Alpha",
                height=500
            )
            
            st.plotly_chart(fig_scatter, use_container_width=True)
    
    # Mostrar datos del BCRA y econ√≥micos si est√°n disponibles
    if bcra_data or economic_data:
        st.subheader("üìä Contexto Econ√≥mico y Macro")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if bcra_data:
                st.markdown("**üè¶ Datos del BCRA**")
                st.write(f"‚Ä¢ Inflaci√≥n: {bcra_data.get('inflacion_esperada', 0):.1f}%")
                st.write(f"‚Ä¢ Tasa Pol√≠tica: {bcra_data.get('tasa_politica', 0):.1f}%")
                st.write(f"‚Ä¢ Reservas: {bcra_data.get('reservas', 0):,.0f}M USD")
                st.write(f"‚Ä¢ Crecimiento M2: {bcra_data.get('m2_crecimiento', 0):.1f}%")
        
        with col2:
            if economic_data:
                st.markdown("**üìà Variables Econ√≥micas**")
                st.write(f"‚Ä¢ Fase del Ciclo: {economic_data.get('cycle_phase', 'Desconocida')}")
                st.write(f"‚Ä¢ Nivel de Riesgo: {economic_data.get('risk_level', 'Desconocido')}")
                if economic_data.get('sectors'):
                    st.write("‚Ä¢ Sectores Favorables:", ", ".join(economic_data['sectors'].get('favorable', [])))
    
    # Generar recomendaciones
    with st.spinner("Generando recomendaciones de estrategias..."):
        recommendations = recommender.generate_market_recommendations(market_conditions)
    
    # Mostrar estrategias recomendadas
    st.subheader("üéØ Estrategias Recomendadas")
    
    # Extraer estrategias para el selector
    estrategias_disponibles = []
    for strategy in recommendations['recommended_strategies']:
        estrategias_disponibles.append(strategy['strategy'])
    
    # Selector de estrategia para buscar activos
    if estrategias_disponibles:
        estrategia_seleccionada = st.selectbox(
            "Seleccione una estrategia para buscar activos espec√≠ficos:",
            estrategias_disponibles,
            help="Seleccione una estrategia para ver activos que cumplan con esa estrategia"
        )
        
        if st.button("üîç Buscar Activos por Estrategia", type="primary"):
            mostrar_activos_recomendados_por_estrategia(token_acceso, estrategia_seleccionada)
    
    # Mostrar detalles de cada estrategia
    for i, strategy in enumerate(recommendations['recommended_strategies']):
        with st.expander(f"{i+1}. {strategy['strategy']} - {strategy['priority']} Priority"):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.write(f"**Descripci√≥n:** {strategy['description']}")
                st.write(f"**Beta Objetivo:** {strategy['target_beta']:.2f}")
                st.write(f"**Beta M√°ximo:** {strategy['max_beta']:.2f}")
            
            with col2:
                if strategy['priority'] == 'High':
                    st.success("üü¢ Alta Prioridad")
                else:
                    st.info("üîµ Prioridad Media")
    
    # Mostrar activos defensivos si est√°n disponibles
    if recommendations['defensive_assets']:
        st.subheader("üõ°Ô∏è Activos Defensivos Recomendados")
        
        # Crear DataFrame para mostrar
        defensive_data = []
        for asset in recommendations['defensive_assets'][:10]:  # Top 10
            defensive_data.append({
                'Ticker': asset['ticker'],
                'Beta': f"{asset['capm_metrics']['beta']:.3f}",
                'Alpha (%)': f"{asset['capm_metrics']['alpha']*100:.2f}",
                'Volatilidad (%)': f"{asset['capm_metrics']['volatility']*100:.1f}",
                'Sharpe': f"{asset['capm_metrics']['sharpe_ratio']:.2f}",
                'Score Defensivo': f"{asset['defensive_score']:.1f}",
                'Estrategia': asset['strategy']['strategy_type']
            })
        
        df_defensive = pd.DataFrame(defensive_data)
        st.dataframe(df_defensive, use_container_width=True)
    
    # Mostrar ajustes de riesgo
    st.subheader("‚öñÔ∏è Ajustes de Riesgo")
    
    risk_adj = recommendations['risk_adjustments']
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.write("**Tama√±o de Posiciones**")
        pos_sizing = risk_adj['position_sizing']
        st.write(f"‚Ä¢ M√°ximo por posici√≥n: {pos_sizing['max_position']*100:.0f}%")
        st.write(f"‚Ä¢ Total en acciones: {pos_sizing['total_equity']*100:.0f}%")
        st.write(f"‚Ä¢ Reserva en efectivo: {pos_sizing['cash_reserve']*100:.0f}%")
    
    with col2:
        st.write("**Stop Loss**")
        stop_loss = risk_adj['stop_loss']
        st.write(f"‚Ä¢ Stop loss: {stop_loss['stop_percentage']*100:.0f}%")
        if stop_loss['tight_stops']:
            st.write("‚Ä¢ Stops ajustados: ‚úÖ")
        else:
            st.write("‚Ä¢ Stops ajustados: ‚ùå")
    
    with col3:
        st.write("**Diversificaci√≥n**")
        diversification = risk_adj['diversification']
        st.write(f"‚Ä¢ M√≠nimo posiciones: {diversification['min_positions']}")
        st.write(f"‚Ä¢ M√°ximo por sector: {diversification['max_sector_weight']*100:.0f}%")
    
    # Mostrar notas de implementaci√≥n
    if recommendations['implementation_notes']:
        st.subheader("üìù Notas de Implementaci√≥n")
        
        for note in recommendations['implementation_notes']:
            if note['type'] == 'warning':
                st.warning(f"‚ö†Ô∏è {note['message']}")
            else:
                st.info(f"‚ÑπÔ∏è {note['message']}")
            
            st.write(f"**Acci√≥n:** {note['action']}")
            st.divider()

def analizar_portafolio_capm(portafolio, token_portador, dias_historial=252):
    """
    Analiza un portafolio usando m√©tricas CAPM
    """
    if not portafolio:
        return None
    
    # Obtener datos del MERVAL
    try:
        merval_data = yf.download('^MERV', 
                                start=(datetime.now() - timedelta(days=dias_historial)).strftime('%Y-%m-%d'),
                                end=datetime.now().strftime('%Y-%m-%d'))['Close']
        market_returns = merval_data.pct_change().dropna()
    except Exception as e:
        print(f"Error obteniendo datos del MERVAL: {str(e)}")
        return None
    
    # Inicializar analizador CAPM
    capm_analyzer = CAPMAnalyzer()
    portfolio_analysis = {
        'assets_analysis': [],
        'portfolio_metrics': {},
        'strategy_classification': {}
    }
    
    # Analizar cada activo
    for simbolo, activo in portafolio.items():
        try:
            # Obtener datos hist√≥ricos
            df_historico = obtener_serie_historica_iol(
                token_portador,
                activo.get('mercado', 'BCBA'),
                simbolo,
                (datetime.now() - timedelta(days=dias_historial)).strftime('%Y-%m-%d'),
                datetime.now().strftime('%Y-%m-%d'),
                "SinAjustar"
            )
            
            if df_historico is not None and len(df_historico) > 50:
                asset_returns = df_historico['close'].pct_change().dropna()
                
                # An√°lisis CAPM del activo
                capm_metrics = capm_analyzer.calculate_asset_capm(
                    asset_returns, market_returns, simbolo
                )
                
                if capm_metrics:
                    strategy_class = capm_analyzer.classify_asset_strategy(capm_metrics)
                    
                    portfolio_analysis['assets_analysis'].append({
                        'symbol': simbolo,
                        'capm_metrics': capm_metrics,
                        'strategy': strategy_class,
                        'weight': activo.get('Valuaci√≥n', 0) / sum(a.get('Valuaci√≥n', 0) for a in portafolio.values())
                    })
        
        except Exception as e:
            print(f"Error analizando {simbolo}: {str(e)}")
            continue
    
    # Calcular m√©tricas del portafolio
    if portfolio_analysis['assets_analysis']:
        # Beta ponderado del portafolio
        portfolio_beta = sum(
            asset['capm_metrics']['beta'] * asset['weight'] 
            for asset in portfolio_analysis['assets_analysis']
        )
        
        # Alpha ponderado del portafolio
        portfolio_alpha = sum(
            asset['capm_metrics']['alpha'] * asset['weight'] 
            for asset in portfolio_analysis['assets_analysis']
        )
        
        # Clasificar estrategia del portafolio
        portfolio_strategy = capm_analyzer.classify_asset_strategy({
            'beta': portfolio_beta,
            'alpha': portfolio_alpha
        })
        
        portfolio_analysis['portfolio_metrics'] = {
            'portfolio_beta': portfolio_beta,
            'portfolio_alpha': portfolio_alpha,
            'total_assets': len(portfolio_analysis['assets_analysis'])
        }
        
        portfolio_analysis['strategy_classification'] = portfolio_strategy
    
    return portfolio_analysis

def mostrar_analisis_capm_portafolio(token_acceso, id_cliente):
    """
    Muestra an√°lisis CAPM del portafolio actual del cliente
    """
    st.header("üìä An√°lisis CAPM del Portafolio")
    
    # Obtener portafolio del cliente
    try:
        portafolio = obtener_portafolio(token_acceso, id_cliente)
        if not portafolio:
            st.warning("No se pudo obtener el portafolio del cliente")
            return
        
        # Calcular valor total
        valor_total = sum(activo.get('Valuaci√≥n', 0) for activo in portafolio.values())
        
        if valor_total <= 0:
            st.warning("El portafolio no tiene valor o no se pudo calcular")
            return
        
        # Analizar portafolio con CAPM
        with st.spinner("Analizando portafolio con m√©tricas CAPM..."):
            portfolio_analysis = analizar_portafolio_capm(portafolio, token_acceso)
        
        if not portfolio_analysis or not portfolio_analysis['assets_analysis']:
            st.warning("No se pudo realizar el an√°lisis CAPM del portafolio")
            return
        
        # Mostrar m√©tricas del portafolio
        st.subheader("üìà M√©tricas del Portafolio")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Beta del Portafolio", f"{portfolio_analysis['portfolio_metrics']['portfolio_beta']:.3f}")
        
        with col2:
            st.metric("Alpha del Portafolio", f"{portfolio_analysis['portfolio_metrics']['portfolio_alpha']*100:.2f}%")
        
        with col3:
            st.metric("Total de Activos", portfolio_analysis['portfolio_metrics']['total_assets'])
        
        with col4:
            strategy_type = portfolio_analysis['strategy_classification']['strategy_type']
            st.metric("Estrategia", strategy_type)
        
        # Mostrar clasificaci√≥n de estrategia
        st.subheader("üéØ Clasificaci√≥n de Estrategia")
        
        strategy = portfolio_analysis['strategy_classification']
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.write(f"**Tipo de Estrategia:** {strategy['strategy_type']}")
            st.write(f"**Descripci√≥n:** {strategy['description']}")
            st.write("**Caracter√≠sticas:**")
            for char in strategy['characteristics']:
                st.write(f"‚Ä¢ {char}")
        
        with col2:
            if strategy['strategy_type'] == "Index Tracker":
                st.success("üü¢ Estrategia Conservadora")
            elif strategy['strategy_type'] == "Traditional Long-Only":
                st.info("üîµ Estrategia Balanceada")
            elif strategy['strategy_type'] == "Smart Beta":
                st.warning("üü° Estrategia T√°ctica")
            elif strategy['strategy_type'] == "Hedge Fund":
                st.error("üî¥ Estrategia Alternativa")
            else:
                st.info("‚ö™ Estrategia Mixta")
        
        # Mostrar an√°lisis por activo
        st.subheader("üìä An√°lisis por Activo")
        
        # Crear DataFrame para mostrar
        assets_data = []
        for asset in portfolio_analysis['assets_analysis']:
            assets_data.append({
                'S√≠mbolo': asset['symbol'],
                'Beta': f"{asset['capm_metrics']['beta']:.3f}",
                'Alpha (%)': f"{asset['capm_metrics']['alpha']*100:.2f}",
                'Volatilidad (%)': f"{asset['capm_metrics']['volatility']*100:.1f}",
                'Sharpe': f"{asset['capm_metrics']['sharpe_ratio']:.2f}",
                'Peso (%)': f"{asset['weight']*100:.1f}",
                'Estrategia': asset['strategy']['strategy_type']
            })
        
        df_assets = pd.DataFrame(assets_data)
        st.dataframe(df_assets, use_container_width=True)
        
        # Gr√°fico de dispersi√≥n Beta vs Alpha
        st.subheader("üìà Dispersi√≥n Beta vs Alpha")
        
        fig = go.Figure()
        
        # Agrupar por estrategia
        strategies = {}
        for asset in portfolio_analysis['assets_analysis']:
            strategy = asset['strategy']['strategy_type']
            if strategy not in strategies:
                strategies[strategy] = {'betas': [], 'alphas': [], 'symbols': []}
            
            strategies[strategy]['betas'].append(asset['capm_metrics']['beta'])
            strategies[strategy]['alphas'].append(asset['capm_metrics']['alpha'])
            strategies[strategy]['symbols'].append(asset['symbol'])
        
        # Colores por estrategia
        colors = {
            'Index Tracker': 'green',
            'Traditional Long-Only': 'blue',
            'Smart Beta': 'orange',
            'Hedge Fund': 'red',
            'Mixed Strategy': 'purple'
        }
        
        for strategy, data in strategies.items():
            fig.add_trace(go.Scatter(
                x=data['betas'],
                y=[alpha * 100 for alpha in data['alphas']],
                mode='markers+text',
                text=data['symbols'],
                textposition="top center",
                name=strategy,
                marker=dict(
                    size=10,
                    color=colors.get(strategy, 'gray')
                ),
                hovertemplate='<b>%{text}</b><br>' +
                            'Beta: %{x:.3f}<br>' +
                            'Alpha: %{y:.2f}%<br>' +
                            'Estrategia: ' + strategy +
                            '<extra></extra>'
            ))
        
        # L√≠neas de referencia
        fig.add_hline(y=0, line_dash="dash", line_color="gray", annotation_text="Alpha = 0")
        fig.add_vline(x=1, line_dash="dash", line_color="gray", annotation_text="Beta = 1")
        
        fig.update_layout(
            title="Dispersi√≥n de Activos por Beta y Alpha",
            xaxis_title="Beta",
            yaxis_title="Alpha (%)",
            height=500,
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Recomendaciones espec√≠ficas
        st.subheader("üí° Recomendaciones Espec√≠ficas")
        
        # Analizar concentraci√≥n de riesgo
        high_beta_assets = [a for a in portfolio_analysis['assets_analysis'] if a['capm_metrics']['beta'] > 1.2]
        low_alpha_assets = [a for a in portfolio_analysis['assets_analysis'] if a['capm_metrics']['alpha'] < -0.05]
        
        if high_beta_assets:
            st.warning("‚ö†Ô∏è **Activos de Alto Riesgo Detectados:**")
            for asset in high_beta_assets:
                st.write(f"‚Ä¢ {asset['symbol']}: Beta = {asset['capm_metrics']['beta']:.3f}")
            st.write("**Recomendaci√≥n:** Considerar reducir exposici√≥n o implementar cobertura")
        
        if low_alpha_assets:
            st.warning("‚ö†Ô∏è **Activos con Alpha Negativo:**")
            for asset in low_alpha_assets:
                st.write(f"‚Ä¢ {asset['symbol']}: Alpha = {asset['capm_metrics']['alpha']*100:.2f}%")
            st.write("**Recomendaci√≥n:** Evaluar reemplazo por activos con mejor rendimiento")
        
        # Sugerencias de diversificaci√≥n
        strategy_counts = {}
        for asset in portfolio_analysis['assets_analysis']:
            strategy = asset['strategy']['strategy_type']
            strategy_counts[strategy] = strategy_counts.get(strategy, 0) + 1
        
        if len(strategy_counts) < 3:
            st.info("‚ÑπÔ∏è **Diversificaci√≥n de Estrategias:**")
            st.write("El portafolio est√° concentrado en pocas estrategias. Considerar diversificar entre:")
            st.write("‚Ä¢ Index Tracker (estabilidad)")
            st.write("‚Ä¢ Smart Beta (t√°ctica)")
            st.write("‚Ä¢ Hedge Fund (alternativa)")
        
    except Exception as e:
        st.error(f"Error en el an√°lisis CAPM del portafolio: {str(e)}")


def obtener_datos_bcra():
    """
    Obtiene datos reales del BCRA para variables macroecon√≥micas.
    Incluye expectativas de mercado, tasas, reservas, etc.
    """
    import requests
    from bs4 import BeautifulSoup
    import pandas as pd
    from datetime import datetime, timedelta
    import urllib3
    
    # Deshabilitar advertencias SSL
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    datos_bcra = {}
    
    try:
        # URL del BCRA con expectativas de mercado
        url_expectativas = "https://www.bcra.gob.ar/PublicacionesEstadisticas/Relevamiento_Expectativas_de_Mercado.asp"
        
        # Headers para simular navegador
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        # Configurar sesi√≥n con manejo robusto de SSL
        session = requests.Session()
        session.headers.update(headers)
        
        # Intentar obtener datos del BCRA con configuraci√≥n SSL robusta
        response = session.get(
            url_expectativas, 
            headers=headers, 
            timeout=15, 
            verify=False,
            allow_redirects=True
        )
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Extraer datos de expectativas (ejemplo de estructura)
            # Nota: La estructura real puede variar
            try:
                # Buscar tablas con datos de expectativas
                tablas = soup.find_all('table')
                
                for tabla in tablas:
                    # Buscar datos de inflaci√≥n esperada
                    if 'inflaci√≥n' in tabla.get_text().lower() or 'ipc' in tabla.get_text().lower():
                        filas = tabla.find_all('tr')
                        for fila in filas:
                            celdas = fila.find_all(['td', 'th'])
                            if len(celdas) >= 2:
                                texto = celdas[0].get_text().strip()
                                valor = celdas[1].get_text().strip()
                                
                                if 'inflaci√≥n' in texto.lower():
                                    try:
                                        datos_bcra['inflacion_esperada'] = float(valor.replace('%', '').replace(',', '.'))
                                    except:
                                        pass
                
                # Si no se encontraron datos en la p√°gina, usar valores de respaldo
                if not datos_bcra:
                    st.info("No se pudieron extraer datos del BCRA. Usando valores de respaldo actualizados.")
                    datos_bcra = {
                        'inflacion_esperada': 8.5,  # % mensual
                        'tasa_politica': 50.0,      # % anual
                        'reservas': 25000,          # millones USD
                        'm2_crecimiento': 12.5      # % anual
                    }
                
            except Exception as e:
                st.info(f"Error procesando datos del BCRA: {e}. Usando valores de respaldo.")
                # Usar valores de respaldo
                datos_bcra = {
                    'inflacion_esperada': 8.5,
                    'tasa_politica': 50.0,
                    'reservas': 25000,
                    'm2_crecimiento': 12.5
                }
        else:
            st.info(f"No se pudo acceder al BCRA (c√≥digo {response.status_code}). Usando valores de respaldo.")
            # Usar valores de respaldo
            datos_bcra = {
                'inflacion_esperada': 8.5,
                'tasa_politica': 50.0,
                'reservas': 25000,
                'm2_crecimiento': 12.5
            }
            
    except requests.exceptions.SSLError as e:
        st.info(f"Error SSL al conectar con BCRA: {e}. Usando valores de respaldo.")
        # Usar valores de respaldo
        datos_bcra = {
            'inflacion_esperada': 8.5,
            'tasa_politica': 50.0,
            'reservas': 25000,
            'm2_crecimiento': 12.5
        }
    except requests.exceptions.RequestException as e:
        st.info(f"Error de conexi√≥n con BCRA: {e}. Usando valores de respaldo.")
        # Usar valores de respaldo
        datos_bcra = {
            'inflacion_esperada': 8.5,
            'tasa_politica': 50.0,
            'reservas': 25000,
            'm2_crecimiento': 12.5
        }
    except Exception as e:
        st.info(f"Error inesperado al obtener datos BCRA: {e}. Usando valores de respaldo.")
        # Usar valores de respaldo
        datos_bcra = {
            'inflacion_esperada': 8.5,
            'tasa_politica': 50.0,
            'reservas': 25000,
            'm2_crecimiento': 12.5
        }
    
    return datos_bcra


def actualizar_variables_macro_con_bcra():
    """
    Actualiza las variables macroecon√≥micas con datos reales del BCRA.
    """
    st.markdown("### üîÑ Actualizaci√≥n de Variables Macro del BCRA")
    
    if st.button("üîÑ Actualizar Datos del BCRA", type="primary"):
        with st.spinner("Obteniendo datos actualizados del BCRA..."):
            
            # Obtener datos del BCRA
            datos_bcra = obtener_datos_bcra()
            
            # Mostrar datos obtenidos
            st.success("‚úÖ Datos del BCRA obtenidos exitosamente")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric(
                    "Inflaci√≥n Esperada",
                    f"{datos_bcra['inflacion_esperada']:.1f}%",
                    "Mensual"
                )
                st.metric(
                    "Tasa de Pol√≠tica",
                    f"{datos_bcra['tasa_politica']:.1f}%",
                    "Anual"
                )
            
            with col2:
                st.metric(
                    "Reservas Internacionales",
                    f"{datos_bcra['reservas']:,.0f}M USD",
                    "Millones"
                )
                st.metric(
                    "Crecimiento M2",
                    f"{datos_bcra['m2_crecimiento']:.1f}%",
                    "Anual"
                )
            
            # Guardar en session state para uso posterior
            st.session_state['datos_bcra'] = datos_bcra
            
            # An√°lisis autom√°tico del ciclo econ√≥mico
            st.markdown("### üìä An√°lisis del Ciclo Econ√≥mico con Datos BCRA")
            
            # Determinar fase del ciclo basada en los datos
            inflacion = datos_bcra['inflacion_esperada']
            tasa = datos_bcra['tasa_politica']
            reservas = datos_bcra['reservas']
            m2 = datos_bcra['m2_crecimiento']
            
            # L√≥gica de clasificaci√≥n del ciclo
            puntuacion_ciclo = 0
            
            # An√°lisis de inflaci√≥n
            if inflacion > 10:
                puntuacion_ciclo -= 2  # Alta inflaci√≥n = contracci√≥n
            elif inflacion < 5:
                puntuacion_ciclo += 1  # Baja inflaci√≥n = expansi√≥n
            else:
                puntuacion_ciclo += 0  # Inflaci√≥n moderada
            
            # An√°lisis de tasas
            if tasa > 60:
                puntuacion_ciclo -= 1  # Tasas altas = contracci√≥n
            elif tasa < 30:
                puntuacion_ciclo += 1  # Tasas bajas = expansi√≥n
            
            # An√°lisis de reservas
            if reservas > 30000:
                puntuacion_ciclo += 1  # Reservas altas = estabilidad
            elif reservas < 20000:
                puntuacion_ciclo -= 1  # Reservas bajas = vulnerabilidad
            
            # An√°lisis de M2
            if m2 > 15:
                puntuacion_ciclo += 1  # Crecimiento monetario alto
            elif m2 < 10:
                puntuacion_ciclo -= 1  # Crecimiento monetario bajo
            
            # Determinar fase del ciclo
            if puntuacion_ciclo >= 2:
                fase_ciclo = "Expansi√≥n"
                color_fase = "success"
            elif puntuacion_ciclo <= -2:
                fase_ciclo = "Contracci√≥n"
                color_fase = "error"
            else:
                fase_ciclo = "Estabilizaci√≥n"
                color_fase = "info"
            
            # Mostrar diagn√≥stico
            st.markdown(f"**üéØ Diagn√≥stico del Ciclo Econ√≥mico:**")
            
            if color_fase == "success":
                st.success(f"**{fase_ciclo}** - Puntuaci√≥n: {puntuacion_ciclo}")
            elif color_fase == "error":
                st.error(f"**{fase_ciclo}** - Puntuaci√≥n: {puntuacion_ciclo}")
            else:
                st.info(f"**{fase_ciclo}** - Puntuaci√≥n: {puntuacion_ciclo}")
            
            # Recomendaciones espec√≠ficas
            st.markdown("### üí° Recomendaciones de Inversi√≥n")
            
            if fase_ciclo == "Expansi√≥n":
                st.success("üöÄ **Estrategia Ofensiva Recomendada**")
                st.write("‚Ä¢ Mantener exposici√≥n a activos de riesgo")
                st.write("‚Ä¢ Considerar acciones de crecimiento")
                st.write("‚Ä¢ Evaluar bonos corporativos")
                st.write("‚Ä¢ Monitorear indicadores de sobrecalentamiento")
                
            elif fase_ciclo == "Contracci√≥n":
                st.warning("‚ö†Ô∏è **Estrategia Defensiva Recomendada**")
                st.write("‚Ä¢ Reducir exposici√≥n a activos de riesgo")
                st.write("‚Ä¢ Aumentar posici√≥n en efectivo")
                st.write("‚Ä¢ Considerar bonos del tesoro")
                st.write("‚Ä¢ Evaluar activos refugio (oro, d√≥lar)")
                
            else:
                st.info("‚öñÔ∏è **Estrategia Balanceada Recomendada**")
                st.write("‚Ä¢ Mantener diversificaci√≥n equilibrada")
                st.write("‚Ä¢ Monitorear se√±ales de cambio de ciclo")
                st.write("‚Ä¢ Considerar estrategias de valor")
                st.write("‚Ä¢ Mantener liquidez moderada")
            
            # Guardar an√°lisis en session state
            st.session_state['analisis_ciclo_bcra'] = {
                'fase_ciclo': fase_ciclo,
                'puntuacion': puntuacion_ciclo,
                'datos': datos_bcra,
                'fecha_actualizacion': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }


def integrar_datos_bcra_en_ciclo_economico():
    """
    Integra los datos del BCRA en el an√°lisis del ciclo econ√≥mico.
    """
    if 'datos_bcra' in st.session_state:
        datos_bcra = st.session_state['datos_bcra']
        
        st.markdown("### üìä Datos BCRA Integrados")
        
        # Crear m√©tricas con datos reales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Inflaci√≥n BCRA",
                f"{datos_bcra['inflacion_esperada']:.1f}%",
                "Mensual"
            )
        
        with col2:
            st.metric(
                "Tasa Pol√≠tica",
                f"{datos_bcra['tasa_politica']:.1f}%",
                "Anual"
            )
        
        with col3:
            st.metric(
                "Reservas",
                f"{datos_bcra['reservas']:,.0f}M USD",
                "Millones"
            )
        
        with col4:
            st.metric(
                "Crecimiento M2",
                f"{datos_bcra['m2_crecimiento']:.1f}%",
                "Anual"
            )
        
        # An√°lisis de correlaciones hist√≥ricas entre variables BCRA
        st.markdown("#### üîó An√°lisis de Correlaciones Hist√≥ricas BCRA")
        
        # Explicaciones de correlaciones hist√≥ricas en Argentina
        correlaciones_bcra = {
            ('Inflaci√≥n', 'Tasas de Inter√©s'): {
                'correlacion_historica': 0.75,
                'explicacion': "En Argentina, la inflaci√≥n y las tasas de inter√©s tienen correlaci√≥n positiva fuerte. El BCRA ajusta las tasas para controlar la inflaci√≥n, siguiendo la regla de Taylor. Cuando la inflaci√≥n sube, el BCRA sube las tasas para frenar la demanda agregada.",
                'implicaciones': "Expectativa de suba de tasas si la inflaci√≥n contin√∫a alta",
                'estrategia': "Considerar bonos CER y ajustables por inflaci√≥n"
            },
            ('Inflaci√≥n', 'Tipo de Cambio'): {
                'correlacion_historica': 0.65,
                'explicacion': "La inflaci√≥n alta erosiona el valor de la moneda local, generando presi√≥n sobre el tipo de cambio. En Argentina, esto se ve agravado por la indexaci√≥n de precios.",
                'implicaciones': "Presi√≥n alcista sobre el d√≥lar si la inflaci√≥n persiste",
                'estrategia': "Mantener exposici√≥n a activos dolarizados"
            },
            ('Tasas de Inter√©s', 'Actividad Econ√≥mica'): {
                'correlacion_historica': -0.60,
                'explicacion': "Las tasas altas frenan el cr√©dito y la inversi√≥n, reduciendo la actividad econ√≥mica. En Argentina, esto afecta especialmente a sectores sensibles a las tasas como construcci√≥n y consumo.",
                'implicaciones': "Desaceleraci√≥n econ√≥mica si las tasas se mantienen altas",
                'estrategia': "Reducir exposici√≥n a sectores sensibles a las tasas"
            },
            ('Reservas', 'Tipo de Cambio'): {
                'correlacion_historica': -0.70,
                'explicacion': "Las reservas internacionales act√∫an como colch√≥n para el tipo de cambio. Reservas altas generan confianza y estabilidad cambiaria, mientras que reservas bajas generan presi√≥n devaluatoria.",
                'implicaciones': "Estabilidad cambiaria si las reservas se mantienen",
                'estrategia': "Monitorear evoluci√≥n de reservas para timing de inversiones"
            },
            ('M2', 'Inflaci√≥n'): {
                'correlacion_historica': 0.55,
                'explicacion': "El crecimiento de la masa monetaria (M2) alimenta la inflaci√≥n con un lag de 6-12 meses. En Argentina, la emisi√≥n monetaria para financiar d√©ficit fiscal es un factor clave.",
                'implicaciones': "Presi√≥n inflacionaria futura si M2 contin√∫a creciendo",
                'estrategia': "Incluir activos indexados por inflaci√≥n en el portafolio"
            }
        }
        
        # Mostrar an√°lisis de correlaciones BCRA
        for (var1, var2), analisis in correlaciones_bcra.items():
            st.markdown(f"**{var1} <-> {var2}** (Correlaci√≥n hist√≥rica: {analisis['correlacion_historica']:.2f})")
            st.markdown(f"*Explicaci√≥n:* {analisis['explicacion']}")
            st.markdown(f"*Implicaciones actuales:* {analisis['implicaciones']}")
            st.markdown(f"*Estrategia recomendada:* {analisis['estrategia']}")
            st.markdown("---")
        
        # An√°lisis de divergencias actuales vs hist√≥ricas
        st.markdown("#### ‚ö° Divergencias Actuales vs Hist√≥ricas")
        
        # Simular an√°lisis de divergencias (en un caso real, se calcular√≠an con datos hist√≥ricos)
        divergencias_actuales = [
            {
                'par': 'Inflaci√≥n - Tasas',
                'historica': 0.75,
                'actual': 0.60,
                'divergencia': -0.15,
                'explicacion': 'El BCRA est√° siendo m√°s conservador en el ajuste de tasas, posiblemente por consideraciones de crecimiento econ√≥mico'
            },
            {
                'par': 'Reservas - Tipo de Cambio',
                'historica': -0.70,
                'actual': -0.50,
                'divergencia': 0.20,
                'explicacion': 'Las reservas est√°n generando menos confianza que hist√≥ricamente, posiblemente por expectativas de devaluaci√≥n'
            }
        ]
        
        for div in divergencias_actuales:
            st.markdown(f"**{div['par']}**: Hist√≥rica {div['historica']:.2f} ‚Üí Actual {div['actual']:.2f} (Œî: {div['divergencia']:+.2f})")
            st.markdown(f"*Explicaci√≥n:* {div['explicacion']}")
            st.markdown("---")
        
        return datos_bcra
    else:
        st.info("‚ÑπÔ∏è Ejecute 'Actualizar Datos del BCRA' para integrar datos oficiales")
        return None


def mostrar_analisis_variables_economicas(token_acceso, gemini_api_key=None):
    """
    Muestra an√°lisis completo de variables econ√≥micas de Argentina Datos.
    Incluye gr√°ficos, an√°lisis de ciclo econ√≥mico y recomendaciones.

    Args:
        token_acceso (str): Token de acceso para la API de IOL
        gemini_api_key (str, optional): API key para an√°lisis de IA
    """
    st.markdown("---")
    st.subheader("üìà An√°lisis de Variables Econ√≥micas - Argentina Datos")

    # Configuraci√≥n de par√°metros
    col1, col2, col3 = st.columns(3)
    with col1:
        periodo_analisis = st.selectbox(
            "Per√≠odo de an√°lisis",
            ["1 mes", "3 meses", "6 meses", "1 a√±o"],
            index=1,
            help="Per√≠odo para el an√°lisis de variables econ√≥micas"
        )
    with col2:
        indicadores_seleccionados = st.multiselect(
            "Indicadores a mostrar",
            ["Inflaci√≥n", "Tasas", "Riesgo Pa√≠s", "D√≥lar", "UVA"],
            default=["Inflaci√≥n", "Tasas", "Riesgo Pa√≠s"],
            help="Seleccionar indicadores econ√≥micos a mostrar"
        )
    with col3:
        incluir_ia = st.checkbox(
            "Incluir an√°lisis IA",
            value=True,
            help="Usar IA para an√°lisis y recomendaciones"
        )
    
    if st.button("üìä Generar An√°lisis de Variables Econ√≥micas", type="primary"):
        with st.spinner("Obteniendo y analizando variables econ√≥micas..."):
            
            try:
                # Inicializar ArgentinaDatos
                ad = ArgentinaDatos()
                
                # Obtener an√°lisis econ√≥mico completo
                economic_analysis = ad.get_economic_analysis()
                
                if economic_analysis['data']:
                    # ========== 1. RESUMEN DEL AN√ÅLISIS ECON√ìMICO ==========
                    st.markdown("### üìã Resumen del An√°lisis Econ√≥mico")
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric(
                            "Fase del Ciclo",
                            economic_analysis['cycle_phase'],
                            help="Fase actual del ciclo econ√≥mico detectada"
                        )
                    
                    with col2:
                        st.metric(
                            "Nivel de Riesgo",
                            economic_analysis['risk_level'],
                            help="Nivel de riesgo econ√≥mico actual"
                        )
                    
                    with col3:
                        # Contar datos disponibles
                        datos_disponibles = sum(1 for data in economic_analysis['data'].values() if data)
                        st.metric(
                            "Indicadores Disponibles",
                            f"{datos_disponibles}/6",
                            help="Cantidad de indicadores econ√≥micos disponibles"
                        )
                    
                    with col4:
                        # Calcular tendencia general
                        tendencia = "Alcista" if economic_analysis['cycle_phase'] in ['Accommodative Monetary Policy', 'Disinflationary'] else "Bajista"
                        st.metric(
                            "Tendencia General",
                            tendencia,
                            help="Tendencia general del ciclo econ√≥mico"
                        )
                    
                    # ========== 2. GR√ÅFICOS DE VARIABLES ECON√ìMICAS ==========
                    st.markdown("### üìä Gr√°ficos de Variables Econ√≥micas")
                    
                    # Gr√°fico de inflaci√≥n
                    if "Inflaci√≥n" in indicadores_seleccionados and economic_analysis['data']['inflacion']:
                        st.markdown("#### üìà Evoluci√≥n de la Inflaci√≥n")
                        inflacion_chart = ad.create_inflacion_chart(economic_analysis['data']['inflacion'])
                        if inflacion_chart:
                            fig_inflacion = go.Figure(inflacion_chart)
                            st.plotly_chart(fig_inflacion, use_container_width=True)
                    
                    # Gr√°fico de tasas
                    if "Tasas" in indicadores_seleccionados and economic_analysis['data']['tasas']:
                        st.markdown("#### üí∞ Evoluci√≥n de las Tasas de Inter√©s")
                        tasas_chart = ad.create_tasas_chart(economic_analysis['data']['tasas'])
                        if tasas_chart:
                            fig_tasas = go.Figure(tasas_chart)
                            st.plotly_chart(fig_tasas, use_container_width=True)
                    
                    # Gr√°fico de riesgo pa√≠s
                    if "Riesgo Pa√≠s" in indicadores_seleccionados and economic_analysis['data']['riesgo_pais']:
                        st.markdown("#### ‚ö†Ô∏è Evoluci√≥n del Riesgo Pa√≠s")
                        riesgo_chart = ad.create_riesgo_pais_chart(economic_analysis['data']['riesgo_pais'])
                        if riesgo_chart:
                            fig_riesgo = go.Figure(riesgo_chart)
                            st.plotly_chart(fig_riesgo, use_container_width=True)
                    
                    # Gr√°fico de d√≥lar
                    if "D√≥lar" in indicadores_seleccionados and economic_analysis['data']['dolares']:
                        st.markdown("#### üíµ Evoluci√≥n del D√≥lar")
                        dolares_chart = ad.create_dolares_chart(economic_analysis['data']['dolares'], periodo_analisis)
                        if dolares_chart:
                            fig_dolares = go.Figure(dolares_chart)
                            st.plotly_chart(fig_dolares, use_container_width=True)
                    
                    # Gr√°fico de UVA
                    if "UVA" in indicadores_seleccionados and economic_analysis['data']['uva']:
                        st.markdown("#### üè† Evoluci√≥n del UVA")
                        uva_chart = ad.create_uva_chart(economic_analysis['data']['uva'])
                        if uva_chart:
                            fig_uva = go.Figure(uva_chart)
                            st.plotly_chart(fig_uva, use_container_width=True)
                    
                    # ========== 3. AN√ÅLISIS DE CICLO ECON√ìMICO ==========
                    st.markdown("### üîÑ An√°lisis del Ciclo Econ√≥mico")
                    
                    # Explicar la fase del ciclo
                    if economic_analysis['cycle_phase'] == 'Inflationary Pressure':
                        st.warning("**üìà Presi√≥n Inflacionaria Detectada**")
                        st.write("""
                        **Caracter√≠sticas de esta fase:**
                        - Alta inflaci√≥n que erosiona el poder adquisitivo
                        - Presi√≥n sobre las tasas de inter√©s
                        - Inestabilidad en los mercados financieros
                        - Dificultades para el crecimiento econ√≥mico
                        """)
                        
                    elif economic_analysis['cycle_phase'] == 'Tightening Monetary Policy':
                        st.info("**üîí Pol√≠tica Monetaria Restrictiva**")
                        st.write("""
                        **Caracter√≠sticas de esta fase:**
                        - Tasas de inter√©s elevadas para controlar la inflaci√≥n
                        - Menor acceso al cr√©dito
                        - Desaceleraci√≥n del crecimiento econ√≥mico
                        - Presi√≥n sobre sectores sensibles a las tasas
                        """)
                        
                    elif economic_analysis['cycle_phase'] == 'Accommodative Monetary Policy':
                        st.success("**üí∞ Pol√≠tica Monetaria Expansiva**")
                        st.write("""
                        **Caracter√≠sticas de esta fase:**
                        - Tasas de inter√©s bajas para estimular la econom√≠a
                        - Mayor acceso al cr√©dito
                        - Estimulaci√≥n del crecimiento econ√≥mico
                        - Favorable para inversiones de largo plazo
                        """)
                        
                    elif economic_analysis['cycle_phase'] == 'Disinflationary':
                        st.info("**üìâ Desinflaci√≥n**")
                        st.write("""
                        **Caracter√≠sticas de esta fase:**
                        - Reducci√≥n de la tasa de inflaci√≥n
                        - Estabilizaci√≥n de precios
                        - Mejora en la confianza econ√≥mica
                        - Oportunidades para inversiones
                        """)
                    
                    # ========== 4. RECOMENDACIONES DE INVERSI√ìN ==========
                    st.markdown("### üí° Recomendaciones de Inversi√≥n")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if economic_analysis['sectors']['favorable']:
                            st.success("**‚úÖ Sectores Favorables**")
                            for sector in economic_analysis['sectors']['favorable']:
                                st.write(f"‚Ä¢ {sector}")
                    
                    with col2:
                        if economic_analysis['sectors']['unfavorable']:
                            st.warning("**‚ùå Sectores Desfavorables**")
                            for sector in economic_analysis['sectors']['unfavorable']:
                                st.write(f"‚Ä¢ {sector}")
                    
                    # Recomendaciones espec√≠ficas
                    if economic_analysis['recommendations']:
                        st.info("**üìã Recomendaciones Espec√≠ficas**")
                        for i, rec in enumerate(economic_analysis['recommendations'], 1):
                            st.write(f"{i}. {rec}")
                    
                    # ========== 5. AN√ÅLISIS CON IA ==========
                    if incluir_ia and gemini_api_key:
                        try:
                            st.markdown("### ü§ñ An√°lisis IA de Variables Econ√≥micas")
                            
                            # Preparar datos para IA
                            resumen_economico = f"""
                            An√°lisis de Variables Econ√≥micas de Argentina:
                            
                            **Fase del Ciclo Econ√≥mico:**
                            - Fase actual: {economic_analysis['cycle_phase']}
                            - Nivel de riesgo: {economic_analysis['risk_level']}
                            
                            **Sectores de Inversi√≥n:**
                            - Sectores favorables: {', '.join(economic_analysis['sectors']['favorable'])}
                            - Sectores desfavorables: {', '.join(economic_analysis['sectors']['unfavorable'])}
                            
                            **Recomendaciones Generadas:**
                            {chr(10).join([f"- {rec}" for rec in economic_analysis['recommendations']])}
                            
                            **Datos Disponibles:**
                            - Inflaci√≥n: {'Disponible' if economic_analysis['data']['inflacion'] else 'No disponible'}
                            - Tasas: {'Disponible' if economic_analysis['data']['tasas'] else 'No disponible'}
                            - Riesgo Pa√≠s: {'Disponible' if economic_analysis['data']['riesgo_pais'] else 'No disponible'}
                            - D√≥lar: {'Disponible' if economic_analysis['data']['dolares'] else 'No disponible'}
                            - UVA: {'Disponible' if economic_analysis['data']['uva'] else 'No disponible'}
                            """
                            
                            # Llamar a IA para an√°lisis
                            genai.configure(api_key=gemini_api_key)
                            model = genai.GenerativeModel('gemini-pro')
                            
                            prompt = f"""
                            Analiza las siguientes variables econ√≥micas de Argentina y proporciona un an√°lisis detallado:
                            
                            {resumen_economico}
                            
                            Proporciona:
                            1. **Diagn√≥stico del ciclo econ√≥mico argentino:** Explica en qu√© parte del ciclo se encuentra Argentina y qu√© significa esto
                            2. **An√°lisis de sectores e instrumentos:** Qu√© sectores e instrumentos financieros son m√°s adecuados para esta fase del ciclo
                            3. **Estrategias de inversi√≥n:** Recomendaciones espec√≠ficas de inversi√≥n para el contexto argentino
                            4. **Gesti√≥n de riesgo:** C√≥mo gestionar el riesgo en el contexto econ√≥mico actual
                            5. **Horizonte temporal:** Qu√© horizonte temporal es m√°s adecuado para las inversiones
                            6. **Se√±ales de alerta:** Qu√© indicadores monitorear para detectar cambios en el ciclo
                            7. **Oportunidades espec√≠ficas:** Qu√© oportunidades √∫nicas presenta el mercado argentino en esta fase
                            
                            Responde en espa√±ol de manera clara y pr√°ctica, enfoc√°ndote en el mercado argentino.
                            """
                            
                            response = model.generate_content(prompt)
                            st.write(response.text)
                            
                        except Exception as e:
                            st.warning(f"No se pudo generar an√°lisis IA: {e}")
                
                else:
                    st.error("No se pudieron obtener datos econ√≥micos suficientes para el an√°lisis")
                    
            except Exception as e:
                st.error(f"Error en el an√°lisis de variables econ√≥micas: {e}")


def graficar_ciclo_economico_real(token_acceso, gemini_api_key=None):
    """
    Grafica el ciclo econ√≥mico real usando datos macroecon√≥micos.
    Incluye indicadores como PBI, inflaci√≥n, tasas, empleo, etc.
    """
    st.markdown("---")
    st.subheader("üìà Ciclo Econ√≥mico Real - An√°lisis Macroecon√≥mico")
    
    # Configuraci√≥n de par√°metros
    col1, col2, col3 = st.columns(3)
    with col1:
        periodo_analisis = st.selectbox(
            "Per√≠odo de an√°lisis",
            ["1y", "2y", "5y", "10y"],
            index=1,
            help="Per√≠odo para el an√°lisis del ciclo econ√≥mico"
        )
    with col2:
        indicadores_seleccionados = st.multiselect(
            "Indicadores a analizar",
            ["PBI", "Inflaci√≥n", "Tasas de Inter√©s", "Empleo", "Consumo", "Inversi√≥n", "Comercio Exterior", "Confianza"],
            default=["PBI", "Inflaci√≥n", "Tasas de Inter√©s", "Empleo"],
            help="Seleccionar indicadores macroecon√≥micos"
        )
    with col3:
        incluir_pronostico = st.checkbox(
            "Incluir pron√≥stico",
            value=True,
            help="Incluir proyecciones de tendencia"
        )
    
    # Agregar secci√≥n de datos BCRA
    st.markdown("---")
    st.markdown("### üè¶ Datos Oficiales del BCRA")
    
    # Bot√≥n para actualizar datos del BCRA
    actualizar_variables_macro_con_bcra()
    
    # Integrar datos BCRA si est√°n disponibles
    datos_bcra = integrar_datos_bcra_en_ciclo_economico()
    
    st.markdown("---")
    st.markdown("### üìà An√°lisis de Mercados Financieros")
    
    if st.button("üìä Generar Gr√°fico del Ciclo Econ√≥mico", type="primary"):
        with st.spinner("Obteniendo datos macroecon√≥micos y generando gr√°ficos..."):
            
            # ========== 1. DATOS MACROECON√ìMICOS REALES ==========
            st.markdown("### üìä Indicadores Macroecon√≥micos")
            
            # Definir tickers para indicadores macro (usando proxies de yfinance)
            indicadores_tickers = {
                'PBI': '^MERV',  # Proxy usando MERVAL como indicador de actividad econ√≥mica
                'Inflaci√≥n': '^VIX',  # Proxy usando VIX como indicador de incertidumbre
                'Tasas de Inter√©s': '^TNX',  # Treasury 10Y como proxy de tasas
                'Empleo': '^DJI',  # Dow Jones como proxy de empleo/actividad
                'Consumo': 'XLY',  # Consumer Discretionary ETF
                'Inversi√≥n': 'XLK',  # Technology ETF como proxy de inversi√≥n
                'Comercio Exterior': 'UUP',  # US Dollar Index
                'Confianza': '^VIX'  # VIX como indicador de confianza
            }
            
            # Funci√≥n para obtener datos de empleo alternativos si yfinance falla
            def obtener_datos_empleo_alternativos():
                """Obtiene datos de empleo usando fuentes alternativas"""
                try:
                    # Intentar con diferentes proxies de empleo
                    proxies_empleo = ['^DJI', '^GSPC', 'XLI']  # Dow Jones, S&P 500, Industrial ETF
                    
                    for proxy in proxies_empleo:
                        try:
                            datos = yf.download(proxy, period=periodo_analisis)['Close']
                            if len(datos.dropna()) > 10:
                                return datos
                        except:
                            continue
                    
                    # Si no se pueden obtener datos, generar datos simulados basados en tendencias econ√≥micas
                    st.info("‚ÑπÔ∏è Generando datos de empleo simulados basados en tendencias econ√≥micas")
                    
                    # Crear serie temporal simulada
                    fechas = pd.date_range(end=datetime.now(), periods=252, freq='D')
                    # Simular datos de empleo con tendencia ligeramente positiva y volatilidad moderada
                    np.random.seed(42)  # Para reproducibilidad
                    tendencia = 0.0001  # Tendencia ligeramente positiva
                    volatilidad = 0.015
                    datos_simulados = []
                    valor_inicial = 100
                    
                    for i in range(len(fechas)):
                        if i == 0:
                            datos_simulados.append(valor_inicial)
                        else:
                            cambio = np.random.normal(tendencia, volatilidad)
                            nuevo_valor = datos_simulados[-1] * (1 + cambio)
                            datos_simulados.append(nuevo_valor)
                    
                    return pd.Series(datos_simulados, index=fechas)
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Error obteniendo datos de empleo: {str(e)}")
                    return None
            
            # Obtener datos hist√≥ricos
            datos_macro = {}
            fechas_comunes = None
            
            try:
                # Obtener datos para indicadores seleccionados
                tickers_seleccionados = [indicadores_tickers[ind] for ind in indicadores_seleccionados if ind in indicadores_tickers]
                
                if tickers_seleccionados:
                    # Descargar datos
                    datos_raw = yf.download(tickers_seleccionados, period=periodo_analisis)['Close']
                    
                    # Procesar cada indicador
                    for indicador in indicadores_seleccionados:
                        if indicador in indicadores_tickers:
                            ticker = indicadores_tickers[indicador]
                            try:
                                # Manejo especial para datos de empleo
                                if indicador == 'Empleo':
                                    serie = None
                                    if ticker in datos_raw.columns:
                                        serie = datos_raw[ticker].dropna()
                                    
                                    # Si no hay datos v√°lidos, usar fuente alternativa
                                    if serie is None or len(serie) < 10 or np.all(np.isnan(serie)):
                                        st.info(f"üîÑ Obteniendo datos alternativos para {indicador}")
                                        serie = obtener_datos_empleo_alternativos()
                                        if serie is None:
                                            st.warning(f"‚ö†Ô∏è No se pudieron obtener datos para {indicador}")
                                            continue
                                else:
                                    if ticker in datos_raw.columns:
                                        serie = datos_raw[ticker].dropna()
                                    else:
                                        st.warning(f"‚ö†Ô∏è Ticker {ticker} no encontrado en los datos para {indicador}")
                                        continue
                                
                                if len(serie) > 0:
                                    # Verificar que hay datos v√°lidos
                                    if np.all(np.isnan(serie)) or len(serie) < 10:
                                        st.warning(f"‚ö†Ô∏è Datos insuficientes para {indicador} ({ticker})")
                                        continue
                                    
                                    # Normalizar serie (base 100)
                                    serie_normalizada = (serie / serie.iloc[0]) * 100
                                    
                                    # Calcular m√©tricas del ciclo
                                    retornos = serie.pct_change().dropna()
                                    momentum = (serie.iloc[-1] / serie.iloc[-63] - 1) * 100 if len(serie) >= 63 else 0
                                    volatilidad = retornos.std() * np.sqrt(252) * 100 if len(retornos) > 0 else 0
                                    
                                    # Verificar que las m√©tricas son v√°lidas
                                    if np.isnan(momentum) or np.isnan(volatilidad):
                                        st.warning(f"‚ö†Ô∏è M√©tricas inv√°lidas para {indicador}")
                                        continue
                                    
                                    # Determinar fase del ciclo
                                    if momentum > 5:
                                        fase_ciclo = "Expansi√≥n"
                                        color_fase = "green"
                                    elif momentum > -5:
                                        fase_ciclo = "Estabilizaci√≥n"
                                        color_fase = "orange"
                                    else:
                                        fase_ciclo = "Contracci√≥n"
                                        color_fase = "red"
                                    
                                    datos_macro[indicador] = {
                                        'serie': serie_normalizada,
                                        'momentum': momentum,
                                        'volatilidad': volatilidad,
                                        'fase_ciclo': fase_ciclo,
                                        'color_fase': color_fase,
                                        'valor_actual': serie.iloc[-1],
                                        'valor_normalizado': serie_normalizada.iloc[-1]
                                    }
                                else:
                                    st.warning(f"‚ö†Ô∏è No hay datos para {indicador} ({ticker})")
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è Error procesando {indicador}: {str(e)}")
                                continue
                    
                    # Establecer fechas comunes para todos los indicadores
                    if datos_macro:
                        fechas_comunes = datos_macro[list(datos_macro.keys())[0]]['serie'].index
                        for indicador in datos_macro:
                            datos_macro[indicador]['serie'] = datos_macro[indicador]['serie'].reindex(fechas_comunes).fillna(method='ffill')
                
            except Exception as e:
                st.error(f"Error obteniendo datos macroecon√≥micos: {e}")
                return
            
            # ========== 2. GR√ÅFICO DEL CICLO ECON√ìMICO ==========
            if datos_macro:
                st.markdown("### üìà Visualizaci√≥n del Ciclo Econ√≥mico")
                
                # Crear gr√°fico principal del ciclo
                fig_ciclo = go.Figure()
                
                # Colores para las fases del ciclo
                colores_fases = {
                    'Expansi√≥n': 'green',
                    'Estabilizaci√≥n': 'orange', 
                    'Contracci√≥n': 'red'
                }
                
                # Agregar cada indicador al gr√°fico
                for indicador, datos in datos_macro.items():
                    fig_ciclo.add_trace(go.Scatter(
                        x=datos['serie'].index,
                        y=datos['serie'].values,
                        mode='lines+markers',
                        name=f"{indicador} ({datos['fase_ciclo']})",
                        line=dict(color=datos['color_fase'], width=2),
                        marker=dict(size=4),
                        hovertemplate=f'<b>{indicador}</b><br>' +
                                    'Fecha: %{x}<br>' +
                                    'Valor: %{y:.1f}<br>' +
                                    f'Fase: {datos["fase_ciclo"]}<br>' +
                                    f'Momentum: {datos["momentum"]:.1f}%<br>' +
                                    '<extra></extra>'
                    ))
                
                # Configurar layout
                fig_ciclo.update_layout(
                    title="Ciclo Econ√≥mico Real - Indicadores Macroecon√≥micos",
                    xaxis_title="Fecha",
                    yaxis_title="Valor Normalizado (Base 100)",
                    height=600,
                    hovermode='x unified',
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1
                    )
                )
                
                # Agregar l√≠neas de referencia para fases del ciclo
                fig_ciclo.add_hline(y=100, line_dash="dash", line_color="gray", 
                                  annotation_text="L√≠nea Base", annotation_position="top right")
                
                st.plotly_chart(fig_ciclo, use_container_width=True)
                
                # ========== 3. AN√ÅLISIS DE CORRELACI√ìN ENTRE INDICADORES ==========
                st.markdown("### üîó An√°lisis de Correlaci√≥n entre Indicadores")
                
                # Crear DataFrame de retornos para correlaci√≥n
                retornos_df = pd.DataFrame()
                for indicador, datos in datos_macro.items():
                    retornos_df[indicador] = datos['serie'].pct_change().dropna()
                
                if not retornos_df.empty and len(retornos_df.columns) > 1:
                    # Matriz de correlaciones
                    correlaciones = retornos_df.corr()
                    
                    # An√°lisis detallado de correlaciones
                    st.markdown("#### üìä An√°lisis Detallado de Correlaciones")
                    
                    # Identificar correlaciones significativas
                    correlaciones_significativas = []
                    for i in range(len(correlaciones.columns)):
                        for j in range(i+1, len(correlaciones.columns)):
                            valor_corr = correlaciones.iloc[i, j]
                            if abs(valor_corr) > 0.3:  # Correlaci√≥n moderada o fuerte
                                correlaciones_significativas.append({
                                    'Variable 1': correlaciones.columns[i],
                                    'Variable 2': correlaciones.columns[j],
                                    'Correlaci√≥n': valor_corr,
                                    'Tipo': 'Positiva' if valor_corr > 0 else 'Negativa',
                                    'Fuerza': 'Fuerte' if abs(valor_corr) > 0.7 else 'Moderada' if abs(valor_corr) > 0.5 else 'D√©bil'
                                })
                    
                    # Mostrar correlaciones significativas
                    if correlaciones_significativas:
                        st.markdown("**üîç Correlaciones Significativas Detectadas:**")
                        for corr in correlaciones_significativas:
                            color = "green" if corr['Tipo'] == 'Positiva' else "red"
                            st.markdown(f"‚Ä¢ **{corr['Variable 1']} <-> {corr['Variable 2']}**: {corr['Correlaci√≥n']:.3f} ({corr['Tipo']}, {corr['Fuerza']})")
                    
                    # An√°lisis de divergencias y oportunidades de arbitraje
                    st.markdown("#### ‚ö° An√°lisis de Divergencias y Arbitraje")
                    
                    divergencias = []
                    for i, indicador1 in enumerate(retornos_df.columns):
                        for j, indicador2 in enumerate(retornos_df.columns):
                            if i != j:
                                # Calcular correlaci√≥n hist√≥rica vs actual
                                corr_historica = correlaciones.iloc[i, j]
                                corr_reciente = retornos_df[indicador1].tail(30).corr(retornos_df[indicador2].tail(30))
                                
                                # Detectar divergencias significativas
                                if abs(corr_historica - corr_reciente) > 0.3:
                                    divergencias.append({
                                        'Par': f"{indicador1} - {indicador2}",
                                        'Correlaci√≥n Hist√≥rica': corr_historica,
                                        'Correlaci√≥n Reciente': corr_reciente,
                                        'Divergencia': corr_historica - corr_reciente,
                                        'Oportunidad': 'Arbitraje' if abs(corr_historica - corr_reciente) > 0.5 else 'Monitoreo'
                                    })
                    
                    if divergencias:
                        st.markdown("**üö® Divergencias Detectadas:**")
                        for div in divergencias:
                            st.markdown(f"‚Ä¢ **{div['Par']}**: Hist√≥rica {div['Correlaci√≥n Hist√≥rica']:.3f} ‚Üí Reciente {div['Correlaci√≥n Reciente']:.3f} (Œî: {div['Divergencia']:.3f}) - {div['Oportunidad']}")
                    
                    # Gr√°fico de correlaciones mejorado
                    fig_corr = go.Figure(data=go.Heatmap(
                        z=correlaciones.values,
                        x=correlaciones.columns,
                        y=correlaciones.columns,
                        colorscale='RdBu',
                        zmid=0,
                        text=correlaciones.values.round(2),
                        texttemplate="%{text}",
                        textfont={"size": 12},
                        hoverongaps=False,
                        hovertemplate='<b>%{y} vs %{x}</b><br>' +
                                    'Correlaci√≥n: %{z:.3f}<br>' +
                                    '<extra></extra>'
                    ))
                    
                    fig_corr.update_layout(
                        title="Matriz de Correlaci√≥n entre Indicadores Macroecon√≥micos",
                        width=700,
                        height=600,
                        xaxis_title="Variables",
                        yaxis_title="Variables"
                    )
                    st.plotly_chart(fig_corr, use_container_width=True)
                    
                    # Explicaci√≥n de correlaciones hist√≥ricas
                    st.markdown("#### üìö Interpretaci√≥n Hist√≥rica de Correlaciones")
                    
                    explicaciones_correlacion = {
                        ('PBI', 'Inflaci√≥n'): "Hist√≥ricamente, el PBI y la inflaci√≥n suelen tener correlaci√≥n negativa en econom√≠as desarrolladas, pero en Argentina puede ser positiva debido a la indexaci√≥n de precios.",
                        ('PBI', 'Tasas de Inter√©s'): "Correlaci√≥n t√≠picamente negativa: tasas altas frenan el crecimiento econ√≥mico, tasas bajas lo estimulan.",
                        ('Inflaci√≥n', 'Tasas de Inter√©s'): "Correlaci√≥n positiva: el BCRA ajusta tasas para controlar la inflaci√≥n.",
                        ('Empleo', 'PBI'): "Correlaci√≥n positiva: mayor actividad econ√≥mica genera m√°s empleo.",
                        ('Consumo', 'PBI'): "Correlaci√≥n positiva: el consumo es componente principal del PBI.",
                        ('Inversi√≥n', 'Tasas de Inter√©s'): "Correlaci√≥n negativa: tasas altas desincentivan la inversi√≥n."
                    }
                    
                    for (var1, var2), explicacion in explicaciones_correlacion.items():
                        if var1 in correlaciones.columns and var2 in correlaciones.columns:
                            corr_valor = correlaciones.loc[var1, var2]
                            st.markdown(f"**{var1} <-> {var2}** (Correlaci√≥n: {corr_valor:.3f}): {explicacion}")
                    
                    # An√°lisis de causalidad y lead-lag
                    st.markdown("#### üîÑ An√°lisis de Causalidad y Lead-Lag")
                    
                    # Calcular correlaciones con diferentes lags
                    lags_analysis = {}
                    for indicador1 in retornos_df.columns:
                        for indicador2 in retornos_df.columns:
                            if indicador1 != indicador2:
                                corr_lag1 = retornos_df[indicador1].corr(retornos_df[indicador2].shift(1))
                                corr_lag2 = retornos_df[indicador1].corr(retornos_df[indicador2].shift(2))
                                corr_lag3 = retornos_df[indicador1].corr(retornos_df[indicador2].shift(3))
                                
                                max_corr = max(abs(corr_lag1), abs(corr_lag2), abs(corr_lag3))
                                if max_corr > 0.4:  # Solo mostrar correlaciones significativas
                                    lags_analysis[f"{indicador1} ‚Üí {indicador2}"] = {
                                        'Lag 1': corr_lag1,
                                        'Lag 2': corr_lag2,
                                        'Lag 3': corr_lag3,
                                        'Max Correlaci√≥n': max_corr
                                    }
                    
                    if lags_analysis:
                        st.markdown("**‚è∞ Relaciones Temporales Detectadas:**")
                        for par, lags in lags_analysis.items():
                            st.markdown(f"‚Ä¢ **{par}**: Max correlaci√≥n {lags['Max Correlaci√≥n']:.3f}")
                    
                    # Oportunidades de trading basadas en correlaciones
                    st.markdown("#### üí∞ Oportunidades de Trading Basadas en Correlaciones")
                    
                    oportunidades = []
                    for corr in correlaciones_significativas:
                        if corr['Fuerza'] in ['Fuerte', 'Moderada']:
                            if corr['Tipo'] == 'Positiva':
                                oportunidades.append(f"**{corr['Variable 1']} y {corr['Variable 2']}**: Correlaci√≥n positiva fuerte ({corr['Correlaci√≥n']:.3f}) - considerar pares de trading o cobertura.")
                            else:
                                oportunidades.append(f"**{corr['Variable 1']} y {corr['Variable 2']}**: Correlaci√≥n negativa fuerte ({corr['Correlaci√≥n']:.3f}) - oportunidad de diversificaci√≥n y arbitraje.")
                    
                    if oportunidades:
                        for op in oportunidades:
                            st.markdown(f"‚Ä¢ {op}")
                
                # ========== 4. RESUMEN DE FASES DEL CICLO ==========
                st.markdown("### üìã Resumen de Fases del Ciclo Econ√≥mico")
                
                # Crear tabla de resumen
                resumen_data = []
                for indicador, datos in datos_macro.items():
                    resumen_data.append({
                        'Indicador': indicador,
                        'Fase Actual': datos['fase_ciclo'],
                        'Momentum (%)': f"{datos['momentum']:.1f}",
                        'Volatilidad (%)': f"{datos['volatilidad']:.1f}",
                        'Valor Actual': f"{datos['valor_actual']:.2f}",
                        'Valor Normalizado': f"{datos['valor_normalizado']:.1f}"
                    })
                
                df_resumen = pd.DataFrame(resumen_data)
                st.dataframe(df_resumen, use_container_width=True)
                
                # ========== 5. AN√ÅLISIS DE TENDENCIAS Y PRON√ìSTICOS ==========
                if incluir_pronostico:
                    st.markdown("### üîÆ An√°lisis de Tendencias y Proyecciones")
                    
                    # Calcular tendencias lineales
                    tendencias = {}
                    for indicador, datos in datos_macro.items():
                        try:
                            x = np.arange(len(datos['serie']))
                            y = datos['serie'].values
                            
                            # Verificar que hay datos v√°lidos
                            if len(y) < 2 or np.all(np.isnan(y)) or np.all(y == y[0]):
                                st.warning(f"‚ö†Ô∏è Datos insuficientes para calcular tendencia de {indicador}")
                                continue
                            
                            # Eliminar valores NaN si los hay
                            valid_mask = ~np.isnan(y)
                            if not np.any(valid_mask):
                                st.warning(f"‚ö†Ô∏è No hay datos v√°lidos para {indicador}")
                                continue
                            
                            x_valid = x[valid_mask]
                            y_valid = y[valid_mask]
                            
                            if len(y_valid) < 2:
                                st.warning(f"‚ö†Ô∏è Datos insuficientes para {indicador} despu√©s de limpiar NaN")
                                continue
                            
                            # Ajuste lineal
                            slope, intercept, r_value, p_value, std_err = stats.linregress(x_valid, y_valid)
                            
                            # Verificar que el ajuste fue exitoso
                            if np.isnan(slope) or np.isnan(intercept):
                                st.warning(f"‚ö†Ô∏è No se pudo calcular tendencia para {indicador}")
                                continue
                            
                            # Proyecci√≥n a 3 meses
                            proyeccion_3m = slope * (len(x) + 63) + intercept
                            
                            # Verificar que la proyecci√≥n es v√°lida
                            if np.isnan(proyeccion_3m):
                                st.warning(f"‚ö†Ô∏è Proyecci√≥n inv√°lida para {indicador}")
                                continue
                            
                            cambio_proyeccion = ((proyeccion_3m - datos['valor_normalizado']) / datos['valor_normalizado']) * 100
                            
                            tendencias[indicador] = {
                                'pendiente': slope,
                                'r_cuadrado': r_value**2,
                                'proyeccion_3m': proyeccion_3m,
                                'cambio_proyeccion': cambio_proyeccion,
                                'tendencia': 'Alcista' if slope > 0 else 'Bajista'
                            }
                            
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è Error calculando tendencia para {indicador}: {str(e)}")
                            continue
                    
                    # Mostrar proyecciones con explicaciones detalladas
                    if tendencias:
                        st.markdown("### üìà Proyecciones a 3 Meses con An√°lisis Detallado")
                        
                        # Crear tabs para organizar mejor la informaci√≥n
                        tab_proyecciones, tab_calidad, tab_explicaciones = st.tabs([
                            "üìä Proyecciones", "üìà Calidad de Tendencias", "üîç Explicaciones Detalladas"
                        ])
                        
                        with tab_proyecciones:
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.markdown("**üìà Proyecciones a 3 meses**")
                                for indicador, tendencia in tendencias.items():
                                    try:
                                        color_tendencia = "green" if tendencia['tendencia'] == 'Alcista' else "red"
                                        st.metric(
                                            indicador,
                                            f"{tendencia['proyeccion_3m']:.1f}",
                                            f"{tendencia['cambio_proyeccion']:+.1f}% ({tendencia['tendencia']})",
                                            delta_color="normal" if tendencia['tendencia'] == 'Alcista' else "inverse"
                                        )
                                    except Exception as e:
                                        st.warning(f"‚ö†Ô∏è Error mostrando proyecci√≥n para {indicador}: {str(e)}")
                            
                            with col2:
                                st.markdown("**üìä Calidad de las Tendencias**")
                                for indicador, tendencia in tendencias.items():
                                    try:
                                        calidad = "Alta" if tendencia['r_cuadrado'] > 0.7 else "Media" if tendencia['r_cuadrado'] > 0.4 else "Baja"
                                        st.metric(
                                            f"{indicador} (R¬≤)",
                                            f"{tendencia['r_cuadrado']:.2f}",
                                            calidad
                                        )
                                    except Exception as e:
                                        st.warning(f"‚ö†Ô∏è Error mostrando calidad para {indicador}: {str(e)}")
                        
                        with tab_calidad:
                            st.markdown("### üìä An√°lisis de Calidad de Tendencias")
                            
                            # Crear DataFrame para an√°lisis de calidad
                            calidad_data = []
                            for indicador, tendencia in tendencias.items():
                                try:
                                    calidad_data.append({
                                        'Indicador': indicador,
                                        'R¬≤': f"{tendencia['r_cuadrado']:.3f}",
                                        'Calidad': "Alta" if tendencia['r_cuadrado'] > 0.7 else "Media" if tendencia['r_cuadrado'] > 0.4 else "Baja",
                                        'Pendiente': f"{tendencia['pendiente']:.4f}",
                                        'Tendencia': tendencia['tendencia'],
                                        'Proyecci√≥n 3M': f"{tendencia['proyeccion_3m']:.1f}",
                                        'Cambio %': f"{tendencia['cambio_proyeccion']:+.1f}%"
                                    })
                                except Exception as e:
                                    st.warning(f"‚ö†Ô∏è Error procesando {indicador}: {str(e)}")
                            
                            if calidad_data:
                                df_calidad = pd.DataFrame(calidad_data)
                                st.dataframe(df_calidad, use_container_width=True)
                                
                                # An√°lisis de confiabilidad
                                st.markdown("#### üéØ An√°lisis de Confiabilidad")
                                alta_confiabilidad = [d for d in calidad_data if d['Calidad'] == 'Alta']
                                media_confiabilidad = [d for d in calidad_data if d['Calidad'] == 'Media']
                                baja_confiabilidad = [d for d in calidad_data if d['Calidad'] == 'Baja']
                                
                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    st.metric("Alta Confiabilidad", len(alta_confiabilidad))
                                with col2:
                                    st.metric("Media Confiabilidad", len(media_confiabilidad))
                                with col3:
                                    st.metric("Baja Confiabilidad", len(baja_confiabilidad))
                        
                        with tab_explicaciones:
                            st.markdown("### üîç Explicaciones Detalladas de Cada Valor")
                            
                            for indicador, tendencia in tendencias.items():
                                try:
                                    with st.expander(f"üìä {indicador} - An√°lisis Detallado"):
                                        col1, col2 = st.columns(2)
                                        
                                        with col1:
                                            st.markdown("**üìà M√©tricas de Proyecci√≥n**")
                                            st.write(f"**Valor Proyectado:** {tendencia['proyeccion_3m']:.1f}")
                                            st.write(f"**Cambio Esperado:** {tendencia['cambio_proyeccion']:+.1f}%")
                                            st.write(f"**Direcci√≥n:** {tendencia['tendencia']}")
                                            st.write(f"**Pendiente:** {tendencia['pendiente']:.4f}")
                                        
                                        with col2:
                                            st.markdown("**üìä M√©tricas de Calidad**")
                                            st.write(f"**R¬≤ (Coeficiente de Determinaci√≥n):** {tendencia['r_cuadrado']:.3f}")
                                            calidad = "Alta" if tendencia['r_cuadrado'] > 0.7 else "Media" if tendencia['r_cuadrado'] > 0.4 else "Baja"
                                            st.write(f"**Calidad del Ajuste:** {calidad}")
                                        
                                        # Explicaci√≥n del R¬≤
                                        st.markdown("**üîç Interpretaci√≥n del R¬≤:**")
                                        if tendencia['r_cuadrado'] > 0.7:
                                            st.success(f"**Alta Confiabilidad ({tendencia['r_cuadrado']:.1%}):** La tendencia explica m√°s del 70% de la variabilidad de los datos. Las proyecciones son muy confiables.")
                                        elif tendencia['r_cuadrado'] > 0.4:
                                            st.info(f"**Confiabilidad Media ({tendencia['r_cuadrado']:.1%}):** La tendencia explica entre 40-70% de la variabilidad. Las proyecciones son moderadamente confiables.")
                                        else:
                                            st.warning(f"**Baja Confiabilidad ({tendencia['r_cuadrado']:.1%}):** La tendencia explica menos del 40% de la variabilidad. Las proyecciones tienen baja confiabilidad.")
                                        
                                        # Explicaci√≥n de la tendencia
                                        st.markdown("**üìà Interpretaci√≥n de la Tendencia:**")
                                        if tendencia['tendencia'] == 'Alcista':
                                            st.success(f"**Tendencia Alcista:** El indicador muestra una tendencia de crecimiento de {tendencia['pendiente']:.4f} unidades por per√≠odo.")
                                        else:
                                            st.error(f"**Tendencia Bajista:** El indicador muestra una tendencia de decrecimiento de {abs(tendencia['pendiente']):.4f} unidades por per√≠odo.")
                                        
                                        # Implicaciones econ√≥micas
                                        st.markdown("**üí° Implicaciones Econ√≥micas:**")
                                        if indicador == 'PBI':
                                            if tendencia['tendencia'] == 'Alcista':
                                                st.success("‚Ä¢ **Crecimiento Econ√≥mico:** Indica expansi√≥n de la actividad econ√≥mica")
                                                st.success("‚Ä¢ **Empleo:** Probable mejora en el mercado laboral")
                                                st.success("‚Ä¢ **Consumo:** Mayor capacidad de consumo de las familias")
                                            else:
                                                st.warning("‚Ä¢ **Desaceleraci√≥n:** Indica contracci√≥n de la actividad econ√≥mica")
                                                st.warning("‚Ä¢ **Empleo:** Posible deterioro del mercado laboral")
                                                st.warning("‚Ä¢ **Consumo:** Menor capacidad de consumo")
                                        
                                        elif indicador == 'Inflaci√≥n':
                                            if tendencia['tendencia'] == 'Alcista':
                                                st.warning("‚Ä¢ **Presi√≥n Inflacionaria:** Aumento de precios generalizados")
                                                st.warning("‚Ä¢ **Poder Adquisitivo:** Erosi√≥n del valor de la moneda")
                                                st.warning("‚Ä¢ **Tasas de Inter√©s:** Probable suba de tasas por parte del BCRA")
                                            else:
                                                st.success("‚Ä¢ **Estabilidad de Precios:** Control de la inflaci√≥n")
                                                st.success("‚Ä¢ **Poder Adquisitivo:** Mantenimiento del valor de la moneda")
                                                st.success("‚Ä¢ **Tasas de Inter√©s:** Posible baja de tasas")
                                        
                                        elif indicador == 'Tasas de Inter√©s':
                                            if tendencia['tendencia'] == 'Alcista':
                                                st.warning("‚Ä¢ **Pol√≠tica Monetaria Restrictiva:** Control de la inflaci√≥n")
                                                st.warning("‚Ä¢ **Cr√©dito:** Encarecimiento del financiamiento")
                                                st.warning("‚Ä¢ **Inversi√≥n:** Posible desaceleraci√≥n de inversiones")
                                            else:
                                                st.success("‚Ä¢ **Pol√≠tica Monetaria Expansiva:** Estimulaci√≥n de la econom√≠a")
                                                st.success("‚Ä¢ **Cr√©dito:** Abaratamiento del financiamiento")
                                                st.success("‚Ä¢ **Inversi√≥n:** Posible aumento de inversiones")
                                        
                                        elif indicador == 'Empleo':
                                            if tendencia['tendencia'] == 'Alcista':
                                                st.success("‚Ä¢ **Mercado Laboral:** Mejora en la creaci√≥n de empleos")
                                                st.success("‚Ä¢ **Consumo:** Mayor capacidad de gasto de las familias")
                                                st.success("‚Ä¢ **Econom√≠a:** Indicador de fortaleza econ√≥mica")
                                            else:
                                                st.warning("‚Ä¢ **Mercado Laboral:** Deterioro en la creaci√≥n de empleos")
                                                st.warning("‚Ä¢ **Consumo:** Menor capacidad de gasto")
                                                st.warning("‚Ä¢ **Econom√≠a:** Indicador de debilidad econ√≥mica")
                                        
                                        # Recomendaciones espec√≠ficas
                                        st.markdown("**üéØ Recomendaciones de Inversi√≥n:**")
                                        if tendencia['r_cuadrado'] > 0.7:
                                            st.success("**Alta Confiabilidad:** Puede basar decisiones de inversi√≥n en esta proyecci√≥n")
                                        elif tendencia['r_cuadrado'] > 0.4:
                                            st.info("**Confiabilidad Media:** Use esta proyecci√≥n como referencia, pero combine con otros indicadores")
                                        else:
                                            st.warning("**Baja Confiabilidad:** No base decisiones √∫nicamente en esta proyecci√≥n. Considere otros factores")
                                        
                                except Exception as e:
                                    st.warning(f"‚ö†Ô∏è Error generando explicaci√≥n para {indicador}: {str(e)}")
                    else:
                        st.warning("‚ö†Ô∏è No se pudieron calcular proyecciones para ning√∫n indicador")
                
                # ========== 6. RECOMENDACIONES INTEGRADAS Y DETALLADAS ==========
                st.markdown("### üí° Recomendaciones Integradas de Inversi√≥n")
                
                # Crear tabs para organizar las recomendaciones
                tab_diagnostico, tab_recomendaciones, tab_especificas = st.tabs([
                    "üîç Diagn√≥stico del Ciclo", "üìä Recomendaciones Generales", "üéØ Recomendaciones Espec√≠ficas"
                ])
                
                with tab_diagnostico:
                    st.markdown("### üîç Diagn√≥stico Detallado del Ciclo Econ√≥mico")
                    
                    # Contar fases
                    fases_count = {}
                    for datos in datos_macro.values():
                        fase = datos['fase_ciclo']
                        fases_count[fase] = fases_count.get(fase, 0) + 1
                    
                    # Determinar fase dominante
                    fase_dominante = max(fases_count, key=fases_count.get) if fases_count else "Estabilizaci√≥n"
                    
                    # Calcular m√©tricas adicionales para recomendaciones
                    momentum_promedio = np.mean([d['momentum'] for d in datos_macro.values()])
                    volatilidad_promedio = np.mean([d['volatilidad'] for d in datos_macro.values()])
                    
                    # Mostrar diagn√≥stico detallado
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("Fase Dominante", fase_dominante)
                        st.metric("Momentum Promedio", f"{momentum_promedio:.1f}%")
                    
                    with col2:
                        st.metric("Volatilidad Promedio", f"{volatilidad_promedio:.1f}%")
                        st.metric("Indicadores Analizados", len(datos_macro))
                    
                    with col3:
                        # Calcular confianza del diagn√≥stico
                        indicadores_consistentes = sum(1 for d in datos_macro.values() if d['fase_ciclo'] == fase_dominante)
                        confianza_diagnostico = (indicadores_consistentes / len(datos_macro)) * 100
                        st.metric("Confianza del Diagn√≥stico", f"{confianza_diagnostico:.0f}%")
                    
                    # Explicaci√≥n del diagn√≥stico
                    st.markdown("#### üìä Explicaci√≥n del Diagn√≥stico")
                    
                    if fase_dominante == "Expansi√≥n":
                        st.success("**üöÄ Fase de Expansi√≥n Econ√≥mica Detectada**")
                        st.markdown(f"""
                        **¬øPor qu√© se detect√≥ esta fase?**
                        - **Momentum promedio:** {momentum_promedio:.1f}% (positivo) - Los indicadores muestran crecimiento
                        - **Volatilidad:** {volatilidad_promedio:.1f}% - Nivel de incertidumbre moderado
                        - **Indicadores consistentes:** {indicadores_consistentes}/{len(datos_macro)} indicadores confirman la expansi√≥n
                        - **Confianza del diagn√≥stico:** {confianza_diagnostico:.0f}% - Alta confiabilidad
                        """)
                        
                    elif fase_dominante == "Contracci√≥n":
                        st.warning("**‚ö†Ô∏è Fase de Contracci√≥n Econ√≥mica Detectada**")
                        st.markdown(f"""
                        **¬øPor qu√© se detect√≥ esta fase?**
                        - **Momentum promedio:** {momentum_promedio:.1f}% (negativo) - Los indicadores muestran decrecimiento
                        - **Volatilidad:** {volatilidad_promedio:.1f}% - Nivel de incertidumbre alto
                        - **Indicadores consistentes:** {indicadores_consistentes}/{len(datos_macro)} indicadores confirman la contracci√≥n
                        - **Confianza del diagn√≥stico:** {confianza_diagnostico:.0f}% - Alta confiabilidad
                        """)
                        
                    else:
                        st.info("**‚öñÔ∏è Fase de Estabilizaci√≥n Econ√≥mica Detectada**")
                        st.markdown(f"""
                        **¬øPor qu√© se detect√≥ esta fase?**
                        - **Momentum promedio:** {momentum_promedio:.1f}% (estable) - Los indicadores muestran estabilidad
                        - **Volatilidad:** {volatilidad_promedio:.1f}% - Nivel de incertidumbre moderado
                        - **Indicadores consistentes:** {indicadores_consistentes}/{len(datos_macro)} indicadores confirman la estabilizaci√≥n
                        - **Confianza del diagn√≥stico:** {confianza_diagnostico:.0f}% - Confiabilidad moderada
                        """)
                    
                    # An√°lisis de indicadores individuales
                    st.markdown("#### üìà An√°lisis por Indicador")
                    for indicador, datos in datos_macro.items():
                        with st.expander(f"üìä {indicador}"):
                            col1, col2 = st.columns(2)
                            with col1:
                                st.write(f"**Fase:** {datos['fase_ciclo']}")
                                st.write(f"**Momentum:** {datos['momentum']:.1f}%")
                                st.write(f"**Volatilidad:** {datos['volatilidad']:.1f}%")
                            with col2:
                                st.write(f"**Valor Actual:** {datos['valor_actual']:.2f}")
                                st.write(f"**Valor Normalizado:** {datos['valor_normalizado']:.1f}")
                                st.write(f"**Consistencia:** {'‚úÖ' if datos['fase_ciclo'] == fase_dominante else '‚ùå'}")
                
                with tab_recomendaciones:
                    st.markdown("### üìä Recomendaciones Generales por Fase")
                    
                    if fase_dominante == "Expansi√≥n":
                        st.success("**üöÄ Estrategia para Fase de Expansi√≥n**")
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("**üìà Recomendaciones Ofensivas:**")
                            st.markdown("‚Ä¢ **Exposici√≥n a Riesgo:** 60-70% en activos de riesgo")
                            st.markdown("‚Ä¢ **Sectores Favorables:** Tecnolog√≠a, Consumo Discrecional, Financiero, Industrial")
                            st.markdown("‚Ä¢ **Estrategia:** Posicionamiento ofensivo con diversificaci√≥n sectorial")
                            st.markdown("‚Ä¢ **Instrumentos:** Acciones de crecimiento, ETFs sectoriales, Bonos corporativos")
                            st.markdown("‚Ä¢ **Timing:** Mantener posiciones por 6-12 meses, rebalancear trimestralmente")
                        
                        with col2:
                            st.markdown("**üéØ Justificaci√≥n Econ√≥mica:**")
                            st.markdown("‚Ä¢ **Crecimiento Econ√≥mico:** Los indicadores muestran expansi√≥n sostenida")
                            st.markdown("‚Ä¢ **Confianza del Mercado:** Momentum positivo genera optimismo")
                            st.markdown("‚Ä¢ **Riesgo Controlado:** Volatilidad moderada permite exposici√≥n al riesgo")
                            st.markdown("‚Ä¢ **Oportunidades:** Sectores c√≠clicos se benefician del crecimiento")
                            st.markdown("‚Ä¢ **Timing:** Fase temprana de expansi√≥n permite capturar ganancias")
                        
                    elif fase_dominante == "Contracci√≥n":
                        st.warning("**‚ö†Ô∏è Estrategia para Fase de Contracci√≥n**")
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("**üõ°Ô∏è Recomendaciones Defensivas:**")
                            st.markdown("‚Ä¢ **Exposici√≥n a Riesgo:** 30-40% en activos de riesgo")
                            st.markdown("‚Ä¢ **Sectores Defensivos:** Utilities, Consumo B√°sico, Healthcare, Telecomunicaciones")
                            st.markdown("‚Ä¢ **Estrategia:** Posicionamiento defensivo con activos refugio")
                            st.markdown("‚Ä¢ **Instrumentos:** Bonos del tesoro, Oro, ETFs defensivos, Dividendos")
                            st.markdown("‚Ä¢ **Timing:** Mantener posiciones defensivas hasta se√±ales de recuperaci√≥n")
                        
                        with col2:
                            st.markdown("**üéØ Justificaci√≥n Econ√≥mica:**")
                            st.markdown("‚Ä¢ **Desaceleraci√≥n:** Los indicadores muestran contracci√≥n econ√≥mica")
                            st.markdown("‚Ä¢ **Alta Volatilidad:** Incertidumbre requiere posicionamiento defensivo")
                            st.markdown("‚Ä¢ **Preservaci√≥n de Capital:** Prioridad sobre crecimiento en fases de contracci√≥n")
                            st.markdown("‚Ä¢ **Sectores Defensivos:** Menor sensibilidad a ciclos econ√≥micos")
                            st.markdown("‚Ä¢ **Timing:** Esperar se√±ales claras de recuperaci√≥n antes de aumentar riesgo")
                        
                    else:
                        st.info("**‚öñÔ∏è Estrategia para Fase de Estabilizaci√≥n**")
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("**‚öñÔ∏è Recomendaciones Equilibradas:**")
                            st.markdown("‚Ä¢ **Exposici√≥n a Riesgo:** 50-60% en activos de riesgo")
                            st.markdown("‚Ä¢ **Sectores Balanceados:** Mixto entre ofensivo y defensivo")
                            st.markdown("‚Ä¢ **Estrategia:** Diversificaci√≥n equilibrada con enfoque en calidad")
                            st.markdown("‚Ä¢ **Instrumentos:** ETFs balanceados, Acciones de valor, Bonos de calidad")
                            st.markdown("‚Ä¢ **Timing:** Rebalancear mensualmente, monitorear se√±ales de cambio de fase")
                        
                        with col2:
                            st.markdown("**üéØ Justificaci√≥n Econ√≥mica:**")
                            st.markdown("‚Ä¢ **Transici√≥n:** Los indicadores muestran estabilidad con se√±ales mixtas")
                            st.markdown("‚Ä¢ **Flexibilidad:** Posicionamiento equilibrado permite adaptarse a cambios")
                            st.markdown("‚Ä¢ **Calidad:** Enfoque en activos de calidad fundamental s√≥lida")
                            st.markdown("‚Ä¢ **Diversificaci√≥n:** Balance entre crecimiento y defensa")
                            st.markdown("‚Ä¢ **Timing:** Monitoreo activo para detectar cambios de fase")
                
                with tab_especificas:
                    st.markdown("### üéØ Recomendaciones Espec√≠ficas por Contexto")
                    
                    # Recomendaciones basadas en correlaciones
                    if 'correlaciones_significativas' in locals() and correlaciones_significativas:
                        st.markdown("#### üîó Recomendaciones Basadas en Correlaciones")
                        
                        for corr in correlaciones_significativas:
                            if corr['Fuerza'] in ['Fuerte', 'Moderada']:
                                with st.expander(f"üìä {corr['Variable 1']} <-> {corr['Variable 2']} (r={corr['Correlaci√≥n']:.3f})"):
                                    if corr['Tipo'] == 'Positiva':
                                        st.info(f"**Correlaci√≥n Positiva Fuerte:** {corr['Correlaci√≥n']:.3f}")
                                        st.markdown("**Estrategia:** Considerar pares de trading o cobertura")
                                        st.markdown("**Instrumentos:** ETFs sectoriales, opciones de cobertura")
                                        st.markdown("**Timing:** Monitorear divergencias de la correlaci√≥n hist√≥rica")
                                    else:
                                        st.warning(f"**Correlaci√≥n Negativa Fuerte:** {corr['Correlaci√≥n']:.3f}")
                                        st.markdown("**Estrategia:** Oportunidad de diversificaci√≥n y arbitraje")
                                        st.markdown("**Instrumentos:** ETFs inversos, estrategias de pares")
                                        st.markdown("**Timing:** Aprovechar divergencias temporales")
                    
                    # Recomendaciones espec√≠ficas del contexto argentino
                    st.markdown("#### üá¶üá∑ Recomendaciones Espec√≠ficas del Mercado Argentino")
                    
                    if datos_bcra:
                        with st.expander("üè¶ Contexto del BCRA"):
                            st.markdown(f"""
                            **üìä Datos Oficiales del BCRA:**
                            - **Inflaci√≥n Esperada:** {datos_bcra['inflacion_esperada']:.1f}% mensual
                            - **Tasa de Pol√≠tica Monetaria:** {datos_bcra['tasa_politica']:.1f}% anual
                            - **Reservas Internacionales:** {datos_bcra['reservas']:,.0f}M USD
                            - **Crecimiento M2:** {datos_bcra['m2_crecimiento']:.1f}% anual
                            """)
                            
                            st.markdown("**üí° Recomendaciones Espec√≠ficas:**")
                            st.markdown(f"‚Ä¢ **Bonos CER:** Considerar bonos ajustables por inflaci√≥n ({datos_bcra['inflacion_esperada']:.1f}% mensual)")
                            st.markdown(f"‚Ä¢ **Tasas de Inter√©s:** Monitorear evoluci√≥n de la tasa pol√≠tica ({datos_bcra['tasa_politica']:.1f}%)")
                            st.markdown(f"‚Ä¢ **Reservas:** Seguir evoluci√≥n de reservas ({datos_bcra['reservas']:,.0f}M USD) para timing cambiario")
                            st.markdown(f"‚Ä¢ **M2:** Crecimiento monetario ({datos_bcra['m2_crecimiento']:.1f}%) puede generar presi√≥n inflacionaria")
                    
                    st.markdown("**üéØ Estrategias Locales Recomendadas:**")
                    st.markdown("‚Ä¢ **Instrumentos Locales:** Bonos CER, acciones defensivas, estrategias MEP/CCL")
                    st.markdown("‚Ä¢ **Gesti√≥n de Riesgo:** Mantener liquidez en USD, diversificar entre instrumentos locales e internacionales")
                    st.markdown("‚Ä¢ **Monitoreo:** Seguir indicadores del BCRA, inflaci√≥n mensual, evoluci√≥n del tipo de cambio")
                    st.markdown("‚Ä¢ **Timing:** Aprovechar oportunidades de arbitraje entre instrumentos locales e internacionales")
                
                # Nota: Las recomendaciones espec√≠ficas ahora est√°n organizadas en las pesta√±as de arriba
                
                # An√°lisis con IA si est√° disponible
                if gemini_api_key:
                    try:
                        st.markdown("### ü§ñ An√°lisis IA Avanzado del Ciclo Econ√≥mico")
                        
                        # Preparar datos detallados para IA
                        resumen_ciclo = f"""
                        AN√ÅLISIS COMPLETO DEL CICLO ECON√ìMICO ARGENTINO:
                        
                        **1. FASE DEL CICLO ECON√ìMICO:**
                        - Fase dominante: {fase_dominante}
                        - Distribuci√≥n de fases por indicador: {fases_count}
                        - Momentum promedio: {np.mean([d['momentum'] for d in datos_macro.values()]):.1f}%
                        - Volatilidad promedio: {np.mean([d['volatilidad'] for d in datos_macro.values()]):.1f}%
                        
                        **2. AN√ÅLISIS DE CORRELACIONES:**
                        """
                        
                        # Agregar an√°lisis detallado de correlaciones
                        if 'correlaciones_significativas' in locals():
                            resumen_ciclo += "\n**Correlaciones Significativas Detectadas:**\n"
                            for corr in correlaciones_significativas:
                                resumen_ciclo += f"- {corr['Variable 1']} <-> {corr['Variable 2']}: {corr['Correlaci√≥n']:.3f} ({corr['Tipo']}, {corr['Fuerza']})\n"
                        
                        if 'divergencias' in locals():
                            resumen_ciclo += "\n**Divergencias y Oportunidades de Arbitraje:**\n"
                            for div in divergencias:
                                resumen_ciclo += f"- {div['Par']}: Hist√≥rica {div['Correlaci√≥n Hist√≥rica']:.3f} ‚Üí Reciente {div['Correlaci√≥n Reciente']:.3f} (Œî: {div['Divergencia']:.3f})\n"
                        
                        # Agregar datos BCRA si est√°n disponibles
                        if datos_bcra:
                            resumen_ciclo += f"""
                        **3. DATOS OFICIALES DEL BCRA:**
                        - Inflaci√≥n esperada: {datos_bcra['inflacion_esperada']:.1f}% mensual
                        - Tasa de pol√≠tica monetaria: {datos_bcra['tasa_politica']:.1f}% anual
                        - Reservas internacionales: {datos_bcra['reservas']:,.0f}M USD
                        - Crecimiento M2: {datos_bcra['m2_crecimiento']:.1f}% anual
                        """
                        
                        # Agregar proyecciones si est√°n disponibles
                        if 'tendencias' in locals() and tendencias:
                            resumen_ciclo += "\n**4. PROYECCIONES A 3 MESES:**\n"
                            for indicador, tendencia in tendencias.items():
                                try:
                                    resumen_ciclo += f"- {indicador}: {tendencia['proyeccion_3m']:.1f} ({tendencia['cambio_proyeccion']:+.1f}%) - {tendencia['tendencia']} (R¬≤: {tendencia['r_cuadrado']:.2f})\n"
                                except Exception as e:
                                    resumen_ciclo += f"- {indicador}: Error en proyecci√≥n - {str(e)}\n"
                        else:
                            resumen_ciclo += "\n**4. PROYECCIONES A 3 MESES:** No disponibles - datos insuficientes\n"
                        
                        # Agregar an√°lisis de causalidad si est√° disponible
                        if 'lags_analysis' in locals():
                            resumen_ciclo += "\n**5. RELACIONES TEMPORALES (CAUSALIDAD):**\n"
                            for par, lags in lags_analysis.items():
                                resumen_ciclo += f"- {par}: Max correlaci√≥n {lags['Max Correlaci√≥n']:.3f}\n"
                        
                        # Llamar a IA para an√°lisis avanzado
                        genai.configure(api_key=gemini_api_key)
                        model = genai.GenerativeModel('gemini-1.5-flash')
                        
                        prompt = f"""
                        Eres un analista econ√≥mico experto en el mercado argentino. Analiza los siguientes datos y proporciona un an√°lisis COMPLETO y DETALLADO:
                        
                        {resumen_ciclo}
                        
                        **REQUERIMIENTOS ESPEC√çFICOS DEL AN√ÅLISIS:**
                        
                        1. **DIAGN√ìSTICO DEL CICLO ECON√ìMICO:**
                           - Explica en qu√© fase del ciclo se encuentra Argentina y por qu√©
                           - Analiza la coherencia entre los diferentes indicadores
                           - Identifica contradicciones o se√±ales mixtas
                        
                        2. **AN√ÅLISIS DE CORRELACIONES HIST√ìRICAS:**
                           - Explica el SIGNIFICADO ECON√ìMICO de cada correlaci√≥n detectada
                           - ¬øPor qu√© estas variables est√°n correlacionadas hist√≥ricamente?
                           - ¬øQu√© factores econ√≥micos explican estas correlaciones?
                           - ¬øC√≥mo han evolucionado estas correlaciones en el contexto argentino?
                        
                        3. **INTERPRETACI√ìN DE DIVERGENCIAS:**
                           - Explica qu√© significan las divergencias detectadas
                           - ¬øQu√© factores econ√≥micos pueden estar causando estas divergencias?
                           - ¬øSon se√±ales de cambio estructural o temporal?
                        
                        4. **RECOMENDACIONES DE INVERSI√ìN BASADAS EN CORRELACIONES:**
                           - Estrategias espec√≠ficas basadas en las correlaciones detectadas
                           - Oportunidades de arbitraje entre instrumentos correlacionados
                           - Estrategias de diversificaci√≥n basadas en correlaciones negativas
                           - Instrumentos financieros espec√≠ficos recomendados
                        
                        5. **GESTI√ìN DE RIESGO:**
                           - Riesgos espec√≠ficos del contexto argentino
                           - Estrategias de cobertura basadas en correlaciones
                           - Se√±ales de alerta a monitorear
                        
                        6. **IMPACTO DE POL√çTICAS DEL BCRA:**
                           - C√≥mo afectan las tasas de inter√©s a las correlaciones
                           - Impacto de la pol√≠tica monetaria en los mercados
                           - Efectos de las reservas internacionales
                        
                        7. **HORIZONTE TEMPORAL Y TIMING:**
                           - Cu√°ndo implementar cada estrategia
                           - Se√±ales de entrada y salida
                           - Duraci√≥n recomendada de las posiciones
                        
                        8. **OPORTUNIDADES ESPEC√çFICAS DEL MERCADO ARGENTINO:**
                           - Instrumentos √∫nicos del mercado local
                           - Oportunidades de arbitraje MEP/CCL
                           - Estrategias con bonos, acciones, y otros instrumentos
                        
                        **IMPORTANTE:** 
                        - Explica el POR QU√â de cada correlaci√≥n y su significado econ√≥mico
                        - Proporciona recomendaciones CONCRETAS y ACCIONABLES
                        - Considera el contexto espec√≠fico argentino
                        - Incluye an√°lisis de riesgo-recompensa
                        - Explica las limitaciones y riesgos de cada estrategia
                        
                        Responde en espa√±ol de manera clara, detallada y pr√°ctica.
                        """
                        
                        response = model.generate_content(prompt)
                        
                        # Mostrar el an√°lisis de IA de manera estructurada
                        st.markdown("#### üìä An√°lisis IA Detallado")
                        st.markdown(response.text)
                        
                        # Agregar secci√≥n de implementaci√≥n pr√°ctica
                        st.markdown("#### üéØ Implementaci√≥n Pr√°ctica de Estrategias")
                        
                        # Generar recomendaciones espec√≠ficas basadas en el an√°lisis
                        if 'correlaciones_significativas' in locals() and correlaciones_significativas:
                            st.markdown("**üí° Estrategias Basadas en Correlaciones Detectadas:**")
                            
                            for corr in correlaciones_significativas:
                                if corr['Fuerza'] in ['Fuerte', 'Moderada']:
                                    if corr['Tipo'] == 'Positiva':
                                        st.markdown(f"‚Ä¢ **{corr['Variable 1']} <-> {corr['Variable 2']}**: Correlaci√≥n positiva fuerte - considerar estrategias de pares de trading")
                                    else:
                                        st.markdown(f"‚Ä¢ **{corr['Variable 1']} <-> {corr['Variable 2']}**: Correlaci√≥n negativa fuerte - oportunidad de diversificaci√≥n y arbitraje")
                        
                        if 'divergencias' in locals() and divergencias:
                            st.markdown("**‚ö° Oportunidades de Arbitraje Detectadas:**")
                            for div in divergencias:
                                if div['Oportunidad'] == 'Arbitraje':
                                    st.markdown(f"‚Ä¢ **{div['Par']}**: Divergencia significativa - oportunidad de arbitraje")
                        
                    except Exception as e:
                        st.warning(f"No se pudo generar an√°lisis IA: {e}")
                        st.error(f"Error detallado: {str(e)}")


def recomendar_activos_por_estrategia_optimizada(token_acceso):
    """
    Sistema avanzado de recomendaci√≥n de activos por estrategia con optimizaci√≥n Alpha/Beta
    Analiza todos los activos de los paneles seleccionados y los clasifica seg√∫n estrategias
    """
    st.subheader("üéØ Sistema de Recomendaci√≥n de Activos por Estrategia")
    st.markdown("An√°lisis completo de activos con optimizaci√≥n de estrategias Alpha y Beta")
    
    # Configuraci√≥n de par√°metros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Men√∫ desplegable para tipos de activos
        paneles_activos = {
            "Acciones": "Panel%20General",
            "Bonos": "Bonos", 
            "FCIs": "FCI",
            "CEDEARs": "CEDEARs",
            "ADRs": "ADRs",
            "T√≠tulos P√∫blicos": "TitulosPublicos",
            "Obligaciones Negociables": "ObligacionesNegociables"
        }
        
        panel_seleccionado = st.selectbox(
            "Panel de Activos:",
            list(paneles_activos.keys()),
            help="Seleccione el panel de activos a analizar"
        )
    
    with col2:
        # Benchmarks disponibles
        benchmarks_disponibles = {
            "Merval": "^MERV",
            "S&P 500": "^GSPC", 
            "NASDAQ": "^IXIC",
            "D√≥lar Blue": "USDBRL=X",
            "Oro": "GC=F",
            "Bitcoin": "BTC-USD",
            "Bono AL30": "AL30D.BA",
            "Bono GD30": "GD30D.BA"
        }
        
        benchmark_seleccionado = st.selectbox(
            "Benchmark:",
            list(benchmarks_disponibles.keys()),
            help="Seleccione el benchmark de referencia"
        )
    
    with col3:
        # Estrategias de inversi√≥n
        estrategias_inversion = {
            "Index Tracker": {"beta_target": 1.0, "alpha_target": 0.0, "desc": "R√©plica exacta del benchmark"},
            "Traditional Long-Only": {"beta_target": 1.0, "alpha_target": 0.05, "desc": "Supera al mercado con retornos no correlacionados"},
            "Smart Beta": {"beta_target": 0.8, "alpha_target": 0.03, "desc": "Ajusta din√°micamente el beta seg√∫n condiciones del mercado"},
            "Hedge Fund": {"beta_target": 0.0, "alpha_target": 0.08, "desc": "Retornos absolutos no correlacionados con el mercado"},
            "Defensive": {"beta_target": 0.5, "alpha_target": 0.02, "desc": "Protecci√≥n contra ca√≠das del mercado"},
            "Growth": {"beta_target": 1.2, "alpha_target": 0.06, "desc": "Exposici√≥n a activos de crecimiento"},
            "Value": {"beta_target": 0.9, "alpha_target": 0.04, "desc": "Enfoque en activos infravalorados"},
            "Momentum": {"beta_target": 1.1, "alpha_target": 0.07, "desc": "Seguimiento de tendencias"}
        }
        
        estrategia_seleccionada = st.selectbox(
            "Estrategia:",
            list(estrategias_inversion.keys()),
            help="Seleccione la estrategia de inversi√≥n"
        )
    
    # Par√°metros adicionales
    col1, col2 = st.columns(2)
    
    with col1:
        periodo_analisis = st.selectbox(
            "Per√≠odo de An√°lisis:",
            ["6mo", "1y", "2y", "5y"],
            index=1,
            help="Per√≠odo hist√≥rico para el an√°lisis"
        )
        
        ordenamiento = st.selectbox(
            "Ordenar por:",
            ["Alpha (Mejor)", "Beta (√ìptimo)", "Sharpe Ratio", "R¬≤", "Volatilidad (Menor)"],
            help="Criterio de ordenamiento de activos"
        )
    
    with col2:
        min_alpha = st.number_input(
            "Alpha M√≠nimo (%):",
            min_value=-50.0,
            max_value=50.0,
            value=0.0,
            step=0.5,
            help="Filtro de alpha m√≠nimo anualizado"
        )
        
        max_volatilidad = st.number_input(
            "Volatilidad M√°xima (%):",
            min_value=5.0,
            max_value=100.0,
            value=50.0,
            step=1.0,
            help="Filtro de volatilidad m√°xima anualizada"
        )
    
    # Bot√≥n de ejecuci√≥n
    if st.button("üöÄ Ejecutar An√°lisis Completo", type="primary"):
        try:
            with st.spinner("üîÑ Obteniendo datos hist√≥ricos..."):
                # ========== 1. OBTENER TODOS LOS ACTIVOS DEL PANEL ==========
                st.markdown("### üìä Obteniendo Activos del Panel")
                
                # Obtener todos los activos del panel
                activos_panel = obtener_tickers_por_panel(
                    token_acceso, 
                    [paneles_activos[panel_seleccionado]], 
                    pais='Argentina'
                )
                
                if not activos_panel:
                    st.error("‚ùå No se pudieron obtener activos del panel seleccionado")
                    return
                
                # Mostrar progreso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                st.success(f"‚úÖ Se encontraron {len(activos_panel)} activos en el panel {panel_seleccionado}")
                
                # ========== 2. OBTENER DATOS HIST√ìRICOS ==========
                st.markdown("### üìà Obteniendo Datos Hist√≥ricos")
                
                # Calcular fechas
                fecha_hasta = datetime.now()
                if periodo_analisis == "6mo":
                    fecha_desde = fecha_hasta - timedelta(days=180)
                elif periodo_analisis == "1y":
                    fecha_desde = fecha_hasta - timedelta(days=365)
                elif periodo_analisis == "2y":
                    fecha_desde = fecha_hasta - timedelta(days=730)
                else:  # 5y
                    fecha_desde = fecha_hasta - timedelta(days=1825)
                
                # Obtener datos hist√≥ricos de TODOS los activos
                datos_activos = {}
                activos_exitosos = []
                
                for i, activo in enumerate(activos_panel):
                    try:
                        status_text.text(f"üìä Procesando {activo} ({i+1}/{len(activos_panel)})")
                        progress_bar.progress((i + 1) / len(activos_panel))
                        
                        df_activo = obtener_serie_historica_iol(
                            token_acceso,
                            "Buenos Aires",
                            activo,
                            fecha_desde.strftime("%Y-%m-%d"),
                            fecha_hasta.strftime("%Y-%m-%d"),
                            "Ajustada"
                        )
                        
                        if df_activo is not None and not df_activo.empty:
                            datos_activos[activo] = df_activo
                            activos_exitosos.append(activo)
                        else:
                            st.warning(f"‚ö†Ô∏è Sin datos para {activo}")
                            
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Error obteniendo datos de {activo}: {str(e)}")
                
                st.success(f"‚úÖ Se obtuvieron datos de {len(activos_exitosos)} activos")
                
                # ========== 3. OBTENER DATOS DEL BENCHMARK ==========
                st.markdown("### üìä Obteniendo Datos del Benchmark")
                
                try:
                    benchmark_symbol = benchmarks_disponibles[benchmark_seleccionado]
                    benchmark_data = yf.download(
                        benchmark_symbol,
                        start=fecha_desde,
                        end=fecha_hasta,
                        progress=False
                    )
                    
                    if benchmark_data.empty:
                        st.error(f"‚ùå No se pudieron obtener datos del benchmark {benchmark_symbol}")
                        return
                        
                    st.success(f"‚úÖ Datos del benchmark {benchmark_seleccionado} obtenidos")
                    
                except Exception as e:
                    st.error(f"‚ùå Error obteniendo datos del benchmark: {str(e)}")
                    return
                
                # ========== 4. CALCULAR M√âTRICAS CAPM PARA TODOS LOS ACTIVOS ==========
                st.markdown("### üìä Calculando M√©tricas CAPM")
                
                # Preparar datos del benchmark
                benchmark_returns = benchmark_data['Adj Close'].pct_change().dropna()
                
                # Calcular m√©tricas CAPM para cada activo
                resultados_capm = []
                
                for simbolo, df_activo in datos_activos.items():
                    try:
                        # Obtener precios de cierre
                        if 'ultimoPrecio' in df_activo.columns:
                            precios_activo = df_activo['ultimoPrecio']
                        elif 'precio' in df_activo.columns:
                            precios_activo = df_activo['precio']
                        else:
                            continue
                        
                        # Calcular retornos
                        retornos_activo = precios_activo.pct_change().dropna()
                        
                        # Alinear fechas
                        retornos_alineados = pd.concat([retornos_activo, benchmark_returns], axis=1).dropna()
                        
                        if len(retornos_alineados) < 30:  # M√≠nimo de datos
                            continue
                        
                        activo_returns = retornos_alineados.iloc[:, 0]
                        benchmark_returns_aligned = retornos_alineados.iloc[:, 1]
                        
                        # Calcular m√©tricas CAPM
                        # Beta
                        cov_matrix = np.cov(activo_returns, benchmark_returns_aligned)
                        beta = cov_matrix[0, 1] / cov_matrix[1, 1] if cov_matrix[1, 1] != 0 else 0
                        
                        # Alpha (anualizado)
                        alpha_diario = np.mean(activo_returns - beta * benchmark_returns_aligned)
                        alpha_anualizado = (1 + alpha_diario) ** 252 - 1
                        
                        # R¬≤
                        correlation = np.corrcoef(activo_returns, benchmark_returns_aligned)[0, 1]
                        r_squared = correlation ** 2
                        
                        # Volatilidad anualizada
                        volatilidad = np.std(activo_returns) * np.sqrt(252)
                        
                        # Sharpe Ratio (asumiendo tasa libre de riesgo = 0)
                        sharpe = np.mean(activo_returns) / np.std(activo_returns) * np.sqrt(252) if np.std(activo_returns) != 0 else 0
                        
                        # Clasificar estrategia seg√∫n m√©tricas
                        estrategia_clasificada = clasificar_estrategia_por_metricas(
                            alpha_anualizado, beta, sharpe, volatilidad, estrategias_inversion
                        )
                        
                        # Calcular score de optimizaci√≥n para la estrategia seleccionada
                        score_optimizacion = calcular_score_optimizacion(
                            alpha_anualizado, beta, sharpe, volatilidad,
                            estrategias_inversion[estrategia_seleccionada]
                        )
                        
                        resultados_capm.append({
                            'Activo': simbolo,
                            'Alpha': alpha_anualizado,
                            'Beta': beta,
                            'R¬≤': r_squared,
                            'Volatilidad': volatilidad,
                            'Sharpe': sharpe,
                            'Estrategia': estrategia_clasificada,
                            'Score_Optimizacion': score_optimizacion
                        })
                        
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Error calculando m√©tricas para {simbolo}: {str(e)}")
                
                if not resultados_capm:
                    st.error("‚ùå No se pudieron calcular m√©tricas para ning√∫n activo")
                    return
                
                # ========== 5. FILTRAR Y ORDENAR RESULTADOS ==========
                st.markdown("### üéØ Filtrando y Ordenando Resultados")
                
                # Crear DataFrame
                df_capm = pd.DataFrame(resultados_capm)
                
                # Aplicar filtros
                df_filtrado = df_capm[
                    (df_capm['Alpha'] >= min_alpha / 100) &
                    (df_capm['Volatilidad'] <= max_volatilidad / 100)
                ].copy()
                
                # Ordenar seg√∫n criterio seleccionado
                if ordenamiento == "Alpha (Mejor)":
                    df_filtrado = df_filtrado.sort_values('Alpha', ascending=False)
                elif ordenamiento == "Beta (√ìptimo)":
                    # Ordenar por proximidad al beta objetivo de la estrategia
                    beta_objetivo = estrategias_inversion[estrategia_seleccionada]["beta_target"]
                    df_filtrado['Distancia_Beta'] = abs(df_filtrado['Beta'] - beta_objetivo)
                    df_filtrado = df_filtrado.sort_values('Distancia_Beta')
                elif ordenamiento == "Sharpe Ratio":
                    df_filtrado = df_filtrado.sort_values('Sharpe', ascending=False)
                elif ordenamiento == "R¬≤":
                    df_filtrado = df_filtrado.sort_values('R¬≤', ascending=False)
                elif ordenamiento == "Volatilidad (Menor)":
                    df_filtrado = df_filtrado.sort_values('Volatilidad')
                
                # Ordenar tambi√©n por score de optimizaci√≥n
                df_filtrado = df_filtrado.sort_values('Score_Optimizacion', ascending=False)
                
                # ========== 6. CLASIFICAR POR ESTRATEGIAS ==========
                st.markdown("### üéØ Clasificaci√≥n por Estrategias")
                
                # Clasificar estrategias
                estrategias_clasificadas = {}
                for estrategia in estrategias_inversion.keys():
                    activos_estrategia = df_filtrado[df_filtrado['Estrategia'] == estrategia]
                    if not activos_estrategia.empty:
                        estrategias_clasificadas[estrategia] = activos_estrategia
                
                # ========== 7. MOSTRAR RESULTADOS ==========
                st.markdown("### üìã Resultados del An√°lisis")
                
                # M√©tricas resumidas
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("Total Activos Analizados", len(df_capm))
                    st.metric("Activos con Alpha > 0", len(df_capm[df_capm['Alpha'] > 0]))
                
                with col2:
                    st.metric("Activos Defensivos (Beta < 0.8)", len(df_capm[df_capm['Beta'] < 0.8]))
                    st.metric("Activos de Crecimiento (Beta > 1.2)", len(df_capm[df_capm['Beta'] > 1.2]))
                
                with col3:
                    st.metric("Activos con Sharpe > 1", len(df_capm[df_capm['Sharpe'] > 1]))
                    st.metric("Activos con R¬≤ > 0.5", len(df_capm[df_capm['R¬≤'] > 0.5]))
                
                with col4:
                    st.metric("Activos Filtrados", len(df_filtrado))
                    st.metric("Estrategias Encontradas", len(estrategias_clasificadas))
                
                # ========== 8. RECOMENDACIONES ESPEC√çFICAS ==========
                st.markdown("### üí° Recomendaciones Espec√≠ficas")
                
                # Encontrar mejores activos para la estrategia seleccionada
                activos_estrategia_seleccionada = df_filtrado[
                    df_filtrado['Estrategia'] == estrategia_seleccionada
                ]
                
                if not activos_estrategia_seleccionada.empty:
                    st.success(f"‚úÖ **Top 5 Activos para {estrategia_seleccionada}:**")
                    
                    # Mostrar top 5 activos
                    top_5 = activos_estrategia_seleccionada.head(5)
                    
                    for i, (_, activo) in enumerate(top_5.iterrows()):
                        col1, col2, col3 = st.columns([2, 1, 1])
                        
                        with col1:
                            st.markdown(f"**{i+1}. {activo['Activo']}**")
                            st.markdown(f"*{estrategias_inversion[estrategia_seleccionada]['desc']}*")
                        
                        with col2:
                            st.metric("Alpha", f"{activo['Alpha']:.2%}")
                            st.metric("Beta", f"{activo['Beta']:.2f}")
                        
                        with col3:
                            st.metric("Sharpe", f"{activo['Sharpe']:.2f}")
                            st.metric("Score", f"{activo['Score_Optimizacion']:.2f}")
                        
                        st.markdown("---")
                else:
                    st.warning(f"‚ö†Ô∏è No se encontraron activos que coincidan exactamente con la estrategia '{estrategia_seleccionada}'")
                    
                    # Mostrar estrategias alternativas
                    st.info("**Estrategias alternativas disponibles:**")
                    for estrategia, activos in estrategias_clasificadas.items():
                        if not activos.empty:
                            st.markdown(f"‚Ä¢ **{estrategia}**: {len(activos)} activos")
                
                # ========== 9. VISUALIZACIONES ==========
                st.markdown("### üìä Visualizaciones")
                
                # Crear pesta√±as para diferentes visualizaciones
                tab1, tab2, tab3, tab4 = st.tabs([
                    "üéØ Distribuci√≥n Alpha-Beta", 
                    "üìà Ranking de Activos", 
                    "üè∑Ô∏è Clasificaci√≥n por Estrategias",
                    "üìä M√©tricas Comparativas"
                ])
                
                with tab1:
                    # Gr√°fico de dispersi√≥n Alpha vs Beta
                    fig_scatter = go.Figure()
                    
                    # Colorear por estrategia
                    for estrategia in estrategias_clasificadas.keys():
                        activos_estrategia = estrategias_clasificadas[estrategia]
                        fig_scatter.add_trace(go.Scatter(
                            x=activos_estrategia['Beta'],
                            y=activos_estrategia['Alpha'],
                            mode='markers',
                            name=estrategia,
                            text=activos_estrategia['Activo'],
                            hovertemplate='<b>%{text}</b><br>' +
                                        'Alpha: %{y:.2%}<br>' +
                                        'Beta: %{x:.2f}<br>' +
                                        'Sharpe: %{customdata:.2f}<extra></extra>',
                            customdata=activos_estrategia['Sharpe']
                        ))
                    
                    # Agregar l√≠neas de referencia
                    fig_scatter.add_hline(y=0, line_dash="dash", line_color="gray")
                    fig_scatter.add_vline(x=1, line_dash="dash", line_color="gray")
                    
                    # Marcar el punto objetivo de la estrategia seleccionada
                    target_alpha = estrategias_inversion[estrategia_seleccionada]["alpha_target"]
                    target_beta = estrategias_inversion[estrategia_seleccionada]["beta_target"]
                    
                    fig_scatter.add_trace(go.Scatter(
                        x=[target_beta],
                        y=[target_alpha],
                        mode='markers',
                        name=f'Objetivo {estrategia_seleccionada}',
                        marker=dict(symbol='star', size=15, color='red'),
                        showlegend=True
                    ))
                    
                    fig_scatter.update_layout(
                        title="Distribuci√≥n Alpha vs Beta por Estrategia",
                        xaxis_title="Beta",
                        yaxis_title="Alpha Anualizado",
                        height=600
                    )
                    
                    st.plotly_chart(fig_scatter, use_container_width=True)
                
                with tab2:
                    # Tabla de ranking
                    st.markdown(f"**Top 20 Activos Ordenados por {ordenamiento}**")
                    
                    # Formatear DataFrame para mostrar
                    df_mostrar = df_filtrado.head(20).copy()
                    df_mostrar['Alpha'] = df_mostrar['Alpha'].apply(lambda x: f"{x:.2%}")
                    df_mostrar['Beta'] = df_mostrar['Beta'].apply(lambda x: f"{x:.2f}")
                    df_mostrar['R¬≤'] = df_mostrar['R¬≤'].apply(lambda x: f"{x:.2f}")
                    df_mostrar['Volatilidad'] = df_mostrar['Volatilidad'].apply(lambda x: f"{x:.2%}")
                    df_mostrar['Sharpe'] = df_mostrar['Sharpe'].apply(lambda x: f"{x:.2f}")
                    df_mostrar['Score_Optimizacion'] = df_mostrar['Score_Optimizacion'].apply(lambda x: f"{x:.2f}")
                    
                    st.dataframe(
                        df_mostrar[['Activo', 'Alpha', 'Beta', 'Sharpe', 'R¬≤', 'Volatilidad', 'Estrategia', 'Score_Optimizacion']],
                        use_container_width=True,
                        hide_index=True
                    )
                
                with tab3:
                    # Gr√°fico de barras por estrategia
                    estrategia_counts = df_filtrado['Estrategia'].value_counts()
                    
                    fig_bars = go.Figure(data=[
                        go.Bar(
                            x=estrategia_counts.index,
                            y=estrategia_counts.values,
                            text=estrategia_counts.values,
                            textposition='auto',
                        )
                    ])
                    
                    fig_bars.update_layout(
                        title="Distribuci√≥n de Activos por Estrategia",
                        xaxis_title="Estrategia",
                        yaxis_title="N√∫mero de Activos",
                        height=500
                    )
                    
                    st.plotly_chart(fig_bars, use_container_width=True)
                    
                    # Mostrar detalles por estrategia
                    for estrategia, activos in estrategias_clasificadas.items():
                        with st.expander(f"üìä {estrategia} ({len(activos)} activos)"):
                            if not activos.empty:
                                col1, col2 = st.columns(2)
                                
                                with col1:
                                    st.markdown("**Mejores activos:**")
                                    top_3 = activos.head(3)
                                    for _, activo in top_3.iterrows():
                                        st.markdown(f"‚Ä¢ **{activo['Activo']}**: Alpha {activo['Alpha']:.2%}, Beta {activo['Beta']:.2f}")
                                
                                with col2:
                                    st.markdown("**Estad√≠sticas:**")
                                    st.markdown(f"‚Ä¢ Alpha promedio: {activos['Alpha'].mean():.2%}")
                                    st.markdown(f"‚Ä¢ Beta promedio: {activos['Beta'].mean():.2f}")
                                    st.markdown(f"‚Ä¢ Sharpe promedio: {activos['Sharpe'].mean():.2f}")
                
                with tab4:
                    # M√©tricas comparativas
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # Box plot de Alpha por estrategia
                        fig_box_alpha = go.Figure()
                        
                        for estrategia in estrategias_clasificadas.keys():
                            activos_estrategia = estrategias_clasificadas[estrategia]
                            fig_box_alpha.add_trace(go.Box(
                                y=activos_estrategia['Alpha'],
                                name=estrategia,
                                boxpoints='outliers'
                            ))
                        
                        fig_box_alpha.update_layout(
                            title="Distribuci√≥n de Alpha por Estrategia",
                            yaxis_title="Alpha Anualizado",
                            height=400
                        )
                        
                        st.plotly_chart(fig_box_alpha, use_container_width=True)
                    
                    with col2:
                        # Box plot de Beta por estrategia
                        fig_box_beta = go.Figure()
                        
                        for estrategia in estrategias_clasificadas.keys():
                            activos_estrategia = estrategias_clasificadas[estrategia]
                            fig_box_beta.add_trace(go.Box(
                                y=activos_estrategia['Beta'],
                                name=estrategia,
                                boxpoints='outliers'
                            ))
                        
                        fig_box_beta.update_layout(
                            title="Distribuci√≥n de Beta por Estrategia",
                            yaxis_title="Beta",
                            height=400
                        )
                        
                        st.plotly_chart(fig_box_beta, use_container_width=True)
                
                # ========== 10. RECOMENDACIONES FINALES ==========
                st.markdown("### üéØ Recomendaciones Finales")
                
                # Resumen ejecutivo
                st.markdown(f"""
                **üìã Resumen del An√°lisis:**
                - **Panel analizado**: {panel_seleccionado}
                - **Benchmark**: {benchmark_seleccionado}
                - **Estrategia objetivo**: {estrategia_seleccionada}
                - **Activos analizados**: {len(df_capm)}
                - **Activos filtrados**: {len(df_filtrado)}
                - **Estrategias encontradas**: {len(estrategias_clasificadas)}
                """)
                
                # Recomendaciones espec√≠ficas
                if not activos_estrategia_seleccionada.empty:
                    mejor_activo = activos_estrategia_seleccionada.iloc[0]
                    
                    st.success(f"""
                    **üèÜ Mejor Activo para {estrategia_seleccionada}:**
                    - **Activo**: {mejor_activo['Activo']}
                    - **Alpha**: {mejor_activo['Alpha']:.2%}
                    - **Beta**: {mejor_activo['Beta']:.2f}
                    - **Sharpe Ratio**: {mejor_activo['Sharpe']:.2f}
                    - **Score de Optimizaci√≥n**: {mejor_activo['Score_Optimizacion']:.2f}
                    """)
                
                # Advertencias y consideraciones
                st.markdown("""
                **‚ö†Ô∏è Consideraciones Importantes:**
                - Los resultados se basan en datos hist√≥ricos y no garantizan rendimientos futuros
                - Considere la liquidez y el volumen de operaci√≥n de los activos recomendados
                - Diversifique su cartera para reducir el riesgo espec√≠fico
                - Monitoree regularmente el rendimiento y ajuste seg√∫n sea necesario
                """)
                
        except Exception as e:
            st.error(f"‚ùå Error en el an√°lisis: {str(e)}")
            st.exception(e)


def clasificar_estrategia_por_metricas(alpha, beta, sharpe, volatilidad, estrategias_inversion):
    """
    Clasifica un activo seg√∫n sus m√©tricas en una estrategia de inversi√≥n
    """
    mejor_estrategia = None
    mejor_score = -float('inf')
    
    for estrategia, parametros in estrategias_inversion.items():
        # Calcular score de proximidad a los par√°metros objetivo
        alpha_diff = abs(alpha - parametros["alpha_target"])
        beta_diff = abs(beta - parametros["beta_target"])
        
        # Score basado en proximidad a objetivos (menor diferencia = mejor score)
        score = -(alpha_diff + beta_diff) + sharpe * 0.1  # Bonus por Sharpe ratio
        
        if score > mejor_score:
            mejor_score = score
            mejor_estrategia = estrategia
    
    return mejor_estrategia


def calcular_score_optimizacion(alpha, beta, sharpe, volatilidad, parametros_estrategia):
    """
    Calcula un score de optimizaci√≥n para un activo seg√∫n los par√°metros de una estrategia
    """
    # Par√°metros objetivo
    alpha_target = parametros_estrategia["alpha_target"]
    beta_target = parametros_estrategia["beta_target"]
    
    # Calcular proximidad a objetivos
    alpha_proximity = 1 / (1 + abs(alpha - alpha_target))
    beta_proximity = 1 / (1 + abs(beta - beta_target))
    
    # Bonus por Sharpe ratio (mayor = mejor)
    sharpe_bonus = max(0, sharpe) * 0.1
    
    # Penalizaci√≥n por volatilidad excesiva
    volatilidad_penalty = max(0, volatilidad - 0.3) * 0.5  # Penalizar volatilidad > 30%
    
    # Score final
    score = alpha_proximity * 0.4 + beta_proximity * 0.4 + sharpe_bonus - volatilidad_penalty
    
    return score


if __name__ == "__main__":
    main()
