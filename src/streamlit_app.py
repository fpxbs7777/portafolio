```python
import streamlit as st
from streamlit.runtime.caching import cache_data, cache_resource
import requests
import plotly.graph_objects as go
import pandas as pd
from plotly.subplots import make_subplots
import functools
import time
from datetime import datetime, timedelta
from arch import arch_model
from scipy.stats import norm
import matplotlib.pyplot as plt
import yfinance as yf
import numpy as np
import json
from typing import Dict, List, Tuple, Optional, Any
from concurrent.futures import ThreadPoolExecutor, as_completed
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Constants
CACHE_TTL = 3600  # 1 hour in seconds
HISTORICAL_DATA_DAYS = 365  # Default days for historical data
MAX_WORKERS = 5  # Max threads for concurrent API calls

# ... (rest of the code remains the same)

@cache_data(ttl=CACHE_TTL, show_spinner="Obteniendo datos del portafolio...")
def obtener_portafolio_cached(token_portador: str, id_cliente: str, pais: str = 'Argentina') -> Dict:
    """Obtiene y cachea el portafolio del usuario.
    
    Args:
        token_portador: Token de autenticaci√≥n
        id_cliente: ID del cliente
        pais: Pa√≠s del portafolio (default: 'Argentina')
        
    Returns:
        Dict con los datos del portafolio
    """
    try:
        return obtener_portafolio(token_portador, id_cliente, pais)
    except Exception as e:
        logger.error(f"Error al obtener portafolio: {str(e)}")
        st.error("Error al cargar el portafolio. Por favor, intente nuevamente.")
        return {}

@cache_data(ttl=1800, show_spinner=False)  # Cache for 30 minutes
def obtener_serie_historica_cached(
    token_portador: str, 
    mercado: str, 
    simbolo: str, 
    fecha_desde: str, 
    fecha_hasta: str, 
    ajustada: str = "SinAjustar"
) -> pd.DataFrame:
    """Obtiene y cachea datos hist√≥ricos con manejo de errores.
    
    Args:
        token_portador: Token de autenticaci√≥n
        mercado: Mercado del activo
        simbolo: S√≠mbolo del activo
        fecha_desde: Fecha de inicio (YYYY-MM-DD)
        fecha_hasta: Fecha de fin (YYYY-MM-DD)
        ajustada: Tipo de ajuste (default: "SinAjustar")
        
    Returns:
        DataFrame con los datos hist√≥ricos
    """
    try:
        return obtener_serie_historica_iol(token_portador, mercado, simbolo, fecha_desde, fecha_hasta, ajustada)
    except Exception as e:
        logger.error(f"Error al obtener serie hist√≥rica para {simbolo}: {str(e)}")
        return pd.DataFrame()  # Return empty DataFrame on error

def inicializar_session_state() -> None:
    """Inicializa las variables de sesi√≥n necesarias con valores por defecto."""
    default_state = {
        'autenticado': False,
        'token_acceso': None,
        'id_cliente': None,
        'fecha_desde': (datetime.now() - timedelta(days=HISTORICAL_DATA_DAYS)).strftime('%Y-%m-%d'),
        'fecha_hasta': datetime.now().strftime('%Y-%m-%d'),
        'ultima_pagina': 'inicio',
        'credenciales_guardadas': False,
        'portfolio_data': None,
        'last_updated': None,
        'optimization_params': {}
    }
    
    for key, value in default_state.items():
        if key not in st.session_state:
            st.session_state[key] = value

def mostrar_panel_autenticacion() -> None:
    """Muestra el panel de autenticaci√≥n en la barra lateral con manejo de sesi√≥n persistente."""
    st.sidebar.title("üîê Autenticaci√≥n")
    
    # Intento de autenticaci√≥n autom√°tica con credenciales guardadas
    if not st.session_state.autenticado and st.session_state.credenciales_guardadas and st.session_state.token_acceso:
        with st.spinner("Restaurando sesi√≥n..."):
            try:
                # Verificar si el token sigue siendo v√°lido
                if verificar_token_valido(st.session_state.token_acceso):
                    st.session_state.autenticado = True
                    st.experimental_rerun()
                else:
                    st.session_state.token_acceso = None
                    st.session_state.credenciales_guardadas = False
            except Exception as e:
                logger.warning(f"Error al verificar token: {str(e)}")
                st.session_state.token_acceso = None
                st.session_state.credenciales_guardadas = False
    
    # Mostrar bot√≥n de cierre de sesi√≥n si est√° autenticado
    if st.session_state.autenticado:
        if st.sidebar.button("Cerrar sesi√≥n", key="btn_cerrar_sesion"):
            # Limpiar solo los datos sensibles, mantener preferencias
            st.session_state.update({
                'autenticado': False,
                'token_acceso': None,
                'id_cliente': None,
                'portfolio_data': None,
                'last_updated': None
            })
            st.experimental_rerun()
        return
    
    # Mostrar formulario de inicio de sesi√≥n
    with st.sidebar.form("login_form"):
        st.subheader("Iniciar sesi√≥n")
        usuario = st.text_input("Usuario", key="input_usuario")
        contrase√±a = st.text_input("Contrase√±a", type="password", key="input_contrasena")
        recordar = st.checkbox("Recordar mis credenciales", value=True, key="chk_recordar")
        
        if st.form_submit_button("Iniciar sesi√≥n", type="primary"):
            with st.spinner("Verificando credenciales..."):
                try:
                    tokens = obtener_tokens(usuario, contrase√±a)
                    if tokens and 'access_token' in tokens:
                        st.session_state.update({
                            'token_acceso': tokens['access_token'],
                            'id_cliente': tokens.get('client_user_id'),
                            'autenticado': True,
                            'credenciales_guardadas': recordar,
                            'last_updated': datetime.now().isoformat()
                        })
                        st.experimental_rerun()
                    else:
                        st.sidebar.error("Error en la autenticaci√≥n. Verifica tus credenciales.")
                except Exception as e:
                    error_msg = str(e)
                    logger.error(f"Error de autenticaci√≥n: {error_msg}")
                    st.sidebar.error(f"Error al conectar con el servidor: {error_msg}")
                    st.session_state.credenciales_guardadas = False

def mostrar_configuracion_usuario():
    """Muestra la configuraci√≥n del usuario una vez autenticado."""
    with st.sidebar:
        st.success("‚úÖ Conectado a IOL")
        # ... (rest of the code remains the same)

@st.cache_resource(show_spinner=False)
def load_css() -> None:
    """Carga los estilos CSS personalizados."""
    st.markdown("""
    <style>
        /* Estilos generales */
        .stApp {
            background-color: #0E1117;
            color: #FAFAFA;
        }
        
        /* Mejoras de rendimiento para elementos pesados */
        .stDataFrame, .element-container {
            will-change: transform;
        }
        
        /* Optimizaci√≥n de fuentes */
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');
        
        html, body, [class*="css"] {
            font-family: 'Roboto', sans-serif;
        }
    </style>
    """, unsafe_allow_html=True)

def verificar_token_valido(token: str) -> bool:
    """Verifica si un token de acceso es v√°lido."""
    try:
        # Intenta hacer una solicitud que requiera autenticaci√≥n
        response = requests.get(
            "https://api.invertironline.com/api/v2/estadocuenta",
            headers={"Authorization": f"Bearer {token}"}
        )
        return response.status_code == 200
    except Exception:
        return False

def main() -> None:
    """Funci√≥n principal de la aplicaci√≥n."""
    # Configuraci√≥n de la p√°gina
    st.set_page_config(
        page_title="Portfolio Manager",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Cargar estilos CSS
    load_css()
    
    # Inicializar el estado de la sesi√≥n
    inicializar_session_state()
    
    # Mostrar el panel de autenticaci√≥n
    mostrar_panel_autenticacion()
    
    # Si el usuario no est√° autenticado, mostrar solo la p√°gina de inicio
    if not st.session_state.autenticado:
        mostrar_pagina_principal()
        return
    
    # Si el usuario est√° autenticado, cargar los datos y mostrar la interfaz
    try:
        # Usar columnas para mejorar el layout
        col1, col2 = st.columns([1, 4])
        
        with col1:
            with st.spinner("Cargando men√∫..."):
                mostrar_menu_principal()
        
        with col2:
            # Usar un contenedor para el contenido principal
            with st.container():
                with st.spinner("Cargando contenido..."):
                    mostrar_contenido_pagina()
        
        # A√±adir script para mantener viva la sesi√≥n y mejorar la experiencia
        st.components.v1.html("""
        <script>
        // Mantener viva la sesi√≥n con un ping peri√≥dico
        const keepAlive = () => {
            fetch(window.location.href, {method: 'HEAD'})
                .catch(err => console.debug('Keep-alive ping failed:', err));
        };
        
        // Ejecutar cada 4.5 minutos (menos que el timeout del servidor)
        setInterval(keepAlive, 4.5 * 60 * 1000);
        
        // Mejorar la experiencia de carga
        document.addEventListener('DOMContentLoaded', () => {
            // Mostrar indicador de carga suave
            const style = document.createElement('style');
            style.textContent = `
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                .stApp > div {
                    animation: fadeIn 0.3s ease-out;
                }
            `;
            document.head.appendChild(style);
        });
        </script>
        """)
        
    except Exception as e:
        logger.error(f"Error en la aplicaci√≥n principal: {str(e)}")
        st.error("Ocurri√≥ un error inesperado. Por favor, recarga la p√°gina e int√©ntalo de nuevo.")
        if st.button("Recargar aplicaci√≥n"):
            st.experimental_rerun()

if __name__ == "__main__":
    main()
